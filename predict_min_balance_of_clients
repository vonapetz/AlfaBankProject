{"cells":[{"cell_type":"markdown","metadata":{"id":"9S2AyGwXWIaS"},"source":["# Задача: Разработайте модель для прогнозирования минимального баланса клиентов банка в следующем месяце.\n","\n","#### Модель должна классифицировать клиентов по их минимальному балансу, оценивая вероятность попадания в одну из 7 категорий. Для этого:\n","1. Изучите предоставленные данные о клиентах и их транзакциях за трехмесячный период.\n","2. Проанализируйте взаимосвязи между признаками и целевой переменной.\n","3. Постройте модель на тренировочных данных и оцените ее качество.\n","4. Сделайте предсказание для тестовой выборки и сохраните его в формате CSV.\n","5. Отправьте решение на платформу в виде файла предсказания и узнайте качество предсказания в виде оценки с помощью метрики WMAE.\n","6. Доработайте модель и отправьте улучшенные предсказания для повышения результата."]},{"cell_type":"markdown","metadata":{"id":"lH1LLDCzJmuo"},"source":["# Импортируем нужные библиотеки"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mZcSb4E3tFLi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753611946692,"user_tz":-180,"elapsed":3231,"user":{"displayName":"vanya","userId":"14921167373940198216"}},"outputId":"c1219f95-11f6-4754-ced6-81edbf21041e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kcvyHHI51l5K","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753612147661,"user_tz":-180,"elapsed":200936,"user":{"displayName":"vanya","userId":"14921167373940198216"}},"outputId":"850e0720-9386-45e2-dbff-b856341f70e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  /content/drive/MyDrive/alfa_bank_case/TheData.zip\n","replace __MACOSX/._Альфа-Банк х МФТИ. Задача прогнозирования баланса клиентов. Данные по задаче? [y]es, [n]o, [A]ll, [N]one, [r]ename: N\n"]}],"source":["!unzip /content/drive/MyDrive/alfa_bank_case/TheData.zip\n","# !unzip /content/drive/MyDrive/TheData.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OwmAwOBKdYBW"},"outputs":[],"source":["!pip install catboost lightgbm xgboost -q\n","!pip install shap -q"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"angESVeIWJeX","executionInfo":{"status":"ok","timestamp":1753627880590,"user_tz":-180,"elapsed":24,"user":{"displayName":"vanya","userId":"14921167373940198216"}}},"outputs":[],"source":["# %%writefile requirements.txt\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from itertools import product\n","\n","from scipy.special import logsumexp\n","\n","from sklearn.model_selection import KFold, StratifiedKFold\n","from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, train_test_split\n","from sklearn.metrics import mean_absolute_error, ConfusionMatrixDisplay, classification_report\n","from sklearn.preprocessing import LabelEncoder, OrdinalEncoder, OneHotEncoder\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.impute import SimpleImputer\n","\n","from imblearn.over_sampling import SMOTE\n","from imblearn.under_sampling import ClusterCentroids\n","\n","from catboost import CatBoost, CatBoostClassifier, Pool\n","\n","import lightgbm as lgb\n","from lightgbm import Dataset, LGBMClassifier, early_stopping, log_evaluation\n","\n","import xgboost as xgb\n","from xgboost import DMatrix, XGBClassifier\n","\n","import shap\n","shap.initjs()\n","\n","import warnings\n","warnings.filterwarnings('ignore', category=UserWarning)\n","\n","import gc\n","\n","pd.set_option('display.max_columns', None)"]},{"cell_type":"code","source":["# !pip freeze > requirements.txt\n","!pip install -r requirements.txt"],"metadata":{"id":"fNTr3jGISjHV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xQFJmGxUYiv7"},"source":["# Импортируем датасеты"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t1_Kncz35tyF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441765651,"user_tz":-180,"elapsed":12,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"60979977-a337-4f87-c162-f3795c84c6a0"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/Альфа-Банк х МФТИ. Задача прогнозирования баланса клиентов. Данные по задаче/test_transactions.parquet: Apache Parquet\n"]}],"source":["# проверим тип файла\n","!file '/content/Альфа-Банк х МФТИ. Задача прогнозирования баланса клиентов. Данные по задаче/test_transactions.parquet'"]},{"cell_type":"markdown","metadata":{"id":"ymGbFyPo-emu"},"source":["### Признаки и их значение:\n","**Каждый из датасетов содержит следующие признаки:**\n","- *client_num* — уникальный анонимный идентификатор клиента;\n","- *date_time* — дата и время совершения транзакции;\n","- *mcc_code* — MCC-код торговой точки;\n","- *merchant_name* — закодированное имя мерчанта (продавца);\n","- *amount* — сумма проведенной транзакции.\n","\n","**Файл train_target.csv** — файл с конечными классами клиентов, информация о которых описана в тренировочных данных.\n","Содержит признаки:\n","- *client_num* — уникальный анонимный идентификатор клиента;\n","- *target* — целевая переменная (метка класса клиента от 0 до 6).\n","\n","**Файл test_target.csv** — файл о клиентах, значение целевой переменной для которых только предстоит определить. Содержит\n","признаки:\n","- *client_num* — уникальный анонимный идентификатор клиента.\n","\n","**Файл test_target.csv** — файл о клиентах, значение целевой переменной для которых только предстоит определить. Содержит\n","признаки:\n","- *client_num* — уникальный анонимный идентификатор клиента.\n","\n","- **Файл sample_submission.csv** — пример сабмита для отправки на платформу. Содержит признаки:\n","- *client_num* — уникальный анонимный идентификатор клиента;\n","- *target* — вероятность перехода клиента в определенный класс."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xqq63qYeWb6B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441780249,"user_tz":-180,"elapsed":14594,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"b3b67407-8767-4645-e687-c96990bbe396"},"outputs":[{"output_type":"stream","name":"stdout","text":["train shape: (8679725, 5)\n","test shape: (4828430, 5)\n"]},{"output_type":"execute_result","data":{"text/plain":["         client_num           date_time mcc_code  \\\n","3548868       26912 2024-07-14 14:04:00     7542   \n","4102549       31838 2024-09-10 18:19:00     4111   \n","76782           526 2024-08-07 11:21:00     5499   \n","\n","                                             merchant_name  amount  \n","3548868  24c3f8dbb84767b449bf3865aeffc8674b35341dd8c1e4...      50  \n","4102549  e518b599439602068ca8701adc3bf45fc399bf567d283d...      64  \n","76782    a6b6d250dfc0ce9a81685d42c8bbd354e9368696fba3b8...      90  "],"text/html":["\n","  <div id=\"df-268e6b08-9590-4e37-835e-09944d8383aa\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>client_num</th>\n","      <th>date_time</th>\n","      <th>mcc_code</th>\n","      <th>merchant_name</th>\n","      <th>amount</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3548868</th>\n","      <td>26912</td>\n","      <td>2024-07-14 14:04:00</td>\n","      <td>7542</td>\n","      <td>24c3f8dbb84767b449bf3865aeffc8674b35341dd8c1e4...</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>4102549</th>\n","      <td>31838</td>\n","      <td>2024-09-10 18:19:00</td>\n","      <td>4111</td>\n","      <td>e518b599439602068ca8701adc3bf45fc399bf567d283d...</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>76782</th>\n","      <td>526</td>\n","      <td>2024-08-07 11:21:00</td>\n","      <td>5499</td>\n","      <td>a6b6d250dfc0ce9a81685d42c8bbd354e9368696fba3b8...</td>\n","      <td>90</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-268e6b08-9590-4e37-835e-09944d8383aa')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-268e6b08-9590-4e37-835e-09944d8383aa button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-268e6b08-9590-4e37-835e-09944d8383aa');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-ce464e76-74b7-4610-af68-ee35e72d9add\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce464e76-74b7-4610-af68-ee35e72d9add')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-ce464e76-74b7-4610-af68-ee35e72d9add button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"train\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"client_num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16837,\n        \"min\": 526,\n        \"max\": 31838,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          26912,\n          31838,\n          526\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-07-14 14:04:00\",\n        \"max\": \"2024-09-10 18:19:00\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2024-07-14 14:04:00\",\n          \"2024-09-10 18:19:00\",\n          \"2024-08-07 11:21:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mcc_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"7542\",\n          \"4111\",\n          \"5499\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merchant_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"24c3f8dbb84767b449bf3865aeffc8674b35341dd8c1e491db1693e196aa8604\",\n          \"e518b599439602068ca8701adc3bf45fc399bf567d283d5cb946c7908da44846\",\n          \"a6b6d250dfc0ce9a81685d42c8bbd354e9368696fba3b8309bbb1791137ab95c\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 50,\n        \"max\": 90,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          50,\n          64,\n          90\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8},{"output_type":"display_data","data":{"text/plain":["<Figure size 2500x600 with 6 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# ИСХОДНЫЕ ДАННЫЕ\n","train = pd.read_parquet('/content/Альфа-Банк х МФТИ. Задача прогнозирования баланса клиентов. Данные по задаче/train_transactions.parquet')\n","test = pd.read_parquet('/content/Альфа-Банк х МФТИ. Задача прогнозирования баланса клиентов. Данные по задаче/test_transactions.parquet')\n","print(f'train shape: {train.shape}')\n","print(f'test shape: {test.shape}')\n","train.hist(figsize=(25, 6), layout=(-1, 6))\n","train.sample(3)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DUaIvdtq6v4X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441781199,"user_tz":-180,"elapsed":935,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"9083a41b-05f4-49e7-cee7-65cf741004eb"},"outputs":[{"output_type":"stream","name":"stdout","text":["train target shape: (70000, 2)\n","test target shape: (39143, 1)\n"]},{"output_type":"execute_result","data":{"text/plain":["       client_num  target\n","24724       61179       1\n","3799        25563       3\n","59148       33184       0"],"text/html":["\n","  <div id=\"df-1a5e31ec-9af9-4ffb-85d2-2ad59efcb49d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>client_num</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>24724</th>\n","      <td>61179</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3799</th>\n","      <td>25563</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>59148</th>\n","      <td>33184</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a5e31ec-9af9-4ffb-85d2-2ad59efcb49d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1a5e31ec-9af9-4ffb-85d2-2ad59efcb49d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1a5e31ec-9af9-4ffb-85d2-2ad59efcb49d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-621a1ee1-c1dd-4b10-a8c2-62773c7f9d10\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-621a1ee1-c1dd-4b10-a8c2-62773c7f9d10')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-621a1ee1-c1dd-4b10-a8c2-62773c7f9d10 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"train_target\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"client_num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18754,\n        \"min\": 25563,\n        \"max\": 61179,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          61179,\n          25563,\n          33184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"text/plain":["<Figure size 3000x500 with 6 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["train_target = pd.read_csv('/content/Альфа-Банк х МФТИ. Задача прогнозирования баланса клиентов. Данные по задаче/train_target.csv')\n","test_target = pd.read_csv('/content/Альфа-Банк х МФТИ. Задача прогнозирования баланса клиентов. Данные по задаче/test_target.csv')\n","\n","sample_subm = pd.read_csv('/content/Альфа-Банк х МФТИ. Задача прогнозирования баланса клиентов. Данные по задаче/sample_submission.csv')\n","\n","print(f'train target shape: {train_target.shape}')\n","print(f'test target shape: {test_target.shape}')\n","train_target.hist(figsize=(30, 5), layout=(-1, 6), bins=7)\n","train_target.sample(3)"]},{"cell_type":"markdown","metadata":{"id":"r6Aex-15Yzhf"},"source":["# Обработка данных"]},{"cell_type":"markdown","metadata":{"id":"Hw4pHNqsMLFC"},"source":["#### Сразу определим функцию для оптимизации памяти нашего датасета:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dvdJoeO6MKKg"},"outputs":[],"source":["def reduce_mem_usage(df, cat_cols=[]):\n","    \"\"\" iterate through all the columns of a dataframe and modify the data type\n","        to reduce memory usage.\n","    \"\"\"\n","    start_mem = df.memory_usage().sum() / 1024**2\n","    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n","\n","    for col in df.columns:\n","        col_type = df[col].dtype.name\n","\n","        if col_type not in ['object', 'category', 'datetime64[ns, UTC]', 'datetime64[us]']:\n","            c_min = df[col].min()\n","            c_max = df[col].max()\n","            if str(col_type)[:3] == 'int':\n","                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n","                    df[col] = df[col].astype(np.int8)\n","                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n","                    df[col] = df[col].astype(np.int16)\n","                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n","                    df[col] = df[col].astype(np.int32)\n","                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n","                    df[col] = df[col].astype(np.int64)\n","            else:\n","                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","                    df[col] = df[col].astype(np.float16)\n","                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n","                    df[col] = df[col].astype(np.float32)\n","                else:\n","                    df[col] = df[col].astype(np.float64)\n","\n","    end_mem = df.memory_usage().sum() / 1024**2\n","    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n","    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n","\n","    return df"]},{"cell_type":"markdown","metadata":{"id":"auN94wJnoGAK"},"source":["#### Обработаем временные призаки"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8trfs5lPyrJe"},"outputs":[],"source":["train['date_time'] = pd.to_datetime(train['date_time'])\n","test['date_time'] = pd.to_datetime(test['date_time'])"]},{"cell_type":"code","source":["# # оптимизируем хранение датасета по памяти\n","# train = reduce_mem_usage(train, cat_cols=['mcc_code', 'hour_of_day', 'day_of_week', 'month', 'day_of_month', 'is_last_month'])\n","# test = reduce_mem_usage(test, cat_cols=['mcc_code', 'hour_of_day', 'day_of_week', 'month', 'day_of_month', 'is_last_month'])"],"metadata":{"id":"iXZKG9X-QKTF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["gc.collect()"],"metadata":{"id":"jsAvrVBeQ7DJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441781664,"user_tz":-180,"elapsed":322,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"44a7bdb7-ba43-403e-cc4e-55df3e42a160"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["11989"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"DWm-J0h96gSE"},"source":["Проверим данные на отсутствующие значения:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kZ1va2vy3ftE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441786383,"user_tz":-180,"elapsed":4716,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"cc299cd5-71ca-4dc0-f34b-5e1ecd91f5ae"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["client_num  date_time  mcc_code  merchant_name  amount\n","False       False      False     False          False     8679725\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>client_num</th>\n","      <th>date_time</th>\n","      <th>mcc_code</th>\n","      <th>merchant_name</th>\n","      <th>amount</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>False</th>\n","      <th>False</th>\n","      <th>False</th>\n","      <th>False</th>\n","      <th>False</th>\n","      <td>8679725</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":14}],"source":["train.isna().value_counts()"]},{"cell_type":"markdown","metadata":{"id":"NuE1oCyH6l7T"},"source":["Проверим какой временной промежуток нам дан:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"07xMAbKu6KpU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441786530,"user_tz":-180,"elapsed":152,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"cff0337e-5371-4a54-e7b3-87a88950f0b2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Timedelta('92 days 00:00:00')"]},"metadata":{},"execution_count":15}],"source":["train['date_time'].max() - train['date_time'].min()"]},{"cell_type":"markdown","metadata":{"id":"59uBgzxSnNjT"},"source":["Обработаем колонку date_time и извлечем из нее временные признаки"]},{"cell_type":"markdown","metadata":{"id":"XsYo-IP-nXql"},"source":["Создадим производные временные фичи на основе имеющихся"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OMYh65M09qFK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441835418,"user_tz":-180,"elapsed":48894,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"587340d1-ba4e-4cd3-e36e-f0fef859667a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 1564.47 MB\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n"]},{"output_type":"stream","name":"stdout","text":["Memory usage after optimization is: 769.82 MB\n","Decreased by 50.8%\n","Memory usage of dataframe is 870.30 MB\n","Memory usage after optimization is: 428.24 MB\n","Decreased by 50.8%\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n","  has_large_values = (abs_vals > 1e6).any()\n"]},{"output_type":"execute_result","data":{"text/plain":["   client_num           date_time mcc_code  \\\n","0           1 2024-07-01 09:01:00     5541   \n","1           1 2024-07-01 16:57:00     5411   \n","2           1 2024-07-01 19:52:00     5200   \n","\n","                                       merchant_name  amount  hour_of_day  \\\n","0  84620a9333be55c5f41eb224fed1974200cc0983e33631...    4059            9   \n","1  4829cd530ed1ec8bc8358740c2250f63ce5a42611cfa09...     444           16   \n","2  c80805234182f4450be61e6f9605c1f16cc5c5be22a117...    5633           19   \n","\n","   day_of_week  month  day_of_month  time_diff   first_transaction  \\\n","0            0      7             1   0.000000 2024-07-01 09:01:00   \n","1            0      7             1   7.933594 2024-07-01 09:01:00   \n","2            0      7             1   2.916016 2024-07-01 09:01:00   \n","\n","     last_transaction  activity_days  is_last_month time_of_day  is_morning  \\\n","0 2024-09-30 17:55:00             91              0     morning         1.0   \n","1 2024-09-30 17:55:00             91              0   afternoon         0.0   \n","2 2024-09-30 17:55:00             91              0     evening         0.0   \n","\n","   is_afternoon  is_evening  is_night  is_weekday  is_weekend  \\\n","0           0.0         0.0       0.0           1           0   \n","1           1.0         0.0       0.0           1           0   \n","2           0.0         1.0       0.0           1           0   \n","\n","   is_beginning_of_month  is_end_of_month  days_since_first_transaction  \\\n","0                      1                0                             0   \n","1                      1                0                             0   \n","2                      1                0                             0   \n","\n","   days_until_last_transaction  time_diff_minutes  is_frequent_transaction  \\\n","0                           91                0.0                        1   \n","1                           91            11424.0                        0   \n","2                           90             4200.0                        0   \n","\n","   recent_activity weekday_hour_interaction  \\\n","0                0                      0_9   \n","1                0                     0_16   \n","2                0                     0_19   \n","\n","                        weekday_merchant_interaction  \n","0  0_84620a9333be55c5f41eb224fed1974200cc0983e336...  \n","1  0_4829cd530ed1ec8bc8358740c2250f63ce5a42611cfa...  \n","2  0_c80805234182f4450be61e6f9605c1f16cc5c5be22a1...  "],"text/html":["\n","  <div id=\"df-0c552151-0392-4429-885e-6a8da70a0134\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>client_num</th>\n","      <th>date_time</th>\n","      <th>mcc_code</th>\n","      <th>merchant_name</th>\n","      <th>amount</th>\n","      <th>hour_of_day</th>\n","      <th>day_of_week</th>\n","      <th>month</th>\n","      <th>day_of_month</th>\n","      <th>time_diff</th>\n","      <th>first_transaction</th>\n","      <th>last_transaction</th>\n","      <th>activity_days</th>\n","      <th>is_last_month</th>\n","      <th>time_of_day</th>\n","      <th>is_morning</th>\n","      <th>is_afternoon</th>\n","      <th>is_evening</th>\n","      <th>is_night</th>\n","      <th>is_weekday</th>\n","      <th>is_weekend</th>\n","      <th>is_beginning_of_month</th>\n","      <th>is_end_of_month</th>\n","      <th>days_since_first_transaction</th>\n","      <th>days_until_last_transaction</th>\n","      <th>time_diff_minutes</th>\n","      <th>is_frequent_transaction</th>\n","      <th>recent_activity</th>\n","      <th>weekday_hour_interaction</th>\n","      <th>weekday_merchant_interaction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2024-07-01 09:01:00</td>\n","      <td>5541</td>\n","      <td>84620a9333be55c5f41eb224fed1974200cc0983e33631...</td>\n","      <td>4059</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>0.000000</td>\n","      <td>2024-07-01 09:01:00</td>\n","      <td>2024-09-30 17:55:00</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>morning</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>91</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0_9</td>\n","      <td>0_84620a9333be55c5f41eb224fed1974200cc0983e336...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2024-07-01 16:57:00</td>\n","      <td>5411</td>\n","      <td>4829cd530ed1ec8bc8358740c2250f63ce5a42611cfa09...</td>\n","      <td>444</td>\n","      <td>16</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>7.933594</td>\n","      <td>2024-07-01 09:01:00</td>\n","      <td>2024-09-30 17:55:00</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>afternoon</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>91</td>\n","      <td>11424.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0_16</td>\n","      <td>0_4829cd530ed1ec8bc8358740c2250f63ce5a42611cfa...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>2024-07-01 19:52:00</td>\n","      <td>5200</td>\n","      <td>c80805234182f4450be61e6f9605c1f16cc5c5be22a117...</td>\n","      <td>5633</td>\n","      <td>19</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>2.916016</td>\n","      <td>2024-07-01 09:01:00</td>\n","      <td>2024-09-30 17:55:00</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>evening</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>90</td>\n","      <td>4200.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0_19</td>\n","      <td>0_c80805234182f4450be61e6f9605c1f16cc5c5be22a1...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c552151-0392-4429-885e-6a8da70a0134')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0c552151-0392-4429-885e-6a8da70a0134 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0c552151-0392-4429-885e-6a8da70a0134');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c509a5bc-53d8-4025-ac46-a00a56588057\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c509a5bc-53d8-4025-ac46-a00a56588057')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c509a5bc-53d8-4025-ac46-a00a56588057 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train"}},"metadata":{},"execution_count":16}],"source":["def create_derived_time_features(df):\n","\n","    df['hour_of_day'] = df['date_time'].dt.hour\n","    df['day_of_week'] = df['date_time'].dt.dayofweek  # 0=Monday, 6=Sunday\n","    df['month'] = df['date_time'].dt.month\n","    df['day_of_month'] = df['date_time'].dt.day\n","\n","    # временной интервал между транзакциями\n","    df = df.sort_values(['client_num', 'date_time']) # приоритетная сортировка\n","    df['time_diff'] = df.groupby('client_num')['date_time'].diff().dt.total_seconds() / 3600 # группируем по клиенту и вычисляем разницу по времени между транзакциями в часах\n","    df['time_diff'] = df['time_diff'].fillna(0)\n","\n","    # период активности клиента / Если клиент не совершал ни одной транзакции, то min() и max() вернут NaT, так как операции выполняются над пустым набором данных, поэтому исп. transform()\n","    df['first_transaction'] = df.groupby('client_num')['date_time'].transform('min')\n","    df['last_transaction'] = df.groupby('client_num')['date_time'].transform('max')\n","    df['activity_days'] = (df['last_transaction'] - df['first_transaction']).dt.days\n","\n","    # совершена ли покупка в последний месяц\n","    last_month_start = df['date_time'].max() - pd.Timedelta(days=30)\n","    df['is_last_month'] = (df['date_time'] >= last_month_start).astype(int)\n","\n","    # в какое время дня совершена покупка\n","    time_of_day_bins = [-1, 6, 12, 18, 24]\n","    time_of_day_labels = ['night', 'morning', 'afternoon', 'evening']\n","    df['time_of_day'] = pd.cut(df['hour_of_day'], bins=time_of_day_bins, labels=time_of_day_labels)\n","\n","    # признаки, связанные с временем дня\n","    df['is_morning'] = (df['hour_of_day'] >= 6) & (df['hour_of_day'] < 12).astype(int)\n","    df['is_afternoon'] = (df['hour_of_day'] >= 12) & (df['hour_of_day'] < 18).astype(int)\n","    df['is_evening'] = (df['hour_of_day'] >= 18) & (df['hour_of_day'] < 22).astype(int)\n","    df['is_night'] = (df['hour_of_day'] >= 22) | (df['hour_of_day'] < 6).astype(int)\n","\n","    # признаки, связанные с днем недели\n","    df['is_weekday'] = (df['day_of_week'] < 5).astype(int)  # Пн-Пт\n","    df['is_weekend'] = (df['day_of_week'] >= 5).astype(int)  # Сб-Вс\n","\n","    # признаки, связанные с месяцем\n","    df['is_beginning_of_month'] = (df['day_of_month'] <= 7).astype(int)\n","    df['is_end_of_month'] = (df['day_of_month'] >= 25).astype(int)\n","\n","    # признаки, связанные с активностью клиента\n","    df['days_since_first_transaction'] = (df['date_time'] - pd.to_datetime(df['first_transaction'])).dt.days\n","    df['days_until_last_transaction'] = (pd.to_datetime(df['last_transaction']) - df['date_time']).dt.days\n","\n","    # признаки, связанные с интервалом между транзакциями\n","    df['time_diff_minutes'] = df['time_diff'] * 24 * 60  # Преобразуем time_diff в минуты\n","    df['is_frequent_transaction'] = (df['time_diff_minutes'] <= 60).astype(int)  # Транзакция менее чем через час\n","\n","    # признаки, связанные с активностью за последние N дней\n","    df['recent_activity'] = df['activity_days'].apply(lambda x: 1 if x <= 7 else 0)  # Активность за последние 7 дней\n","\n","    # комбинированные признаки\n","    df['weekday_hour_interaction'] = df['day_of_week'].astype(str) + '_' + df['hour_of_day'].astype(str)\n","    df['weekday_merchant_interaction'] = df['day_of_week'].astype(str) + '_' + df['merchant_name'].astype(str)\n","    return df\n","\n","train = create_derived_time_features(train)\n","test = create_derived_time_features(test)\n","\n","# оптимизируем хранение датасета по памяти\n","train = reduce_mem_usage(train, cat_cols=['mcc_code', 'hour_of_day', 'day_of_week', 'month', 'day_of_month', 'time_of_day', 'time_of_day', 'is_morning', 'is_afternoon', 'is_evening', 'is_night', 'is_weekday', 'is_weekend', 'is_beginning_of_month', 'is_end_of_month'])\n","test = reduce_mem_usage(test, cat_cols=['mcc_code', 'hour_of_day', 'day_of_week', 'month', 'day_of_month', 'time_of_day', 'time_of_day', 'is_morning', 'is_afternoon', 'is_evening', 'is_night', 'is_weekday', 'is_weekend', 'is_beginning_of_month', 'is_end_of_month'])\n","\n","train.head(3)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T0lcfqTMvX8D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441842536,"user_tz":-180,"elapsed":7117,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"0e0f9972-8582-43a2-aae3-0ac63e0763a2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 968.48 MB\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n"]},{"output_type":"stream","name":"stdout","text":["Memory usage after optimization is: 860.87 MB\n","Decreased by 11.1%\n","Memory usage of dataframe is 538.76 MB\n","Memory usage after optimization is: 478.89 MB\n","Decreased by 11.1%\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n"]}],"source":["def extract_enriched_features(df):\n","\n","   # признаки, связанные с суммой транзакций\n","    df['log_amount'] = np.log1p(df['amount'])  # Логарифмическая масштабировка суммы\n","    df['is_large_transaction'] = (df['amount'] > df['amount'].median()).astype(int)  # большая транзакция\n","\n","    # признаки, связанные с MCC кодами\n","    df['mcc_category'] = df['mcc_code'].astype(str).str[:2]  # Первые 2 цифры MCC (категория)\n","\n","    return df\n","\n","# применение функции к обучающей и тестовой выборке\n","train = extract_enriched_features(train)\n","test = extract_enriched_features(test)\n","\n","train = reduce_mem_usage(train, cat_cols=['time_of_day', 'is_morning', 'is_afternoon', 'is_evening', 'is_night', 'is_weekday', 'is_weekend', 'is_beginning_of_month', 'is_end_of_month'])\n","test = reduce_mem_usage(test, cat_cols=['time_of_day', 'is_morning', 'is_afternoon', 'is_evening', 'is_night', 'is_weekday', 'is_weekend', 'is_beginning_of_month', 'is_end_of_month'])"]},{"cell_type":"code","source":["train.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h_KwG0S-mpSV","executionInfo":{"status":"ok","timestamp":1748441842610,"user_tz":-180,"elapsed":70,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"43c976fd-8735-4640-ed42-ab863a20927a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n","  has_large_values = (abs_vals > 1e6).any()\n"]},{"output_type":"execute_result","data":{"text/plain":["   client_num           date_time mcc_code  \\\n","0           1 2024-07-01 09:01:00     5541   \n","1           1 2024-07-01 16:57:00     5411   \n","2           1 2024-07-01 19:52:00     5200   \n","\n","                                       merchant_name  amount  hour_of_day  \\\n","0  84620a9333be55c5f41eb224fed1974200cc0983e33631...    4059            9   \n","1  4829cd530ed1ec8bc8358740c2250f63ce5a42611cfa09...     444           16   \n","2  c80805234182f4450be61e6f9605c1f16cc5c5be22a117...    5633           19   \n","\n","   day_of_week  month  day_of_month  time_diff   first_transaction  \\\n","0            0      7             1   0.000000 2024-07-01 09:01:00   \n","1            0      7             1   7.933594 2024-07-01 09:01:00   \n","2            0      7             1   2.916016 2024-07-01 09:01:00   \n","\n","     last_transaction  activity_days  is_last_month time_of_day  is_morning  \\\n","0 2024-09-30 17:55:00             91              0     morning         1.0   \n","1 2024-09-30 17:55:00             91              0   afternoon         0.0   \n","2 2024-09-30 17:55:00             91              0     evening         0.0   \n","\n","   is_afternoon  is_evening  is_night  is_weekday  is_weekend  \\\n","0           0.0         0.0       0.0           1           0   \n","1           1.0         0.0       0.0           1           0   \n","2           0.0         1.0       0.0           1           0   \n","\n","   is_beginning_of_month  is_end_of_month  days_since_first_transaction  \\\n","0                      1                0                             0   \n","1                      1                0                             0   \n","2                      1                0                             0   \n","\n","   days_until_last_transaction  time_diff_minutes  is_frequent_transaction  \\\n","0                           91                0.0                        1   \n","1                           91            11424.0                        0   \n","2                           90             4200.0                        0   \n","\n","   recent_activity weekday_hour_interaction  \\\n","0                0                      0_9   \n","1                0                     0_16   \n","2                0                     0_19   \n","\n","                        weekday_merchant_interaction  log_amount  \\\n","0  0_84620a9333be55c5f41eb224fed1974200cc0983e336...    8.312500   \n","1  0_4829cd530ed1ec8bc8358740c2250f63ce5a42611cfa...    6.097656   \n","2  0_c80805234182f4450be61e6f9605c1f16cc5c5be22a1...    8.632812   \n","\n","   is_large_transaction mcc_category  \n","0                     1           55  \n","1                     1           54  \n","2                     1           52  "],"text/html":["\n","  <div id=\"df-ffa89ac2-0760-4d6f-9168-7f87985428ac\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>client_num</th>\n","      <th>date_time</th>\n","      <th>mcc_code</th>\n","      <th>merchant_name</th>\n","      <th>amount</th>\n","      <th>hour_of_day</th>\n","      <th>day_of_week</th>\n","      <th>month</th>\n","      <th>day_of_month</th>\n","      <th>time_diff</th>\n","      <th>first_transaction</th>\n","      <th>last_transaction</th>\n","      <th>activity_days</th>\n","      <th>is_last_month</th>\n","      <th>time_of_day</th>\n","      <th>is_morning</th>\n","      <th>is_afternoon</th>\n","      <th>is_evening</th>\n","      <th>is_night</th>\n","      <th>is_weekday</th>\n","      <th>is_weekend</th>\n","      <th>is_beginning_of_month</th>\n","      <th>is_end_of_month</th>\n","      <th>days_since_first_transaction</th>\n","      <th>days_until_last_transaction</th>\n","      <th>time_diff_minutes</th>\n","      <th>is_frequent_transaction</th>\n","      <th>recent_activity</th>\n","      <th>weekday_hour_interaction</th>\n","      <th>weekday_merchant_interaction</th>\n","      <th>log_amount</th>\n","      <th>is_large_transaction</th>\n","      <th>mcc_category</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2024-07-01 09:01:00</td>\n","      <td>5541</td>\n","      <td>84620a9333be55c5f41eb224fed1974200cc0983e33631...</td>\n","      <td>4059</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>0.000000</td>\n","      <td>2024-07-01 09:01:00</td>\n","      <td>2024-09-30 17:55:00</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>morning</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>91</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0_9</td>\n","      <td>0_84620a9333be55c5f41eb224fed1974200cc0983e336...</td>\n","      <td>8.312500</td>\n","      <td>1</td>\n","      <td>55</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2024-07-01 16:57:00</td>\n","      <td>5411</td>\n","      <td>4829cd530ed1ec8bc8358740c2250f63ce5a42611cfa09...</td>\n","      <td>444</td>\n","      <td>16</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>7.933594</td>\n","      <td>2024-07-01 09:01:00</td>\n","      <td>2024-09-30 17:55:00</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>afternoon</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>91</td>\n","      <td>11424.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0_16</td>\n","      <td>0_4829cd530ed1ec8bc8358740c2250f63ce5a42611cfa...</td>\n","      <td>6.097656</td>\n","      <td>1</td>\n","      <td>54</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>2024-07-01 19:52:00</td>\n","      <td>5200</td>\n","      <td>c80805234182f4450be61e6f9605c1f16cc5c5be22a117...</td>\n","      <td>5633</td>\n","      <td>19</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>2.916016</td>\n","      <td>2024-07-01 09:01:00</td>\n","      <td>2024-09-30 17:55:00</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>evening</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>90</td>\n","      <td>4200.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0_19</td>\n","      <td>0_c80805234182f4450be61e6f9605c1f16cc5c5be22a1...</td>\n","      <td>8.632812</td>\n","      <td>1</td>\n","      <td>52</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ffa89ac2-0760-4d6f-9168-7f87985428ac')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ffa89ac2-0760-4d6f-9168-7f87985428ac button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ffa89ac2-0760-4d6f-9168-7f87985428ac');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-45e1d8c8-8ced-472d-b38f-d806117951c8\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45e1d8c8-8ced-472d-b38f-d806117951c8')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-45e1d8c8-8ced-472d-b38f-d806117951c8 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train"}},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"By4v1Y39Q2p7"},"source":["**Объяснение признаков:**\n","\n","**hour_of_day:**\n","- Среднее значение (avg_hour) может показать, когда клиент чаще всего совершает транзакции.\n","- Стандартное отклонение (std_hour) указывает на стабильность времени транзакций.\n","\n","**day_of_week:**\n","- Аналогично hour_of_day, но для дней недели.\n","\n","**time_diff:**\n","- Среднее время между транзакциями помогает понять, насколько часто клиент совершает операции.\n","\n","**is_last_month:**\n","- Количество транзакций за последний месяц может быть важным индикатором текущего финансового состояния клиента.\n","\n","**activity_days:**\n","- Общий период активности клиента может коррелировать с его лояльностью или категорией баланса."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7YKrJ6GIJGQF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441993664,"user_tz":-180,"elapsed":151051,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"1b593d71-d80d-4263-9c20-ee6a48576d09"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 22.36 MB\n","Memory usage after optimization is: 8.34 MB\n","Decreased by 62.7%\n","Memory usage of dataframe is 12.51 MB\n","Memory usage after optimization is: 4.67 MB\n","Decreased by 62.7%\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n","  has_large_values = (abs_vals > 1e6).any()\n"]},{"output_type":"execute_result","data":{"text/plain":["       client_num  mean_hour_of_day  std_hour_of_day  mode_hour_of_day  \\\n","34737       54000         14.687500         5.187500                 9   \n","44462       69220         11.703125         4.167969                16   \n","68538      106797         10.218750         4.066406                 9   \n","\n","       mean_day_of_week  std_day_of_week  mode_day_of_week  mean_month  \\\n","34737          3.193359         2.093750                 5    8.187500   \n","44462          2.863281         1.950195                 1    8.023438   \n","68538          3.000000         1.507812                 3    8.609375   \n","\n","       std_month  mode_month  mean_time_diff  std_time_diff  max_time_diff  \\\n","34737   0.826172           9       12.617188       17.46875        89.6250   \n","44462   0.814453           9        6.339844        8.31250        57.3125   \n","68538   0.656250           9       54.218750      107.18750       371.0000   \n","\n","       min_time_diff  transactions_in_last_month first_transaction_date  \\\n","34737            0.0                          77    2024-07-01 21:07:00   \n","44462            0.0                         119    2024-07-01 06:24:00   \n","68538            0.0                          16    2024-07-26 15:01:00   \n","\n","      last_transaction_date  activity_days mode_time_of_day  \\\n","34737   2024-09-29 19:21:00             89          morning   \n","44462   2024-09-30 16:17:00             91        afternoon   \n","68538   2024-09-16 14:19:00             51          morning   \n","\n","       count_time_of_day  sum_morning_transactions  \\\n","34737                171                      46.0   \n","44462                346                     156.0   \n","68538                 23                      13.0   \n","\n","       sum_afternoon_transactions  sum_evening_transactions  \\\n","34737                        58.0                      57.0   \n","44462                       154.0                      18.0   \n","68538                         8.0                       1.0   \n","\n","       sum_night_transactions  sum_weekday_transactions  \\\n","34737                    10.0                       111   \n","44462                    18.0                       259   \n","68538                     1.0                        20   \n","\n","       sum_weekend_transactions  sum_beginning_of_month_transactions  \\\n","34737                        60                                   42   \n","44462                        87                                   59   \n","68538                         3                                    0   \n","\n","       sum_end_of_month_transactions  mean_days_since_first_transaction  \\\n","34737                             41                           50.18750   \n","44462                             90                           47.96875   \n","68538                              4                           39.31250   \n","\n","       std_days_since_first_transaction  max_days_since_first_transaction  \\\n","34737                         26.109375                                89   \n","44462                         26.687500                                91   \n","68538                         15.468750                                51   \n","\n","       min_days_since_first_transaction  mean_days_until_last_transaction  \\\n","34737                                 0                         38.718750   \n","44462                                 0                         42.718750   \n","68538                                 0                         11.648438   \n","\n","       std_days_until_last_transaction  max_days_until_last_transaction  \\\n","34737                        26.109375                               89   \n","44462                        26.609375                               91   \n","68538                        15.500000                               51   \n","\n","       min_days_until_last_transaction  mean_time_diff_minutes  \\\n","34737                                0            18174.595703   \n","44462                                0             9130.612305   \n","68538                                0            78091.828125   \n","\n","       std_time_diff_minutes  max_time_diff_minutes  min_time_diff_minutes  \\\n","34737            25144.65625               129048.0                    0.0   \n","44462            11970.56543                82536.0                    0.0   \n","68538           154381.12500               534168.0                    0.0   \n","\n","       sum_frequent_transactions  sum_recent_activity_transactions  \\\n","34737                         11                                 0   \n","44462                         14                                 0   \n","68538                          2                                 0   \n","\n","       sum_weekday_hour_interaction  sum_weekday_merchant_interaction  \\\n","34737                           171                               171   \n","44462                           346                               346   \n","68538                            23                                23   \n","\n","       total_activity_period  day_of_week_0  day_of_week_1  day_of_week_2  \\\n","34737                     89             26             21             22   \n","44462                     91             50             57             47   \n","68538                     51              3              1              1   \n","\n","       day_of_week_3  day_of_week_4  day_of_week_5  day_of_week_6  month_7  \\\n","34737             16             26             31             29       45   \n","44462             54             51             48             39      110   \n","68538              9              6              3              0        2   \n","\n","       month_8  month_9  month_10  log_mean_time_diff  log_max_time_diff  \n","34737       49       77         0            2.611328           4.507812  \n","44462      117      119         0            1.993164           4.066406  \n","68538        5       16         0            4.011719           5.917969  "],"text/html":["\n","  <div id=\"df-2c016212-c1df-4706-854f-3d95f35d9da0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>client_num</th>\n","      <th>mean_hour_of_day</th>\n","      <th>std_hour_of_day</th>\n","      <th>mode_hour_of_day</th>\n","      <th>mean_day_of_week</th>\n","      <th>std_day_of_week</th>\n","      <th>mode_day_of_week</th>\n","      <th>mean_month</th>\n","      <th>std_month</th>\n","      <th>mode_month</th>\n","      <th>mean_time_diff</th>\n","      <th>std_time_diff</th>\n","      <th>max_time_diff</th>\n","      <th>min_time_diff</th>\n","      <th>transactions_in_last_month</th>\n","      <th>first_transaction_date</th>\n","      <th>last_transaction_date</th>\n","      <th>activity_days</th>\n","      <th>mode_time_of_day</th>\n","      <th>count_time_of_day</th>\n","      <th>sum_morning_transactions</th>\n","      <th>sum_afternoon_transactions</th>\n","      <th>sum_evening_transactions</th>\n","      <th>sum_night_transactions</th>\n","      <th>sum_weekday_transactions</th>\n","      <th>sum_weekend_transactions</th>\n","      <th>sum_beginning_of_month_transactions</th>\n","      <th>sum_end_of_month_transactions</th>\n","      <th>mean_days_since_first_transaction</th>\n","      <th>std_days_since_first_transaction</th>\n","      <th>max_days_since_first_transaction</th>\n","      <th>min_days_since_first_transaction</th>\n","      <th>mean_days_until_last_transaction</th>\n","      <th>std_days_until_last_transaction</th>\n","      <th>max_days_until_last_transaction</th>\n","      <th>min_days_until_last_transaction</th>\n","      <th>mean_time_diff_minutes</th>\n","      <th>std_time_diff_minutes</th>\n","      <th>max_time_diff_minutes</th>\n","      <th>min_time_diff_minutes</th>\n","      <th>sum_frequent_transactions</th>\n","      <th>sum_recent_activity_transactions</th>\n","      <th>sum_weekday_hour_interaction</th>\n","      <th>sum_weekday_merchant_interaction</th>\n","      <th>total_activity_period</th>\n","      <th>day_of_week_0</th>\n","      <th>day_of_week_1</th>\n","      <th>day_of_week_2</th>\n","      <th>day_of_week_3</th>\n","      <th>day_of_week_4</th>\n","      <th>day_of_week_5</th>\n","      <th>day_of_week_6</th>\n","      <th>month_7</th>\n","      <th>month_8</th>\n","      <th>month_9</th>\n","      <th>month_10</th>\n","      <th>log_mean_time_diff</th>\n","      <th>log_max_time_diff</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>34737</th>\n","      <td>54000</td>\n","      <td>14.687500</td>\n","      <td>5.187500</td>\n","      <td>9</td>\n","      <td>3.193359</td>\n","      <td>2.093750</td>\n","      <td>5</td>\n","      <td>8.187500</td>\n","      <td>0.826172</td>\n","      <td>9</td>\n","      <td>12.617188</td>\n","      <td>17.46875</td>\n","      <td>89.6250</td>\n","      <td>0.0</td>\n","      <td>77</td>\n","      <td>2024-07-01 21:07:00</td>\n","      <td>2024-09-29 19:21:00</td>\n","      <td>89</td>\n","      <td>morning</td>\n","      <td>171</td>\n","      <td>46.0</td>\n","      <td>58.0</td>\n","      <td>57.0</td>\n","      <td>10.0</td>\n","      <td>111</td>\n","      <td>60</td>\n","      <td>42</td>\n","      <td>41</td>\n","      <td>50.18750</td>\n","      <td>26.109375</td>\n","      <td>89</td>\n","      <td>0</td>\n","      <td>38.718750</td>\n","      <td>26.109375</td>\n","      <td>89</td>\n","      <td>0</td>\n","      <td>18174.595703</td>\n","      <td>25144.65625</td>\n","      <td>129048.0</td>\n","      <td>0.0</td>\n","      <td>11</td>\n","      <td>0</td>\n","      <td>171</td>\n","      <td>171</td>\n","      <td>89</td>\n","      <td>26</td>\n","      <td>21</td>\n","      <td>22</td>\n","      <td>16</td>\n","      <td>26</td>\n","      <td>31</td>\n","      <td>29</td>\n","      <td>45</td>\n","      <td>49</td>\n","      <td>77</td>\n","      <td>0</td>\n","      <td>2.611328</td>\n","      <td>4.507812</td>\n","    </tr>\n","    <tr>\n","      <th>44462</th>\n","      <td>69220</td>\n","      <td>11.703125</td>\n","      <td>4.167969</td>\n","      <td>16</td>\n","      <td>2.863281</td>\n","      <td>1.950195</td>\n","      <td>1</td>\n","      <td>8.023438</td>\n","      <td>0.814453</td>\n","      <td>9</td>\n","      <td>6.339844</td>\n","      <td>8.31250</td>\n","      <td>57.3125</td>\n","      <td>0.0</td>\n","      <td>119</td>\n","      <td>2024-07-01 06:24:00</td>\n","      <td>2024-09-30 16:17:00</td>\n","      <td>91</td>\n","      <td>afternoon</td>\n","      <td>346</td>\n","      <td>156.0</td>\n","      <td>154.0</td>\n","      <td>18.0</td>\n","      <td>18.0</td>\n","      <td>259</td>\n","      <td>87</td>\n","      <td>59</td>\n","      <td>90</td>\n","      <td>47.96875</td>\n","      <td>26.687500</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>42.718750</td>\n","      <td>26.609375</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>9130.612305</td>\n","      <td>11970.56543</td>\n","      <td>82536.0</td>\n","      <td>0.0</td>\n","      <td>14</td>\n","      <td>0</td>\n","      <td>346</td>\n","      <td>346</td>\n","      <td>91</td>\n","      <td>50</td>\n","      <td>57</td>\n","      <td>47</td>\n","      <td>54</td>\n","      <td>51</td>\n","      <td>48</td>\n","      <td>39</td>\n","      <td>110</td>\n","      <td>117</td>\n","      <td>119</td>\n","      <td>0</td>\n","      <td>1.993164</td>\n","      <td>4.066406</td>\n","    </tr>\n","    <tr>\n","      <th>68538</th>\n","      <td>106797</td>\n","      <td>10.218750</td>\n","      <td>4.066406</td>\n","      <td>9</td>\n","      <td>3.000000</td>\n","      <td>1.507812</td>\n","      <td>3</td>\n","      <td>8.609375</td>\n","      <td>0.656250</td>\n","      <td>9</td>\n","      <td>54.218750</td>\n","      <td>107.18750</td>\n","      <td>371.0000</td>\n","      <td>0.0</td>\n","      <td>16</td>\n","      <td>2024-07-26 15:01:00</td>\n","      <td>2024-09-16 14:19:00</td>\n","      <td>51</td>\n","      <td>morning</td>\n","      <td>23</td>\n","      <td>13.0</td>\n","      <td>8.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>20</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>39.31250</td>\n","      <td>15.468750</td>\n","      <td>51</td>\n","      <td>0</td>\n","      <td>11.648438</td>\n","      <td>15.500000</td>\n","      <td>51</td>\n","      <td>0</td>\n","      <td>78091.828125</td>\n","      <td>154381.12500</td>\n","      <td>534168.0</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>51</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>16</td>\n","      <td>0</td>\n","      <td>4.011719</td>\n","      <td>5.917969</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c016212-c1df-4706-854f-3d95f35d9da0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2c016212-c1df-4706-854f-3d95f35d9da0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2c016212-c1df-4706-854f-3d95f35d9da0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-1daec95d-1a04-4500-b67f-22b25bd69694\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1daec95d-1a04-4500-b67f-22b25bd69694')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-1daec95d-1a04-4500-b67f-22b25bd69694 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":19}],"source":["def create_aggregated_time_features(df):\n","    \"\"\"\n","    Создаем аггрегированные данные на основе переменной client_num\n","    \"\"\"\n","    agg_features = df.groupby('client_num').agg({\n","        'hour_of_day': ['mean', 'std', lambda x: x.mode()[0] if not x.mode().empty else -1],  # среднее, std и мода часа\n","        'day_of_week': ['mean', 'std', lambda x: x.mode()[0] if not x.mode().empty else -1],  # среднее, std и мода дня недели\n","        'month': ['mean', 'std', lambda x: x.mode()[0] if not x.mode().empty else -1],        # среднее, std и мода месяца\n","        'time_diff': ['mean', 'std', 'max', 'min'],                                           # интервалы между транзакциями\n","        'is_last_month': 'sum',                                                               # количество транзакций в последнем месяце\n","        'date_time': ['min', 'max'],                                                          # первая и последняя транзакции\n","        'activity_days': 'max',                                                               # макс. кол-во активных дней\n","        'time_of_day': [lambda x: x.mode()[0] if not x.mode().empty else -1, 'count'],        # самое частое время покупок у клиента\n","        'is_morning': 'sum',                                                                  # количество транзакций утром\n","        'is_afternoon': 'sum',                                                                # количество транзакций днем\n","        'is_evening': 'sum',                                                                  # количество транзакций вечером\n","        'is_night': 'sum',                                                                    # количество транзакций ночью\n","        'is_weekday': 'sum',                                                                  # количество транзакций в рабочие дни\n","        'is_weekend': 'sum',                                                                  # количество транзакций в выходные\n","        'is_beginning_of_month': 'sum',                                                       # количество транзакций в начале месяца\n","        'is_end_of_month': 'sum',                                                             # количество транзакций в конце месяца\n","        'days_since_first_transaction': ['mean', 'std', 'max', 'min'],                        # интервалы между первой и последней транзакцией\n","        'days_until_last_transaction': ['mean', 'std', 'max', 'min'],                         # интервалы между первой и последней транзакцией\n","        'time_diff_minutes': ['mean', 'std', 'max', 'min'],                                   # интервалы между транзакциями в минутах\n","        'is_frequent_transaction': 'sum',                                                     # количество транзакций менее чем через час\n","        'recent_activity': 'sum',                                                             # количество активных дней за последние 7 дней\n","        'weekday_hour_interaction': 'count',                                                  # количество уникальных пар день-час\n","        'weekday_merchant_interaction': 'count',                                              # количество уникальных пар день-магазин\n","    }).reset_index()\n","\n","    agg_features.columns = [\n","        'client_num',\n","        'mean_hour_of_day',\n","        'std_hour_of_day',\n","        'mode_hour_of_day',\n","        'mean_day_of_week',\n","        'std_day_of_week',\n","        'mode_day_of_week',\n","        'mean_month',\n","        'std_month',\n","        'mode_month',\n","        'mean_time_diff',\n","        'std_time_diff',\n","        'max_time_diff',\n","        'min_time_diff',\n","        'transactions_in_last_month',\n","        'first_transaction_date',\n","        'last_transaction_date',\n","        'activity_days',\n","        'mode_time_of_day',\n","        'count_time_of_day',\n","        'sum_morning_transactions',\n","        'sum_afternoon_transactions',\n","        'sum_evening_transactions',\n","        'sum_night_transactions',\n","        'sum_weekday_transactions',\n","        'sum_weekend_transactions',\n","        'sum_beginning_of_month_transactions',\n","        'sum_end_of_month_transactions',\n","        'mean_days_since_first_transaction',\n","        'std_days_since_first_transaction',\n","        'max_days_since_first_transaction',\n","        'min_days_since_first_transaction',\n","        'mean_days_until_last_transaction',\n","        'std_days_until_last_transaction',\n","        'max_days_until_last_transaction',\n","        'min_days_until_last_transaction',\n","        'mean_time_diff_minutes',\n","        'std_time_diff_minutes',\n","        'max_time_diff_minutes',\n","        'min_time_diff_minutes',\n","        'sum_frequent_transactions',\n","        'sum_recent_activity_transactions',\n","        'sum_weekday_hour_interaction',\n","        'sum_weekday_merchant_interaction',\n","    ]\n","\n","    # общая активность: разница между первой и последней транзакцией\n","    agg_features['total_activity_period'] = (\n","        pd.to_datetime(agg_features['last_transaction_date']) -\n","        pd.to_datetime(agg_features['first_transaction_date'])\n","    ).dt.days\n","\n","    # активность по дням недели\n","    day_of_week_frequency = df.groupby(['client_num', 'day_of_week']).size().unstack(fill_value=0)\n","    day_of_week_frequency.columns = [f'day_of_week_{col}' for col in day_of_week_frequency.columns]\n","    agg_features = agg_features.merge(day_of_week_frequency, on='client_num', how='left')\n","\n","    # активность по месяцам\n","    month_frequency = df.groupby(['client_num', 'month']).size().unstack(fill_value=0)\n","    month_frequency.columns = [f'month_{col}' for col in month_frequency.columns]\n","    agg_features = agg_features.merge(month_frequency, on='client_num', how='left')\n","\n","    # логарифмическое преобразование интервалов времени\n","    agg_features['log_mean_time_diff'] = np.log1p(agg_features['mean_time_diff'])\n","    agg_features['log_max_time_diff'] = np.log1p(agg_features['max_time_diff'])\n","\n","    return agg_features\n","\n","agg_dt_train = create_aggregated_time_features(train)\n","agg_dt_test = create_aggregated_time_features(test)\n","\n","agg_dt_train = reduce_mem_usage(agg_dt_train, cat_cols=['mode_hour_of_day', 'mode_day_of_week', 'mode_month', 'mode_time_of_day'])\n","agg_dt_test = reduce_mem_usage(agg_dt_test, cat_cols=['mode_hour_of_day', 'mode_day_of_week', 'mode_month', 'mode_time_of_day'])\n","\n","agg_dt_train.sample(3)"]},{"cell_type":"markdown","metadata":{"id":"Ul4Cdqhln7xn"},"source":["#### Обработаем транзакционные признаки"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHajll-pn62r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442038506,"user_tz":-180,"elapsed":44813,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"a1a78dca-a88f-4a70-f590-507a56d3be42"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 8.81 MB\n","Memory usage after optimization is: 5.01 MB\n","Decreased by 43.2%\n","Memory usage of dataframe is 4.93 MB\n","Memory usage after optimization is: 2.80 MB\n","Decreased by 43.2%\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n","  has_large_values = (abs_vals > 1e6).any()\n"]},{"output_type":"execute_result","data":{"text/plain":["   client_num  mean_transaction_amount  std_transaction_amount  \\\n","0           1              3599.491699            11704.843750   \n","1           2              1147.026611             2629.177979   \n","2           3             11032.823242            86498.562500   \n","\n","   max_transaction_amount  min_transaction_amount  total_transaction_amount  \\\n","0                  100000                       6                    863878   \n","1                   24496                      23                    344108   \n","2                 1000000                       1                   1621825   \n","\n","   transaction_count  unique_mcc_count  unique_merchant_count  \\\n","0                240                29                    106   \n","1                300                33                     82   \n","2                147                21                     47   \n","\n","                              most_frequent_merchant  \\\n","0  75a6b4ffeddb6a54190f625331727aeb9721d5054e5bb6...   \n","1  bb00bf625289b958a2300c1095daa35ada4068ec3b2a23...   \n","2  78e50ab279e7baec28fa10c0cda20b08570beb5c383958...   \n","\n","   log_mean_transaction_amount  log_std_transaction_amount  \\\n","0                     6.699219                    1.534180   \n","1                     6.109375                    1.267578   \n","2                     6.410156                    1.771484   \n","\n","   log_max_transaction_amount  log_min_transaction_amount  \\\n","0                   11.515625                    1.946289   \n","1                   10.109375                    3.177734   \n","2                   13.812500                    0.693359   \n","\n","   large_transaction_count most_frequent_mcc_by_frequency  \\\n","0                      187                           5411   \n","1                      181                           5411   \n","2                       89                           5411   \n","\n","                 most_frequent_merchant_by_frequency  \\\n","0  75a6b4ffeddb6a54190f625331727aeb9721d5054e5bb6...   \n","1  bb00bf625289b958a2300c1095daa35ada4068ec3b2a23...   \n","2  78e50ab279e7baec28fa10c0cda20b08570beb5c383958...   \n","\n","   log_total_transaction_amount  amount_range  mean_vs_min_ratio  \\\n","0                     13.671875         99994         599.915161   \n","1                     12.750000         24473          49.870724   \n","2                     14.296875        999999       11032.812500   \n","\n","   mean_vs_max_ratio  \n","0           0.035980  \n","1           0.046814  \n","2           0.011032  "],"text/html":["\n","  <div id=\"df-1e50254f-7096-4664-b818-2a7c5968450c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>client_num</th>\n","      <th>mean_transaction_amount</th>\n","      <th>std_transaction_amount</th>\n","      <th>max_transaction_amount</th>\n","      <th>min_transaction_amount</th>\n","      <th>total_transaction_amount</th>\n","      <th>transaction_count</th>\n","      <th>unique_mcc_count</th>\n","      <th>unique_merchant_count</th>\n","      <th>most_frequent_merchant</th>\n","      <th>log_mean_transaction_amount</th>\n","      <th>log_std_transaction_amount</th>\n","      <th>log_max_transaction_amount</th>\n","      <th>log_min_transaction_amount</th>\n","      <th>large_transaction_count</th>\n","      <th>most_frequent_mcc_by_frequency</th>\n","      <th>most_frequent_merchant_by_frequency</th>\n","      <th>log_total_transaction_amount</th>\n","      <th>amount_range</th>\n","      <th>mean_vs_min_ratio</th>\n","      <th>mean_vs_max_ratio</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>3599.491699</td>\n","      <td>11704.843750</td>\n","      <td>100000</td>\n","      <td>6</td>\n","      <td>863878</td>\n","      <td>240</td>\n","      <td>29</td>\n","      <td>106</td>\n","      <td>75a6b4ffeddb6a54190f625331727aeb9721d5054e5bb6...</td>\n","      <td>6.699219</td>\n","      <td>1.534180</td>\n","      <td>11.515625</td>\n","      <td>1.946289</td>\n","      <td>187</td>\n","      <td>5411</td>\n","      <td>75a6b4ffeddb6a54190f625331727aeb9721d5054e5bb6...</td>\n","      <td>13.671875</td>\n","      <td>99994</td>\n","      <td>599.915161</td>\n","      <td>0.035980</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1147.026611</td>\n","      <td>2629.177979</td>\n","      <td>24496</td>\n","      <td>23</td>\n","      <td>344108</td>\n","      <td>300</td>\n","      <td>33</td>\n","      <td>82</td>\n","      <td>bb00bf625289b958a2300c1095daa35ada4068ec3b2a23...</td>\n","      <td>6.109375</td>\n","      <td>1.267578</td>\n","      <td>10.109375</td>\n","      <td>3.177734</td>\n","      <td>181</td>\n","      <td>5411</td>\n","      <td>bb00bf625289b958a2300c1095daa35ada4068ec3b2a23...</td>\n","      <td>12.750000</td>\n","      <td>24473</td>\n","      <td>49.870724</td>\n","      <td>0.046814</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>11032.823242</td>\n","      <td>86498.562500</td>\n","      <td>1000000</td>\n","      <td>1</td>\n","      <td>1621825</td>\n","      <td>147</td>\n","      <td>21</td>\n","      <td>47</td>\n","      <td>78e50ab279e7baec28fa10c0cda20b08570beb5c383958...</td>\n","      <td>6.410156</td>\n","      <td>1.771484</td>\n","      <td>13.812500</td>\n","      <td>0.693359</td>\n","      <td>89</td>\n","      <td>5411</td>\n","      <td>78e50ab279e7baec28fa10c0cda20b08570beb5c383958...</td>\n","      <td>14.296875</td>\n","      <td>999999</td>\n","      <td>11032.812500</td>\n","      <td>0.011032</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e50254f-7096-4664-b818-2a7c5968450c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1e50254f-7096-4664-b818-2a7c5968450c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1e50254f-7096-4664-b818-2a7c5968450c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-2f2c214f-166b-405c-a691-0df1eab13614\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f2c214f-166b-405c-a691-0df1eab13614')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-2f2c214f-166b-405c-a691-0df1eab13614 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"agg_client_train"}},"metadata":{},"execution_count":21}],"source":["def create_aggregated_client_features(df):\n","    \"\"\"\n","    Создадим агрегированные признаки для клиентов на основе транзакций.\n","\n","    \"\"\"\n","    # базовые статистические метрики\n","    agg_features = df.groupby('client_num').agg({\n","        'amount': ['mean', 'std', 'max', 'min', 'sum', 'count'],            # статистика по суммам транзакций\n","        'mcc_code': ['nunique'],                                            # уникальные MCC\n","        'merchant_name': ['nunique', lambda x: x.value_counts().index[0]],  # уникальные продавцы и самый частый продавец\n","        'log_amount': ['mean', 'std', 'max', 'min'],                        # статистика по логарифмической сумме транзаций\n","        'is_large_transaction': ['sum'],                                    # количество транзакций больше медианной покупки в рублях?\n","    }).reset_index()\n","\n","    # переименование столбцов\n","    agg_features.columns = [\n","        'client_num',\n","        'mean_transaction_amount',\n","        'std_transaction_amount',\n","        'max_transaction_amount',\n","        'min_transaction_amount',\n","        'total_transaction_amount',\n","        'transaction_count',\n","        'unique_mcc_count',\n","        'unique_merchant_count',\n","        'most_frequent_merchant',\n","        'log_mean_transaction_amount',\n","        'log_std_transaction_amount',\n","        'log_max_transaction_amount',\n","        'log_min_transaction_amount',\n","        'large_transaction_count',\n","    ]\n","\n","    # частотные характеристики MCC и merchant_name\n","    mcc_frequency = df.groupby(['client_num', 'mcc_code']).size().reset_index(name='mcc_frequency')\n","    most_frequent_mcc = mcc_frequency.loc[mcc_frequency.groupby('client_num')['mcc_frequency'].idxmax()][['client_num', 'mcc_code']]\n","    most_frequent_mcc.columns = ['client_num', 'most_frequent_mcc_by_frequency']\n","    agg_features = agg_features.merge(most_frequent_mcc, on='client_num', how='left')\n","\n","    merchant_frequency = df.groupby(['client_num', 'merchant_name']).size().reset_index(name='merchant_frequency')\n","    most_frequent_merchant = merchant_frequency.loc[merchant_frequency.groupby('client_num')['merchant_frequency'].idxmax()][['client_num', 'merchant_name']]\n","    most_frequent_merchant.columns = ['client_num', 'most_frequent_merchant_by_frequency']\n","    agg_features = agg_features.merge(most_frequent_merchant, on='client_num', how='left')\n","\n","    # логарифмическое преобразование сумм транзакций\n","    agg_features['log_total_transaction_amount'] = np.log1p(agg_features['total_transaction_amount'])\n","\n","    # дополнительные статистические метрики\n","    agg_features['amount_range'] = agg_features['max_transaction_amount'] - agg_features['min_transaction_amount']\n","    agg_features['mean_vs_min_ratio'] = agg_features['mean_transaction_amount'] / (agg_features['min_transaction_amount'] + 1e-6)\n","    agg_features['mean_vs_max_ratio'] = agg_features['mean_transaction_amount'] / (agg_features['max_transaction_amount'] + 1e-6)\n","\n","    return agg_features\n","\n","agg_client_train = create_aggregated_client_features(train)\n","agg_client_test = create_aggregated_client_features(test)\n","\n","agg_client_train = reduce_mem_usage(agg_client_train, cat_cols=[])\n","agg_client_test = reduce_mem_usage(agg_client_test, cat_cols=[])\n","\n","agg_client_train.head(3)"]},{"cell_type":"markdown","source":["Создадим фичи на основе mcc-кодов"],"metadata":{"id":"LxlnHwSv3my5"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"m9We-BrB4NAF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442057026,"user_tz":-180,"elapsed":18542,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"a990c02b-bf1a-4d5c-eba2-9e849356f80d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 43.53 MB\n","Memory usage after optimization is: 23.70 MB\n","Decreased by 45.6%\n","Memory usage of dataframe is 24.34 MB\n","Memory usage after optimization is: 13.25 MB\n","Decreased by 45.6%\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n","  has_large_values = (abs_vals > 1e6).any()\n"]},{"output_type":"execute_result","data":{"text/plain":["            mcc_amount_3990  mcc_amount_4111  mcc_amount_4121  \\\n","client_num                                                      \n","1                         0                0            19211   \n","2                         0                0             2756   \n","3                         0                0             2167   \n","\n","            mcc_amount_4131  mcc_amount_5200  mcc_amount_5300  \\\n","client_num                                                      \n","1                         0            14582                0   \n","2                        79                0                0   \n","3                         0                0                0   \n","\n","            mcc_amount_5331  mcc_amount_5411  mcc_amount_5499  \\\n","client_num                                                      \n","1                      1172           116813            21519   \n","2                       541           118661             7902   \n","3                         0            65466              576   \n","\n","            mcc_amount_5541  mcc_amount_5812  mcc_amount_5814  \\\n","client_num                                                      \n","1                     52045                0            12016   \n","2                      1000             6895             6226   \n","3                     10000             3200             7441   \n","\n","            mcc_amount_5912  mcc_amount_5921  mcc_amount_6011  \\\n","client_num                                                      \n","1                      8006             3182           472000   \n","2                      1548             6396            18200   \n","3                      6250               39          1440000   \n","\n","            mcc_amount_6536  mcc_amount_6538  mcc_amount_other  \\\n","client_num                                                       \n","1                         0            36900            106432   \n","2                         0                0            173904   \n","3                         0                0             86686   \n","\n","            mcc_frequency_3990  mcc_frequency_4111  mcc_frequency_4121  \\\n","client_num                                                               \n","1                            0                   0                  42   \n","2                            0                   0                   4   \n","3                            0                   0                   8   \n","\n","            mcc_frequency_4131  mcc_frequency_5200  mcc_frequency_5300  \\\n","client_num                                                               \n","1                            0                   6                   0   \n","2                            3                   0                   0   \n","3                            0                   0                   0   \n","\n","            mcc_frequency_5331  mcc_frequency_5411  mcc_frequency_5499  \\\n","client_num                                                               \n","1                            4                  67                  10   \n","2                            3                 168                  13   \n","3                            0                  47                   1   \n","\n","            mcc_frequency_5541  mcc_frequency_5812  mcc_frequency_5814  \\\n","client_num                                                               \n","1                           24                   0                  26   \n","2                            1                   5                  16   \n","3                            5                   2                  24   \n","\n","            mcc_frequency_5912  mcc_frequency_5921  mcc_frequency_6011  \\\n","client_num                                                               \n","1                            6                   6                  11   \n","2                            5                  26                   2   \n","3                            4                   1                   3   \n","\n","            mcc_frequency_6536  mcc_frequency_6538  mcc_frequency_other  \\\n","client_num                                                                \n","1                            0                   7                   31   \n","2                            0                   0                   54   \n","3                            0                   0                   52   \n","\n","            mcc_mean_amount_3990  mcc_mean_amount_4111  mcc_mean_amount_4121  \\\n","client_num                                                                     \n","1                            0.0                   0.0                 457.5   \n","2                            0.0                   0.0                 689.0   \n","3                            0.0                   0.0                 271.0   \n","\n","            mcc_mean_amount_4131  mcc_mean_amount_5200  mcc_mean_amount_5300  \\\n","client_num                                                                     \n","1                       0.000000           2430.333252                   0.0   \n","2                      26.328125              0.000000                   0.0   \n","3                       0.000000              0.000000                   0.0   \n","\n","            mcc_mean_amount_5331  mcc_mean_amount_5411  mcc_mean_amount_5499  \\\n","client_num                                                                     \n","1                     293.000000           1743.477661           2151.899902   \n","2                     180.333328            706.315491            607.846130   \n","3                       0.000000           1392.893677            576.000000   \n","\n","            mcc_mean_amount_5541  mcc_mean_amount_5812  mcc_mean_amount_5814  \\\n","client_num                                                                     \n","1                         2168.0                   0.0            462.153839   \n","2                         1000.0                1379.0            389.125000   \n","3                         2000.0                1600.0            310.041656   \n","\n","            mcc_mean_amount_5912  mcc_mean_amount_5921  mcc_mean_amount_6011  \\\n","client_num                                                                     \n","1                    1334.333374            530.333313          42909.089844   \n","2                     309.600006            246.000000           9100.000000   \n","3                    1562.500000             39.000000         480000.000000   \n","\n","            mcc_mean_amount_6536  mcc_mean_amount_6538  mcc_mean_amount_other  \\\n","client_num                                                                      \n","1                            0.0           5271.428711            3433.290283   \n","2                            0.0              0.000000            3220.444336   \n","3                            0.0              0.000000            1667.038452   \n","\n","            mcc_max_amount_3990  mcc_max_amount_4111  mcc_max_amount_4121  \\\n","client_num                                                                  \n","1                             0                    0                 1059   \n","2                             0                    0                 1404   \n","3                             0                    0                  380   \n","\n","            mcc_max_amount_4131  mcc_max_amount_5200  mcc_max_amount_5300  \\\n","client_num                                                                  \n","1                             0                 5633                    0   \n","2                            33                    0                    0   \n","3                             0                    0                    0   \n","\n","            mcc_max_amount_5331  mcc_max_amount_5411  mcc_max_amount_5499  \\\n","client_num                                                                  \n","1                           676                22301                 9680   \n","2                           298                 6305                 1135   \n","3                             0                 3443                  576   \n","\n","            mcc_max_amount_5541  mcc_max_amount_5812  mcc_max_amount_5814  \\\n","client_num                                                                  \n","1                          4277                    0                 1583   \n","2                          1000                 3060                 2310   \n","3                          2000                 3130                  653   \n","\n","            mcc_max_amount_5912  mcc_max_amount_5921  mcc_max_amount_6011  \\\n","client_num                                                                  \n","1                          3380                 1360               100000   \n","2                           611                 1403                15000   \n","3                          3586                   39              1000000   \n","\n","            mcc_max_amount_6536  mcc_max_amount_6538  mcc_max_amount_other  \\\n","client_num                                                                   \n","1                             0                11000                 30453   \n","2                             0                    0                 24496   \n","3                             0                    0                 13000   \n","\n","            mcc_min_amount_3990  mcc_min_amount_4111  mcc_min_amount_4121  \\\n","client_num                                                                  \n","1                             0                    0                    6   \n","2                             0                    0                  158   \n","3                             0                    0                    1   \n","\n","            mcc_min_amount_4131  mcc_min_amount_5200  mcc_min_amount_5300  \\\n","client_num                                                                  \n","1                             0                   83                    0   \n","2                            23                    0                    0   \n","3                             0                    0                    0   \n","\n","            mcc_min_amount_5331  mcc_min_amount_5411  mcc_min_amount_5499  \\\n","client_num                                                                  \n","1                            95                  110                  454   \n","2                            69                   40                  111   \n","3                             0                    2                  576   \n","\n","            mcc_min_amount_5541  mcc_min_amount_5812  mcc_min_amount_5814  \\\n","client_num                                                                  \n","1                            55                    0                   48   \n","2                          1000                  380                   57   \n","3                          2000                   70                   99   \n","\n","            mcc_min_amount_5912  mcc_min_amount_5921  mcc_min_amount_6011  \\\n","client_num                                                                  \n","1                            27                   40                 5000   \n","2                            46                   30                 3200   \n","3                           419                   39               140000   \n","\n","            mcc_min_amount_6536  mcc_min_amount_6538  mcc_min_amount_other  \\\n","client_num                                                                   \n","1                             0                  500                   100   \n","2                             0                    0                    32   \n","3                             0                    0                   200   \n","\n","            log_mcc_amount_3990  log_mcc_amount_4111  log_mcc_amount_4121  \\\n","client_num                                                                  \n","1                           0.0                  0.0             9.867188   \n","2                           0.0                  0.0             7.921875   \n","3                           0.0                  0.0             7.679688   \n","\n","            log_mcc_amount_4131  log_mcc_amount_5200  log_mcc_amount_5300  \\\n","client_num                                                                  \n","1                      0.000000             9.585938                  0.0   \n","2                      4.382812             0.000000                  0.0   \n","3                      0.000000             0.000000                  0.0   \n","\n","            log_mcc_amount_5331  log_mcc_amount_5411  log_mcc_amount_5499  \\\n","client_num                                                                  \n","1                      7.066406            11.671875             9.976562   \n","2                      6.296875            11.687500             8.976562   \n","3                      0.000000            11.085938             6.359375   \n","\n","            log_mcc_amount_5541  log_mcc_amount_5812  log_mcc_amount_5814  \\\n","client_num                                                                  \n","1                     10.859375             0.000000             9.390625   \n","2                      6.910156             8.835938             8.734375   \n","3                      9.210938             8.070312             8.914062   \n","\n","            log_mcc_amount_5912  log_mcc_amount_5921  log_mcc_amount_6011  \\\n","client_num                                                                  \n","1                      8.984375             8.062500            13.062500   \n","2                      7.343750             8.765625             9.812500   \n","3                      8.742188             3.689453            14.179688   \n","\n","            log_mcc_amount_6536  log_mcc_amount_6538  log_mcc_amount_other  \n","client_num                                                                  \n","1                           0.0            10.515625             11.578125  \n","2                           0.0             0.000000             12.062500  \n","3                           0.0             0.000000             11.367188  "],"text/html":["\n","  <div id=\"df-03f3a8ba-b370-4317-ae1e-0869a52582a9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mcc_amount_3990</th>\n","      <th>mcc_amount_4111</th>\n","      <th>mcc_amount_4121</th>\n","      <th>mcc_amount_4131</th>\n","      <th>mcc_amount_5200</th>\n","      <th>mcc_amount_5300</th>\n","      <th>mcc_amount_5331</th>\n","      <th>mcc_amount_5411</th>\n","      <th>mcc_amount_5499</th>\n","      <th>mcc_amount_5541</th>\n","      <th>mcc_amount_5812</th>\n","      <th>mcc_amount_5814</th>\n","      <th>mcc_amount_5912</th>\n","      <th>mcc_amount_5921</th>\n","      <th>mcc_amount_6011</th>\n","      <th>mcc_amount_6536</th>\n","      <th>mcc_amount_6538</th>\n","      <th>mcc_amount_other</th>\n","      <th>mcc_frequency_3990</th>\n","      <th>mcc_frequency_4111</th>\n","      <th>mcc_frequency_4121</th>\n","      <th>mcc_frequency_4131</th>\n","      <th>mcc_frequency_5200</th>\n","      <th>mcc_frequency_5300</th>\n","      <th>mcc_frequency_5331</th>\n","      <th>mcc_frequency_5411</th>\n","      <th>mcc_frequency_5499</th>\n","      <th>mcc_frequency_5541</th>\n","      <th>mcc_frequency_5812</th>\n","      <th>mcc_frequency_5814</th>\n","      <th>mcc_frequency_5912</th>\n","      <th>mcc_frequency_5921</th>\n","      <th>mcc_frequency_6011</th>\n","      <th>mcc_frequency_6536</th>\n","      <th>mcc_frequency_6538</th>\n","      <th>mcc_frequency_other</th>\n","      <th>mcc_mean_amount_3990</th>\n","      <th>mcc_mean_amount_4111</th>\n","      <th>mcc_mean_amount_4121</th>\n","      <th>mcc_mean_amount_4131</th>\n","      <th>mcc_mean_amount_5200</th>\n","      <th>mcc_mean_amount_5300</th>\n","      <th>mcc_mean_amount_5331</th>\n","      <th>mcc_mean_amount_5411</th>\n","      <th>mcc_mean_amount_5499</th>\n","      <th>mcc_mean_amount_5541</th>\n","      <th>mcc_mean_amount_5812</th>\n","      <th>mcc_mean_amount_5814</th>\n","      <th>mcc_mean_amount_5912</th>\n","      <th>mcc_mean_amount_5921</th>\n","      <th>mcc_mean_amount_6011</th>\n","      <th>mcc_mean_amount_6536</th>\n","      <th>mcc_mean_amount_6538</th>\n","      <th>mcc_mean_amount_other</th>\n","      <th>mcc_max_amount_3990</th>\n","      <th>mcc_max_amount_4111</th>\n","      <th>mcc_max_amount_4121</th>\n","      <th>mcc_max_amount_4131</th>\n","      <th>mcc_max_amount_5200</th>\n","      <th>mcc_max_amount_5300</th>\n","      <th>mcc_max_amount_5331</th>\n","      <th>mcc_max_amount_5411</th>\n","      <th>mcc_max_amount_5499</th>\n","      <th>mcc_max_amount_5541</th>\n","      <th>mcc_max_amount_5812</th>\n","      <th>mcc_max_amount_5814</th>\n","      <th>mcc_max_amount_5912</th>\n","      <th>mcc_max_amount_5921</th>\n","      <th>mcc_max_amount_6011</th>\n","      <th>mcc_max_amount_6536</th>\n","      <th>mcc_max_amount_6538</th>\n","      <th>mcc_max_amount_other</th>\n","      <th>mcc_min_amount_3990</th>\n","      <th>mcc_min_amount_4111</th>\n","      <th>mcc_min_amount_4121</th>\n","      <th>mcc_min_amount_4131</th>\n","      <th>mcc_min_amount_5200</th>\n","      <th>mcc_min_amount_5300</th>\n","      <th>mcc_min_amount_5331</th>\n","      <th>mcc_min_amount_5411</th>\n","      <th>mcc_min_amount_5499</th>\n","      <th>mcc_min_amount_5541</th>\n","      <th>mcc_min_amount_5812</th>\n","      <th>mcc_min_amount_5814</th>\n","      <th>mcc_min_amount_5912</th>\n","      <th>mcc_min_amount_5921</th>\n","      <th>mcc_min_amount_6011</th>\n","      <th>mcc_min_amount_6536</th>\n","      <th>mcc_min_amount_6538</th>\n","      <th>mcc_min_amount_other</th>\n","      <th>log_mcc_amount_3990</th>\n","      <th>log_mcc_amount_4111</th>\n","      <th>log_mcc_amount_4121</th>\n","      <th>log_mcc_amount_4131</th>\n","      <th>log_mcc_amount_5200</th>\n","      <th>log_mcc_amount_5300</th>\n","      <th>log_mcc_amount_5331</th>\n","      <th>log_mcc_amount_5411</th>\n","      <th>log_mcc_amount_5499</th>\n","      <th>log_mcc_amount_5541</th>\n","      <th>log_mcc_amount_5812</th>\n","      <th>log_mcc_amount_5814</th>\n","      <th>log_mcc_amount_5912</th>\n","      <th>log_mcc_amount_5921</th>\n","      <th>log_mcc_amount_6011</th>\n","      <th>log_mcc_amount_6536</th>\n","      <th>log_mcc_amount_6538</th>\n","      <th>log_mcc_amount_other</th>\n","    </tr>\n","    <tr>\n","      <th>client_num</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>19211</td>\n","      <td>0</td>\n","      <td>14582</td>\n","      <td>0</td>\n","      <td>1172</td>\n","      <td>116813</td>\n","      <td>21519</td>\n","      <td>52045</td>\n","      <td>0</td>\n","      <td>12016</td>\n","      <td>8006</td>\n","      <td>3182</td>\n","      <td>472000</td>\n","      <td>0</td>\n","      <td>36900</td>\n","      <td>106432</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>42</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>67</td>\n","      <td>10</td>\n","      <td>24</td>\n","      <td>0</td>\n","      <td>26</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>11</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>31</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>457.5</td>\n","      <td>0.000000</td>\n","      <td>2430.333252</td>\n","      <td>0.0</td>\n","      <td>293.000000</td>\n","      <td>1743.477661</td>\n","      <td>2151.899902</td>\n","      <td>2168.0</td>\n","      <td>0.0</td>\n","      <td>462.153839</td>\n","      <td>1334.333374</td>\n","      <td>530.333313</td>\n","      <td>42909.089844</td>\n","      <td>0.0</td>\n","      <td>5271.428711</td>\n","      <td>3433.290283</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1059</td>\n","      <td>0</td>\n","      <td>5633</td>\n","      <td>0</td>\n","      <td>676</td>\n","      <td>22301</td>\n","      <td>9680</td>\n","      <td>4277</td>\n","      <td>0</td>\n","      <td>1583</td>\n","      <td>3380</td>\n","      <td>1360</td>\n","      <td>100000</td>\n","      <td>0</td>\n","      <td>11000</td>\n","      <td>30453</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>83</td>\n","      <td>0</td>\n","      <td>95</td>\n","      <td>110</td>\n","      <td>454</td>\n","      <td>55</td>\n","      <td>0</td>\n","      <td>48</td>\n","      <td>27</td>\n","      <td>40</td>\n","      <td>5000</td>\n","      <td>0</td>\n","      <td>500</td>\n","      <td>100</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>9.867188</td>\n","      <td>0.000000</td>\n","      <td>9.585938</td>\n","      <td>0.0</td>\n","      <td>7.066406</td>\n","      <td>11.671875</td>\n","      <td>9.976562</td>\n","      <td>10.859375</td>\n","      <td>0.000000</td>\n","      <td>9.390625</td>\n","      <td>8.984375</td>\n","      <td>8.062500</td>\n","      <td>13.062500</td>\n","      <td>0.0</td>\n","      <td>10.515625</td>\n","      <td>11.578125</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2756</td>\n","      <td>79</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>541</td>\n","      <td>118661</td>\n","      <td>7902</td>\n","      <td>1000</td>\n","      <td>6895</td>\n","      <td>6226</td>\n","      <td>1548</td>\n","      <td>6396</td>\n","      <td>18200</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>173904</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>168</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>16</td>\n","      <td>5</td>\n","      <td>26</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>54</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>689.0</td>\n","      <td>26.328125</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>180.333328</td>\n","      <td>706.315491</td>\n","      <td>607.846130</td>\n","      <td>1000.0</td>\n","      <td>1379.0</td>\n","      <td>389.125000</td>\n","      <td>309.600006</td>\n","      <td>246.000000</td>\n","      <td>9100.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>3220.444336</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1404</td>\n","      <td>33</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>298</td>\n","      <td>6305</td>\n","      <td>1135</td>\n","      <td>1000</td>\n","      <td>3060</td>\n","      <td>2310</td>\n","      <td>611</td>\n","      <td>1403</td>\n","      <td>15000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>24496</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>158</td>\n","      <td>23</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>69</td>\n","      <td>40</td>\n","      <td>111</td>\n","      <td>1000</td>\n","      <td>380</td>\n","      <td>57</td>\n","      <td>46</td>\n","      <td>30</td>\n","      <td>3200</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>32</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>7.921875</td>\n","      <td>4.382812</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>6.296875</td>\n","      <td>11.687500</td>\n","      <td>8.976562</td>\n","      <td>6.910156</td>\n","      <td>8.835938</td>\n","      <td>8.734375</td>\n","      <td>7.343750</td>\n","      <td>8.765625</td>\n","      <td>9.812500</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>12.062500</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2167</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>65466</td>\n","      <td>576</td>\n","      <td>10000</td>\n","      <td>3200</td>\n","      <td>7441</td>\n","      <td>6250</td>\n","      <td>39</td>\n","      <td>1440000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>86686</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>24</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>52</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>271.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>1392.893677</td>\n","      <td>576.000000</td>\n","      <td>2000.0</td>\n","      <td>1600.0</td>\n","      <td>310.041656</td>\n","      <td>1562.500000</td>\n","      <td>39.000000</td>\n","      <td>480000.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>1667.038452</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>380</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3443</td>\n","      <td>576</td>\n","      <td>2000</td>\n","      <td>3130</td>\n","      <td>653</td>\n","      <td>3586</td>\n","      <td>39</td>\n","      <td>1000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>576</td>\n","      <td>2000</td>\n","      <td>70</td>\n","      <td>99</td>\n","      <td>419</td>\n","      <td>39</td>\n","      <td>140000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>200</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>7.679688</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>11.085938</td>\n","      <td>6.359375</td>\n","      <td>9.210938</td>\n","      <td>8.070312</td>\n","      <td>8.914062</td>\n","      <td>8.742188</td>\n","      <td>3.689453</td>\n","      <td>14.179688</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>11.367188</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03f3a8ba-b370-4317-ae1e-0869a52582a9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-03f3a8ba-b370-4317-ae1e-0869a52582a9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-03f3a8ba-b370-4317-ae1e-0869a52582a9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-2198da32-5c33-446a-9b7f-e9b613ede289\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2198da32-5c33-446a-9b7f-e9b613ede289')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-2198da32-5c33-446a-9b7f-e9b613ede289 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"agg_mcc_train"}},"metadata":{},"execution_count":22}],"source":["def create_aggregated_mcc_features(df):\n","    # подсчет популярных и редких MCC-кодов\n","    mcc_counts = df['mcc_code'].value_counts(normalize=True)\n","    popular_mcc = mcc_counts[mcc_counts > 0.01].index  # порог популярности (1%)\n","    df['mcc_code'] = df['mcc_code'].apply(lambda x: x if x in popular_mcc else 'other')\n","\n","    # добавление долей транзакций по категориям\n","    mcc_amount = df.groupby(['client_num', 'mcc_code'])['amount'].sum().unstack(fill_value=0)\n","    mcc_amount.columns = [f'mcc_amount_{col}' for col in mcc_amount.columns]\n","\n","    # добавление частоты использования MCC-кодов\n","    mcc_frequency = df.groupby(['client_num', 'mcc_code']).size().unstack(fill_value=0)\n","    mcc_frequency.columns = [f'mcc_frequency_{col}' for col in mcc_frequency.columns]\n","\n","    # средняя сумма транзакций для каждого MCC-кода\n","    mcc_mean_amount = df.groupby(['client_num', 'mcc_code'])['amount'].mean().unstack(fill_value=0)\n","    mcc_mean_amount.columns = [f'mcc_mean_amount_{col}' for col in mcc_mean_amount.columns]\n","\n","    # максимальная и минимальная сумма транзакций для каждого MCC-кода\n","    mcc_max_amount = df.groupby(['client_num', 'mcc_code'])['amount'].max().unstack(fill_value=0)\n","    mcc_max_amount.columns = [f'mcc_max_amount_{col}' for col in mcc_max_amount.columns]\n","\n","    mcc_min_amount = df.groupby(['client_num', 'mcc_code'])['amount'].min().unstack(fill_value=0)\n","    mcc_min_amount.columns = [f'mcc_min_amount_{col}' for col in mcc_min_amount.columns]\n","\n","    # логарифмическое преобразование сумм транзакций\n","    mcc_log_amount = np.log1p(mcc_amount)\n","    mcc_log_amount.columns = [f'log_{col}' for col in mcc_log_amount.columns]\n","\n","    # объединение всех признаков\n","    mcc_features = pd.concat([mcc_amount, mcc_frequency, mcc_mean_amount, mcc_max_amount, mcc_min_amount, mcc_log_amount], axis=1)\n","\n","    return mcc_features\n","\n","agg_mcc_train = create_aggregated_mcc_features(train)\n","agg_mcc_test = create_aggregated_mcc_features(test)\n","\n","agg_mcc_train = reduce_mem_usage(agg_mcc_train, cat_cols=[])\n","agg_mcc_test = reduce_mem_usage(agg_mcc_test, cat_cols=[])\n","\n","agg_mcc_train.head(3)"]},{"cell_type":"code","source":["agg_mcc_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mfsp1AzGPD9i","executionInfo":{"status":"ok","timestamp":1748442057090,"user_tz":-180,"elapsed":58,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"173c9c7e-d26a-4ed8-ba7d-af81d68718f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n","  has_large_values = (abs_vals > 1e6).any()\n"]},{"output_type":"execute_result","data":{"text/plain":["            mcc_amount_3990  mcc_amount_4111  mcc_amount_4121  \\\n","client_num                                                      \n","1                         0                0            19211   \n","2                         0                0             2756   \n","3                         0                0             2167   \n","4                         0             2512                0   \n","5                         0                0                0   \n","...                     ...              ...              ...   \n","109136                    0              183                0   \n","109138                    0                0                0   \n","109139                    0                0                0   \n","109141                    0                0                0   \n","109142                    0                0                0   \n","\n","            mcc_amount_4131  mcc_amount_5200  mcc_amount_5300  \\\n","client_num                                                      \n","1                         0            14582                0   \n","2                        79                0                0   \n","3                         0                0                0   \n","4                         0                0                0   \n","5                      1860                0                0   \n","...                     ...              ...              ...   \n","109136                    0                0                0   \n","109138                    0                0                0   \n","109139                    0                0                0   \n","109141                    0                0                0   \n","109142                    0                0                0   \n","\n","            mcc_amount_5331  mcc_amount_5411  mcc_amount_5499  \\\n","client_num                                                      \n","1                      1172           116813            21519   \n","2                       541           118661             7902   \n","3                         0            65466              576   \n","4                         0            37833                0   \n","5                      1445             1743              294   \n","...                     ...              ...              ...   \n","109136                    0             1541              164   \n","109138                    0                0                0   \n","109139                    0             2944              847   \n","109141                  245             3066              924   \n","109142                    0                0                0   \n","\n","            mcc_amount_5541  mcc_amount_5812  mcc_amount_5814  \\\n","client_num                                                      \n","1                     52045                0            12016   \n","2                      1000             6895             6226   \n","3                     10000             3200             7441   \n","4                         0                0            14653   \n","5                         0             2277             1219   \n","...                     ...              ...              ...   \n","109136                    0                0             1199   \n","109138                    0              370              340   \n","109139                 3500                0             1265   \n","109141                    0                0              965   \n","109142                    0                0                0   \n","\n","            mcc_amount_5912  mcc_amount_5921  mcc_amount_6011  \\\n","client_num                                                      \n","1                      8006             3182           472000   \n","2                      1548             6396            18200   \n","3                      6250               39          1440000   \n","4                      3802             1199            50000   \n","5                       446             1059                0   \n","...                     ...              ...              ...   \n","109136                    0                0             6000   \n","109138                    0                0                0   \n","109139                  273                0                0   \n","109141                  625                0            20000   \n","109142                    0                0           341100   \n","\n","            mcc_amount_6536  mcc_amount_6538  mcc_amount_other  \\\n","client_num                                                       \n","1                         0            36900            106432   \n","2                         0                0            173904   \n","3                         0                0             86686   \n","4                         0                0             89797   \n","5                     49050                0              7966   \n","...                     ...              ...               ...   \n","109136                    0                0             10290   \n","109138                    0               11            235562   \n","109139                    0                0               811   \n","109141                12000                0             24018   \n","109142                    0                0                 0   \n","\n","            mcc_frequency_3990  mcc_frequency_4111  mcc_frequency_4121  \\\n","client_num                                                               \n","1                            0                   0                  42   \n","2                            0                   0                   4   \n","3                            0                   0                   8   \n","4                            0                   7                   0   \n","5                            0                   0                   0   \n","...                        ...                 ...                 ...   \n","109136                       0                   3                   0   \n","109138                       0                   0                   0   \n","109139                       0                   0                   0   \n","109141                       0                   0                   0   \n","109142                       0                   0                   0   \n","\n","            mcc_frequency_4131  mcc_frequency_5200  mcc_frequency_5300  \\\n","client_num                                                               \n","1                            0                   6                   0   \n","2                            3                   0                   0   \n","3                            0                   0                   0   \n","4                            0                   0                   0   \n","5                           62                   0                   0   \n","...                        ...                 ...                 ...   \n","109136                       0                   0                   0   \n","109138                       0                   0                   0   \n","109139                       0                   0                   0   \n","109141                       0                   0                   0   \n","109142                       0                   0                   0   \n","\n","            mcc_frequency_5331  mcc_frequency_5411  mcc_frequency_5499  \\\n","client_num                                                               \n","1                            4                  67                  10   \n","2                            3                 168                  13   \n","3                            0                  47                   1   \n","4                            0                  21                   0   \n","5                           12                  14                   1   \n","...                        ...                 ...                 ...   \n","109136                       0                   5                   1   \n","109138                       0                   0                   0   \n","109139                       0                   4                   2   \n","109141                       1                   5                   2   \n","109142                       0                   0                   0   \n","\n","            mcc_frequency_5541  mcc_frequency_5812  mcc_frequency_5814  \\\n","client_num                                                               \n","1                           24                   0                  26   \n","2                            1                   5                  16   \n","3                            5                   2                  24   \n","4                            0                   0                  53   \n","5                            0                   3                   2   \n","...                        ...                 ...                 ...   \n","109136                       0                   0                   2   \n","109138                       0                   1                   1   \n","109139                       4                   0                   3   \n","109141                       0                   0                   1   \n","109142                       0                   0                   0   \n","\n","            mcc_frequency_5912  mcc_frequency_5921  mcc_frequency_6011  \\\n","client_num                                                               \n","1                            6                   6                  11   \n","2                            5                  26                   2   \n","3                            4                   1                   3   \n","4                            4                   6                   1   \n","5                            2                  13                   0   \n","...                        ...                 ...                 ...   \n","109136                       0                   0                   2   \n","109138                       0                   0                   0   \n","109139                       1                   0                   0   \n","109141                       1                   0                   1   \n","109142                       0                   0                  15   \n","\n","            mcc_frequency_6536  mcc_frequency_6538  mcc_frequency_other  \\\n","client_num                                                                \n","1                            0                   7                   31   \n","2                            0                   0                   54   \n","3                            0                   0                   52   \n","4                            0                   0                   30   \n","5                           36                   0                   27   \n","...                        ...                 ...                  ...   \n","109136                       0                   0                    2   \n","109138                       0                   2                   12   \n","109139                       0                   0                    1   \n","109141                       2                   0                    3   \n","109142                       0                   0                    0   \n","\n","            mcc_mean_amount_3990  mcc_mean_amount_4111  mcc_mean_amount_4121  \\\n","client_num                                                                     \n","1                            0.0              0.000000                 457.5   \n","2                            0.0              0.000000                 689.0   \n","3                            0.0              0.000000                 271.0   \n","4                            0.0            358.857147                   0.0   \n","5                            0.0              0.000000                   0.0   \n","...                          ...                   ...                   ...   \n","109136                       0.0             61.000000                   0.0   \n","109138                       0.0              0.000000                   0.0   \n","109139                       0.0              0.000000                   0.0   \n","109141                       0.0              0.000000                   0.0   \n","109142                       0.0              0.000000                   0.0   \n","\n","            mcc_mean_amount_4131  mcc_mean_amount_5200  mcc_mean_amount_5300  \\\n","client_num                                                                     \n","1                       0.000000           2430.333252                   0.0   \n","2                      26.328125              0.000000                   0.0   \n","3                       0.000000              0.000000                   0.0   \n","4                       0.000000              0.000000                   0.0   \n","5                      30.000000              0.000000                   0.0   \n","...                          ...                   ...                   ...   \n","109136                  0.000000              0.000000                   0.0   \n","109138                  0.000000              0.000000                   0.0   \n","109139                  0.000000              0.000000                   0.0   \n","109141                  0.000000              0.000000                   0.0   \n","109142                  0.000000              0.000000                   0.0   \n","\n","            mcc_mean_amount_5331  mcc_mean_amount_5411  mcc_mean_amount_5499  \\\n","client_num                                                                     \n","1                     293.000000           1743.477661           2151.899902   \n","2                     180.333328            706.315491            607.846130   \n","3                       0.000000           1392.893677            576.000000   \n","4                       0.000000           1801.571411              0.000000   \n","5                     120.416664            124.500000            294.000000   \n","...                          ...                   ...                   ...   \n","109136                  0.000000            308.200012            164.000000   \n","109138                  0.000000              0.000000              0.000000   \n","109139                  0.000000            736.000000            423.500000   \n","109141                245.000000            613.200012            462.000000   \n","109142                  0.000000              0.000000              0.000000   \n","\n","            mcc_mean_amount_5541  mcc_mean_amount_5812  mcc_mean_amount_5814  \\\n","client_num                                                                     \n","1                         2168.0                   0.0            462.153839   \n","2                         1000.0                1379.0            389.125000   \n","3                         2000.0                1600.0            310.041656   \n","4                            0.0                   0.0            276.471710   \n","5                            0.0                 759.0            609.500000   \n","...                          ...                   ...                   ...   \n","109136                       0.0                   0.0            599.500000   \n","109138                       0.0                 370.0            340.000000   \n","109139                     875.0                   0.0            421.666656   \n","109141                       0.0                   0.0            965.000000   \n","109142                       0.0                   0.0              0.000000   \n","\n","            mcc_mean_amount_5912  mcc_mean_amount_5921  mcc_mean_amount_6011  \\\n","client_num                                                                     \n","1                    1334.333374            530.333313          42909.089844   \n","2                     309.600006            246.000000           9100.000000   \n","3                    1562.500000             39.000000         480000.000000   \n","4                     950.500000            199.833328          50000.000000   \n","5                     223.000000             81.461540              0.000000   \n","...                          ...                   ...                   ...   \n","109136                  0.000000              0.000000           3000.000000   \n","109138                  0.000000              0.000000              0.000000   \n","109139                273.000000              0.000000              0.000000   \n","109141                625.000000              0.000000          20000.000000   \n","109142                  0.000000              0.000000          22740.000000   \n","\n","            mcc_mean_amount_6536  mcc_mean_amount_6538  mcc_mean_amount_other  \\\n","client_num                                                                      \n","1                            0.0           5271.428711            3433.290283   \n","2                            0.0              0.000000            3220.444336   \n","3                            0.0              0.000000            1667.038452   \n","4                            0.0              0.000000            2993.233398   \n","5                         1362.5              0.000000             295.037048   \n","...                          ...                   ...                    ...   \n","109136                       0.0              0.000000            5145.000000   \n","109138                       0.0              5.500000           19630.166016   \n","109139                       0.0              0.000000             811.000000   \n","109141                    6000.0              0.000000            8006.000000   \n","109142                       0.0              0.000000               0.000000   \n","\n","            mcc_max_amount_3990  mcc_max_amount_4111  mcc_max_amount_4121  \\\n","client_num                                                                  \n","1                             0                    0                 1059   \n","2                             0                    0                 1404   \n","3                             0                    0                  380   \n","4                             0                 1000                    0   \n","5                             0                    0                    0   \n","...                         ...                  ...                  ...   \n","109136                        0                   64                    0   \n","109138                        0                    0                    0   \n","109139                        0                    0                    0   \n","109141                        0                    0                    0   \n","109142                        0                    0                    0   \n","\n","            mcc_max_amount_4131  mcc_max_amount_5200  mcc_max_amount_5300  \\\n","client_num                                                                  \n","1                             0                 5633                    0   \n","2                            33                    0                    0   \n","3                             0                    0                    0   \n","4                             0                    0                    0   \n","5                            30                    0                    0   \n","...                         ...                  ...                  ...   \n","109136                        0                    0                    0   \n","109138                        0                    0                    0   \n","109139                        0                    0                    0   \n","109141                        0                    0                    0   \n","109142                        0                    0                    0   \n","\n","            mcc_max_amount_5331  mcc_max_amount_5411  mcc_max_amount_5499  \\\n","client_num                                                                  \n","1                           676                22301                 9680   \n","2                           298                 6305                 1135   \n","3                             0                 3443                  576   \n","4                             0                 3174                    0   \n","5                           238                  355                  294   \n","...                         ...                  ...                  ...   \n","109136                        0                  419                  164   \n","109138                        0                    0                    0   \n","109139                        0                 1150                  806   \n","109141                      245                 1256                  546   \n","109142                        0                    0                    0   \n","\n","            mcc_max_amount_5541  mcc_max_amount_5812  mcc_max_amount_5814  \\\n","client_num                                                                  \n","1                          4277                    0                 1583   \n","2                          1000                 3060                 2310   \n","3                          2000                 3130                  653   \n","4                             0                    0                  759   \n","5                             0                 1059                  879   \n","...                         ...                  ...                  ...   \n","109136                        0                    0                  772   \n","109138                        0                  370                  340   \n","109139                     1000                    0                  710   \n","109141                        0                    0                  965   \n","109142                        0                    0                    0   \n","\n","            mcc_max_amount_5912  mcc_max_amount_5921  mcc_max_amount_6011  \\\n","client_num                                                                  \n","1                          3380                 1360               100000   \n","2                           611                 1403                15000   \n","3                          3586                   39              1000000   \n","4                          2077                  449                50000   \n","5                           228                  162                    0   \n","...                         ...                  ...                  ...   \n","109136                        0                    0                 4000   \n","109138                        0                    0                    0   \n","109139                      273                    0                    0   \n","109141                      625                    0                20000   \n","109142                        0                    0                86000   \n","\n","            mcc_max_amount_6536  mcc_max_amount_6538  mcc_max_amount_other  \\\n","client_num                                                                   \n","1                             0                11000                 30453   \n","2                             0                    0                 24496   \n","3                             0                    0                 13000   \n","4                             0                    0                 18905   \n","5                         10000                    0                   788   \n","...                         ...                  ...                   ...   \n","109136                        0                    0                  5190   \n","109138                        0                   10                 59255   \n","109139                        0                    0                   811   \n","109141                    11000                    0                 22360   \n","109142                        0                    0                     0   \n","\n","            mcc_min_amount_3990  mcc_min_amount_4111  mcc_min_amount_4121  \\\n","client_num                                                                  \n","1                             0                    0                    6   \n","2                             0                    0                  158   \n","3                             0                    0                    1   \n","4                             0                   64                    0   \n","5                             0                    0                    0   \n","...                         ...                  ...                  ...   \n","109136                        0                   55                    0   \n","109138                        0                    0                    0   \n","109139                        0                    0                    0   \n","109141                        0                    0                    0   \n","109142                        0                    0                    0   \n","\n","            mcc_min_amount_4131  mcc_min_amount_5200  mcc_min_amount_5300  \\\n","client_num                                                                  \n","1                             0                   83                    0   \n","2                            23                    0                    0   \n","3                             0                    0                    0   \n","4                             0                    0                    0   \n","5                            30                    0                    0   \n","...                         ...                  ...                  ...   \n","109136                        0                    0                    0   \n","109138                        0                    0                    0   \n","109139                        0                    0                    0   \n","109141                        0                    0                    0   \n","109142                        0                    0                    0   \n","\n","            mcc_min_amount_5331  mcc_min_amount_5411  mcc_min_amount_5499  \\\n","client_num                                                                  \n","1                            95                  110                  454   \n","2                            69                   40                  111   \n","3                             0                    2                  576   \n","4                             0                  198                    0   \n","5                            40                   22                  294   \n","...                         ...                  ...                  ...   \n","109136                        0                  158                  164   \n","109138                        0                    0                    0   \n","109139                        0                  485                   41   \n","109141                      245                  170                  378   \n","109142                        0                    0                    0   \n","\n","            mcc_min_amount_5541  mcc_min_amount_5812  mcc_min_amount_5814  \\\n","client_num                                                                  \n","1                            55                    0                   48   \n","2                          1000                  380                   57   \n","3                          2000                   70                   99   \n","4                             0                    0                   65   \n","5                             0                  599                  340   \n","...                         ...                  ...                  ...   \n","109136                        0                    0                  427   \n","109138                        0                  370                  340   \n","109139                      500                    0                   25   \n","109141                        0                    0                  965   \n","109142                        0                    0                    0   \n","\n","            mcc_min_amount_5912  mcc_min_amount_5921  mcc_min_amount_6011  \\\n","client_num                                                                  \n","1                            27                   40                 5000   \n","2                            46                   30                 3200   \n","3                           419                   39               140000   \n","4                           191                   24                50000   \n","5                           218                   42                    0   \n","...                         ...                  ...                  ...   \n","109136                        0                    0                 2000   \n","109138                        0                    0                    0   \n","109139                      273                    0                    0   \n","109141                      625                    0                20000   \n","109142                        0                    0                  100   \n","\n","            mcc_min_amount_6536  mcc_min_amount_6538  mcc_min_amount_other  \\\n","client_num                                                                   \n","1                             0                  500                   100   \n","2                             0                    0                    32   \n","3                             0                    0                   200   \n","4                             0                    0                    60   \n","5                            50                    0                    58   \n","...                         ...                  ...                   ...   \n","109136                        0                    0                  5100   \n","109138                        0                    1                   116   \n","109139                        0                    0                   811   \n","109141                     1000                    0                   608   \n","109142                        0                    0                     0   \n","\n","            log_mcc_amount_3990  log_mcc_amount_4111  log_mcc_amount_4121  \\\n","client_num                                                                  \n","1                           0.0             0.000000             9.867188   \n","2                           0.0             0.000000             7.921875   \n","3                           0.0             0.000000             7.679688   \n","4                           0.0             7.828125             0.000000   \n","5                           0.0             0.000000             0.000000   \n","...                         ...                  ...                  ...   \n","109136                      0.0             5.214844             0.000000   \n","109138                      0.0             0.000000             0.000000   \n","109139                      0.0             0.000000             0.000000   \n","109141                      0.0             0.000000             0.000000   \n","109142                      0.0             0.000000             0.000000   \n","\n","            log_mcc_amount_4131  log_mcc_amount_5200  log_mcc_amount_5300  \\\n","client_num                                                                  \n","1                      0.000000             9.585938                  0.0   \n","2                      4.382812             0.000000                  0.0   \n","3                      0.000000             0.000000                  0.0   \n","4                      0.000000             0.000000                  0.0   \n","5                      7.527344             0.000000                  0.0   \n","...                         ...                  ...                  ...   \n","109136                 0.000000             0.000000                  0.0   \n","109138                 0.000000             0.000000                  0.0   \n","109139                 0.000000             0.000000                  0.0   \n","109141                 0.000000             0.000000                  0.0   \n","109142                 0.000000             0.000000                  0.0   \n","\n","            log_mcc_amount_5331  log_mcc_amount_5411  log_mcc_amount_5499  \\\n","client_num                                                                  \n","1                      7.066406            11.671875             9.976562   \n","2                      6.296875            11.687500             8.976562   \n","3                      0.000000            11.085938             6.359375   \n","4                      0.000000            10.539062             0.000000   \n","5                      7.277344             7.464844             5.687500   \n","...                         ...                  ...                  ...   \n","109136                 0.000000             7.339844             5.105469   \n","109138                 0.000000             0.000000             0.000000   \n","109139                 0.000000             7.988281             6.742188   \n","109141                 5.503906             8.031250             6.828125   \n","109142                 0.000000             0.000000             0.000000   \n","\n","            log_mcc_amount_5541  log_mcc_amount_5812  log_mcc_amount_5814  \\\n","client_num                                                                  \n","1                     10.859375             0.000000             9.390625   \n","2                      6.910156             8.835938             8.734375   \n","3                      9.210938             8.070312             8.914062   \n","4                      0.000000             0.000000             9.593750   \n","5                      0.000000             7.730469             7.105469   \n","...                         ...                  ...                  ...   \n","109136                 0.000000             0.000000             7.089844   \n","109138                 0.000000             5.917969             5.832031   \n","109139                 8.164062             0.000000             7.144531   \n","109141                 0.000000             0.000000             6.875000   \n","109142                 0.000000             0.000000             0.000000   \n","\n","            log_mcc_amount_5912  log_mcc_amount_5921  log_mcc_amount_6011  \\\n","client_num                                                                  \n","1                      8.984375             8.062500            13.062500   \n","2                      7.343750             8.765625             9.812500   \n","3                      8.742188             3.689453            14.179688   \n","4                      8.242188             7.089844            10.820312   \n","5                      6.101562             6.964844             0.000000   \n","...                         ...                  ...                  ...   \n","109136                 0.000000             0.000000             8.703125   \n","109138                 0.000000             0.000000             0.000000   \n","109139                 5.613281             0.000000             0.000000   \n","109141                 6.437500             0.000000             9.906250   \n","109142                 0.000000             0.000000            12.742188   \n","\n","            log_mcc_amount_6536  log_mcc_amount_6538  log_mcc_amount_other  \n","client_num                                                                  \n","1                      0.000000            10.515625             11.578125  \n","2                      0.000000             0.000000             12.062500  \n","3                      0.000000             0.000000             11.367188  \n","4                      0.000000             0.000000             11.406250  \n","5                     10.796875             0.000000              8.984375  \n","...                         ...                  ...                   ...  \n","109136                 0.000000             0.000000              9.242188  \n","109138                 0.000000             2.484375             12.367188  \n","109139                 0.000000             0.000000              6.699219  \n","109141                 9.390625             0.000000             10.085938  \n","109142                 0.000000             0.000000              0.000000  \n","\n","[70000 rows x 108 columns]"],"text/html":["\n","  <div id=\"df-5f4bcf87-60b1-4bab-975b-ef9646d8f216\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mcc_amount_3990</th>\n","      <th>mcc_amount_4111</th>\n","      <th>mcc_amount_4121</th>\n","      <th>mcc_amount_4131</th>\n","      <th>mcc_amount_5200</th>\n","      <th>mcc_amount_5300</th>\n","      <th>mcc_amount_5331</th>\n","      <th>mcc_amount_5411</th>\n","      <th>mcc_amount_5499</th>\n","      <th>mcc_amount_5541</th>\n","      <th>mcc_amount_5812</th>\n","      <th>mcc_amount_5814</th>\n","      <th>mcc_amount_5912</th>\n","      <th>mcc_amount_5921</th>\n","      <th>mcc_amount_6011</th>\n","      <th>mcc_amount_6536</th>\n","      <th>mcc_amount_6538</th>\n","      <th>mcc_amount_other</th>\n","      <th>mcc_frequency_3990</th>\n","      <th>mcc_frequency_4111</th>\n","      <th>mcc_frequency_4121</th>\n","      <th>mcc_frequency_4131</th>\n","      <th>mcc_frequency_5200</th>\n","      <th>mcc_frequency_5300</th>\n","      <th>mcc_frequency_5331</th>\n","      <th>mcc_frequency_5411</th>\n","      <th>mcc_frequency_5499</th>\n","      <th>mcc_frequency_5541</th>\n","      <th>mcc_frequency_5812</th>\n","      <th>mcc_frequency_5814</th>\n","      <th>mcc_frequency_5912</th>\n","      <th>mcc_frequency_5921</th>\n","      <th>mcc_frequency_6011</th>\n","      <th>mcc_frequency_6536</th>\n","      <th>mcc_frequency_6538</th>\n","      <th>mcc_frequency_other</th>\n","      <th>mcc_mean_amount_3990</th>\n","      <th>mcc_mean_amount_4111</th>\n","      <th>mcc_mean_amount_4121</th>\n","      <th>mcc_mean_amount_4131</th>\n","      <th>mcc_mean_amount_5200</th>\n","      <th>mcc_mean_amount_5300</th>\n","      <th>mcc_mean_amount_5331</th>\n","      <th>mcc_mean_amount_5411</th>\n","      <th>mcc_mean_amount_5499</th>\n","      <th>mcc_mean_amount_5541</th>\n","      <th>mcc_mean_amount_5812</th>\n","      <th>mcc_mean_amount_5814</th>\n","      <th>mcc_mean_amount_5912</th>\n","      <th>mcc_mean_amount_5921</th>\n","      <th>mcc_mean_amount_6011</th>\n","      <th>mcc_mean_amount_6536</th>\n","      <th>mcc_mean_amount_6538</th>\n","      <th>mcc_mean_amount_other</th>\n","      <th>mcc_max_amount_3990</th>\n","      <th>mcc_max_amount_4111</th>\n","      <th>mcc_max_amount_4121</th>\n","      <th>mcc_max_amount_4131</th>\n","      <th>mcc_max_amount_5200</th>\n","      <th>mcc_max_amount_5300</th>\n","      <th>mcc_max_amount_5331</th>\n","      <th>mcc_max_amount_5411</th>\n","      <th>mcc_max_amount_5499</th>\n","      <th>mcc_max_amount_5541</th>\n","      <th>mcc_max_amount_5812</th>\n","      <th>mcc_max_amount_5814</th>\n","      <th>mcc_max_amount_5912</th>\n","      <th>mcc_max_amount_5921</th>\n","      <th>mcc_max_amount_6011</th>\n","      <th>mcc_max_amount_6536</th>\n","      <th>mcc_max_amount_6538</th>\n","      <th>mcc_max_amount_other</th>\n","      <th>mcc_min_amount_3990</th>\n","      <th>mcc_min_amount_4111</th>\n","      <th>mcc_min_amount_4121</th>\n","      <th>mcc_min_amount_4131</th>\n","      <th>mcc_min_amount_5200</th>\n","      <th>mcc_min_amount_5300</th>\n","      <th>mcc_min_amount_5331</th>\n","      <th>mcc_min_amount_5411</th>\n","      <th>mcc_min_amount_5499</th>\n","      <th>mcc_min_amount_5541</th>\n","      <th>mcc_min_amount_5812</th>\n","      <th>mcc_min_amount_5814</th>\n","      <th>mcc_min_amount_5912</th>\n","      <th>mcc_min_amount_5921</th>\n","      <th>mcc_min_amount_6011</th>\n","      <th>mcc_min_amount_6536</th>\n","      <th>mcc_min_amount_6538</th>\n","      <th>mcc_min_amount_other</th>\n","      <th>log_mcc_amount_3990</th>\n","      <th>log_mcc_amount_4111</th>\n","      <th>log_mcc_amount_4121</th>\n","      <th>log_mcc_amount_4131</th>\n","      <th>log_mcc_amount_5200</th>\n","      <th>log_mcc_amount_5300</th>\n","      <th>log_mcc_amount_5331</th>\n","      <th>log_mcc_amount_5411</th>\n","      <th>log_mcc_amount_5499</th>\n","      <th>log_mcc_amount_5541</th>\n","      <th>log_mcc_amount_5812</th>\n","      <th>log_mcc_amount_5814</th>\n","      <th>log_mcc_amount_5912</th>\n","      <th>log_mcc_amount_5921</th>\n","      <th>log_mcc_amount_6011</th>\n","      <th>log_mcc_amount_6536</th>\n","      <th>log_mcc_amount_6538</th>\n","      <th>log_mcc_amount_other</th>\n","    </tr>\n","    <tr>\n","      <th>client_num</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>19211</td>\n","      <td>0</td>\n","      <td>14582</td>\n","      <td>0</td>\n","      <td>1172</td>\n","      <td>116813</td>\n","      <td>21519</td>\n","      <td>52045</td>\n","      <td>0</td>\n","      <td>12016</td>\n","      <td>8006</td>\n","      <td>3182</td>\n","      <td>472000</td>\n","      <td>0</td>\n","      <td>36900</td>\n","      <td>106432</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>42</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>67</td>\n","      <td>10</td>\n","      <td>24</td>\n","      <td>0</td>\n","      <td>26</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>11</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>31</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>457.5</td>\n","      <td>0.000000</td>\n","      <td>2430.333252</td>\n","      <td>0.0</td>\n","      <td>293.000000</td>\n","      <td>1743.477661</td>\n","      <td>2151.899902</td>\n","      <td>2168.0</td>\n","      <td>0.0</td>\n","      <td>462.153839</td>\n","      <td>1334.333374</td>\n","      <td>530.333313</td>\n","      <td>42909.089844</td>\n","      <td>0.0</td>\n","      <td>5271.428711</td>\n","      <td>3433.290283</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1059</td>\n","      <td>0</td>\n","      <td>5633</td>\n","      <td>0</td>\n","      <td>676</td>\n","      <td>22301</td>\n","      <td>9680</td>\n","      <td>4277</td>\n","      <td>0</td>\n","      <td>1583</td>\n","      <td>3380</td>\n","      <td>1360</td>\n","      <td>100000</td>\n","      <td>0</td>\n","      <td>11000</td>\n","      <td>30453</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>83</td>\n","      <td>0</td>\n","      <td>95</td>\n","      <td>110</td>\n","      <td>454</td>\n","      <td>55</td>\n","      <td>0</td>\n","      <td>48</td>\n","      <td>27</td>\n","      <td>40</td>\n","      <td>5000</td>\n","      <td>0</td>\n","      <td>500</td>\n","      <td>100</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>9.867188</td>\n","      <td>0.000000</td>\n","      <td>9.585938</td>\n","      <td>0.0</td>\n","      <td>7.066406</td>\n","      <td>11.671875</td>\n","      <td>9.976562</td>\n","      <td>10.859375</td>\n","      <td>0.000000</td>\n","      <td>9.390625</td>\n","      <td>8.984375</td>\n","      <td>8.062500</td>\n","      <td>13.062500</td>\n","      <td>0.000000</td>\n","      <td>10.515625</td>\n","      <td>11.578125</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2756</td>\n","      <td>79</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>541</td>\n","      <td>118661</td>\n","      <td>7902</td>\n","      <td>1000</td>\n","      <td>6895</td>\n","      <td>6226</td>\n","      <td>1548</td>\n","      <td>6396</td>\n","      <td>18200</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>173904</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>168</td>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>16</td>\n","      <td>5</td>\n","      <td>26</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>54</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>689.0</td>\n","      <td>26.328125</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>180.333328</td>\n","      <td>706.315491</td>\n","      <td>607.846130</td>\n","      <td>1000.0</td>\n","      <td>1379.0</td>\n","      <td>389.125000</td>\n","      <td>309.600006</td>\n","      <td>246.000000</td>\n","      <td>9100.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>3220.444336</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1404</td>\n","      <td>33</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>298</td>\n","      <td>6305</td>\n","      <td>1135</td>\n","      <td>1000</td>\n","      <td>3060</td>\n","      <td>2310</td>\n","      <td>611</td>\n","      <td>1403</td>\n","      <td>15000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>24496</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>158</td>\n","      <td>23</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>69</td>\n","      <td>40</td>\n","      <td>111</td>\n","      <td>1000</td>\n","      <td>380</td>\n","      <td>57</td>\n","      <td>46</td>\n","      <td>30</td>\n","      <td>3200</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>32</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>7.921875</td>\n","      <td>4.382812</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>6.296875</td>\n","      <td>11.687500</td>\n","      <td>8.976562</td>\n","      <td>6.910156</td>\n","      <td>8.835938</td>\n","      <td>8.734375</td>\n","      <td>7.343750</td>\n","      <td>8.765625</td>\n","      <td>9.812500</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>12.062500</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2167</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>65466</td>\n","      <td>576</td>\n","      <td>10000</td>\n","      <td>3200</td>\n","      <td>7441</td>\n","      <td>6250</td>\n","      <td>39</td>\n","      <td>1440000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>86686</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>24</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>52</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>271.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>1392.893677</td>\n","      <td>576.000000</td>\n","      <td>2000.0</td>\n","      <td>1600.0</td>\n","      <td>310.041656</td>\n","      <td>1562.500000</td>\n","      <td>39.000000</td>\n","      <td>480000.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>1667.038452</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>380</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3443</td>\n","      <td>576</td>\n","      <td>2000</td>\n","      <td>3130</td>\n","      <td>653</td>\n","      <td>3586</td>\n","      <td>39</td>\n","      <td>1000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>576</td>\n","      <td>2000</td>\n","      <td>70</td>\n","      <td>99</td>\n","      <td>419</td>\n","      <td>39</td>\n","      <td>140000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>200</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>7.679688</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>11.085938</td>\n","      <td>6.359375</td>\n","      <td>9.210938</td>\n","      <td>8.070312</td>\n","      <td>8.914062</td>\n","      <td>8.742188</td>\n","      <td>3.689453</td>\n","      <td>14.179688</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>11.367188</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>2512</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>37833</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>14653</td>\n","      <td>3802</td>\n","      <td>1199</td>\n","      <td>50000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>89797</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>21</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>53</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>0.0</td>\n","      <td>358.857147</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>1801.571411</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>276.471710</td>\n","      <td>950.500000</td>\n","      <td>199.833328</td>\n","      <td>50000.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>2993.233398</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3174</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>759</td>\n","      <td>2077</td>\n","      <td>449</td>\n","      <td>50000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>18905</td>\n","      <td>0</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>198</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>65</td>\n","      <td>191</td>\n","      <td>24</td>\n","      <td>50000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>60</td>\n","      <td>0.0</td>\n","      <td>7.828125</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>10.539062</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>9.593750</td>\n","      <td>8.242188</td>\n","      <td>7.089844</td>\n","      <td>10.820312</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>11.406250</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1860</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1445</td>\n","      <td>1743</td>\n","      <td>294</td>\n","      <td>0</td>\n","      <td>2277</td>\n","      <td>1219</td>\n","      <td>446</td>\n","      <td>1059</td>\n","      <td>0</td>\n","      <td>49050</td>\n","      <td>0</td>\n","      <td>7966</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>62</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>12</td>\n","      <td>14</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>36</td>\n","      <td>0</td>\n","      <td>27</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>30.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>120.416664</td>\n","      <td>124.500000</td>\n","      <td>294.000000</td>\n","      <td>0.0</td>\n","      <td>759.0</td>\n","      <td>609.500000</td>\n","      <td>223.000000</td>\n","      <td>81.461540</td>\n","      <td>0.000000</td>\n","      <td>1362.5</td>\n","      <td>0.000000</td>\n","      <td>295.037048</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>238</td>\n","      <td>355</td>\n","      <td>294</td>\n","      <td>0</td>\n","      <td>1059</td>\n","      <td>879</td>\n","      <td>228</td>\n","      <td>162</td>\n","      <td>0</td>\n","      <td>10000</td>\n","      <td>0</td>\n","      <td>788</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>22</td>\n","      <td>294</td>\n","      <td>0</td>\n","      <td>599</td>\n","      <td>340</td>\n","      <td>218</td>\n","      <td>42</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>0</td>\n","      <td>58</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.527344</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>7.277344</td>\n","      <td>7.464844</td>\n","      <td>5.687500</td>\n","      <td>0.000000</td>\n","      <td>7.730469</td>\n","      <td>7.105469</td>\n","      <td>6.101562</td>\n","      <td>6.964844</td>\n","      <td>0.000000</td>\n","      <td>10.796875</td>\n","      <td>0.000000</td>\n","      <td>8.984375</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>109136</th>\n","      <td>0</td>\n","      <td>183</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1541</td>\n","      <td>164</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1199</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10290</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0.0</td>\n","      <td>61.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>308.200012</td>\n","      <td>164.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>599.500000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3000.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>5145.000000</td>\n","      <td>0</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>419</td>\n","      <td>164</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>772</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5190</td>\n","      <td>0</td>\n","      <td>55</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>158</td>\n","      <td>164</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>427</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5100</td>\n","      <td>0.0</td>\n","      <td>5.214844</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>7.339844</td>\n","      <td>5.105469</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.089844</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>8.703125</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>9.242188</td>\n","    </tr>\n","    <tr>\n","      <th>109138</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>370</td>\n","      <td>340</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>235562</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>12</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>370.0</td>\n","      <td>340.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>5.500000</td>\n","      <td>19630.166016</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>370</td>\n","      <td>340</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>59255</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>370</td>\n","      <td>340</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>116</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>5.917969</td>\n","      <td>5.832031</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2.484375</td>\n","      <td>12.367188</td>\n","    </tr>\n","    <tr>\n","      <th>109139</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2944</td>\n","      <td>847</td>\n","      <td>3500</td>\n","      <td>0</td>\n","      <td>1265</td>\n","      <td>273</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>811</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>736.000000</td>\n","      <td>423.500000</td>\n","      <td>875.0</td>\n","      <td>0.0</td>\n","      <td>421.666656</td>\n","      <td>273.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>811.000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1150</td>\n","      <td>806</td>\n","      <td>1000</td>\n","      <td>0</td>\n","      <td>710</td>\n","      <td>273</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>811</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>485</td>\n","      <td>41</td>\n","      <td>500</td>\n","      <td>0</td>\n","      <td>25</td>\n","      <td>273</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>811</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>7.988281</td>\n","      <td>6.742188</td>\n","      <td>8.164062</td>\n","      <td>0.000000</td>\n","      <td>7.144531</td>\n","      <td>5.613281</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>6.699219</td>\n","    </tr>\n","    <tr>\n","      <th>109141</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>245</td>\n","      <td>3066</td>\n","      <td>924</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>965</td>\n","      <td>625</td>\n","      <td>0</td>\n","      <td>20000</td>\n","      <td>12000</td>\n","      <td>0</td>\n","      <td>24018</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>245.000000</td>\n","      <td>613.200012</td>\n","      <td>462.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>965.000000</td>\n","      <td>625.000000</td>\n","      <td>0.000000</td>\n","      <td>20000.000000</td>\n","      <td>6000.0</td>\n","      <td>0.000000</td>\n","      <td>8006.000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>245</td>\n","      <td>1256</td>\n","      <td>546</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>965</td>\n","      <td>625</td>\n","      <td>0</td>\n","      <td>20000</td>\n","      <td>11000</td>\n","      <td>0</td>\n","      <td>22360</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>245</td>\n","      <td>170</td>\n","      <td>378</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>965</td>\n","      <td>625</td>\n","      <td>0</td>\n","      <td>20000</td>\n","      <td>1000</td>\n","      <td>0</td>\n","      <td>608</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>5.503906</td>\n","      <td>8.031250</td>\n","      <td>6.828125</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>6.875000</td>\n","      <td>6.437500</td>\n","      <td>0.000000</td>\n","      <td>9.906250</td>\n","      <td>9.390625</td>\n","      <td>0.000000</td>\n","      <td>10.085938</td>\n","    </tr>\n","    <tr>\n","      <th>109142</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>341100</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>22740.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>86000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>100</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>12.742188</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>70000 rows × 108 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f4bcf87-60b1-4bab-975b-ef9646d8f216')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5f4bcf87-60b1-4bab-975b-ef9646d8f216 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5f4bcf87-60b1-4bab-975b-ef9646d8f216');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-df2f5bf2-7f53-48ce-9a99-42fcd8b14009\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df2f5bf2-7f53-48ce-9a99-42fcd8b14009')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-df2f5bf2-7f53-48ce-9a99-42fcd8b14009 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"agg_mcc_train"}},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["Создадим фичи на основе merchant_name"],"metadata":{"id":"kNA8Pu2F32-j"}},{"cell_type":"code","source":["def create_aggregated_merchant_features(df):\n","    \"\"\"\n","    Создание агрегированных признаков для merchant_name на основе client_num.\n","    \"\"\"\n","    # базовые статистические метрики для каждого клиента и продавца\n","    agg_features = df.groupby(['client_num', 'merchant_name']).agg({\n","        'amount': ['mean', 'std', 'max', 'min', 'sum', 'count'],  # статистика по суммам транзакций\n","        'date_time': ['min', 'max']                               # первая и последняя транзакция у продавца\n","    }).reset_index()\n","\n","    # переименование столбцов\n","    agg_features.columns = [\n","        'client_num',\n","        'merchant_name',\n","        'mean_transaction_amount_by_merchant',\n","        'std_transaction_amount_by_merchant',\n","        'max_transaction_amount_by_merchant',\n","        'min_transaction_amount_by_merchant',\n","        'total_transaction_amount_by_merchant',\n","        'transaction_count_by_merchant',\n","        'first_transaction_date_by_merchant',\n","        'last_transaction_date_by_merchant'\n","    ]\n","\n","    # общая активность: разница между первой и последней транзакцией у продавца\n","    agg_features['activity_period_by_merchant'] = (\n","        pd.to_datetime(agg_features['last_transaction_date_by_merchant']) -\n","        pd.to_datetime(agg_features['first_transaction_date_by_merchant'])\n","    ).dt.days\n","\n","    # частота использования каждого продавца клиентом\n","    merchant_frequency = agg_features.groupby('client_num')['transaction_count_by_merchant'].sum().reset_index()\n","    merchant_frequency.columns = ['client_num', 'total_transactions_with_merchants']\n","    agg_features = agg_features.merge(merchant_frequency, on='client_num', how='left')\n","\n","    agg_features['merchant_usage_ratio'] = agg_features['transaction_count_by_merchant'] / agg_features['total_transactions_with_merchants']\n","\n","\n","    # разделение продавцов на популярных и непопулярных для каждого клиента\n","    agg_features['merchant_popularity'] = pd.cut(\n","        agg_features['transaction_count_by_merchant'],  # agg_features['transaction_count_by_merchant'].median() == 116\n","        bins=[0, 60, 150, float('inf')],\n","        labels=['low', 'medium', 'high']\n","    )\n","\n","    # One-Hot Encoding категориальных признаков\n","    agg_features = pd.get_dummies(agg_features, columns=['merchant_popularity'], prefix='merchant_popularity')\n","\n","    # интервал между транзакциями у конкретного продавца\n","    df['time_diff_by_merchant'] = df.sort_values(by=['client_num', 'merchant_name', 'date_time']).groupby(['client_num', 'merchant_name'])['date_time'].diff().dt.total_seconds()\n","    time_diff_stats = df.groupby(['client_num', 'merchant_name'])['time_diff_by_merchant'].agg(['mean', 'std', 'max', 'min']).reset_index()\n","    time_diff_stats.columns = ['client_num', 'merchant_name', 'mean_time_diff_by_merchant', 'std_time_diff_by_merchant', 'max_time_diff_by_merchant', 'min_time_diff_by_merchant']\n","    agg_features = agg_features.merge(time_diff_stats, on=['client_num', 'merchant_name'], how='left')\n","\n","    # агрегация по всем продавцам для каждого клиента\n","    final_agg_features = agg_features.groupby('client_num').agg({\n","        'mean_transaction_amount_by_merchant': ['mean', 'std'],\n","        'std_transaction_amount_by_merchant': ['mean', 'std'],\n","        'max_transaction_amount_by_merchant': ['mean', 'std'],\n","        'min_transaction_amount_by_merchant': ['mean', 'std'],\n","        'total_transaction_amount_by_merchant': ['mean', 'std'],\n","        'transaction_count_by_merchant': ['mean', 'std', 'sum'],\n","        'activity_period_by_merchant': ['mean', 'std'],\n","        'merchant_usage_ratio': ['mean', 'std'],\n","        'mean_time_diff_by_merchant': ['mean', 'std'],\n","        'std_time_diff_by_merchant': ['mean', 'std'],\n","        'max_time_diff_by_merchant': ['mean', 'std'],\n","        'min_time_diff_by_merchant': ['mean', 'std'],\n","        'merchant_popularity_low': 'sum',\n","        'merchant_popularity_medium': 'sum',\n","        'merchant_popularity_high': 'sum'\n","    }).reset_index()\n","\n","    # переименование столбцов\n","    final_agg_features.columns = [\n","        'client_num',\n","        'mean_mean_transaction_amount_by_merchant',\n","        'std_mean_transaction_amount_by_merchant',\n","        'mean_std_transaction_amount_by_merchant',\n","        'std_std_transaction_amount_by_merchant',\n","        'mean_max_transaction_amount_by_merchant',\n","        'std_max_transaction_amount_by_merchant',\n","        'mean_min_transaction_amount_by_merchant',\n","        'std_min_transaction_amount_by_merchant',\n","        'mean_total_transaction_amount_by_merchant',\n","        'std_total_transaction_amount_by_merchant',\n","        'mean_transaction_count_by_merchant',\n","        'std_transaction_count_by_merchant',\n","        'total_transaction_count_by_merchant',\n","        'mean_activity_period_by_merchant',\n","        'std_activity_period_by_merchant',\n","        'mean_merchant_usage_ratio',\n","        'std_merchant_usage_ratio',\n","        'mean_mean_time_diff_by_merchant',\n","        'std_mean_time_diff_by_merchant',\n","        'mean_std_time_diff_by_merchant',\n","        'std_std_time_diff_by_merchant',\n","        'mean_max_time_diff_by_merchant',\n","        'std_max_time_diff_by_merchant',\n","        'mean_min_time_diff_by_merchant',\n","        'std_min_time_diff_by_merchant',\n","        'count_low_popularity_merchants',\n","        'count_medium_popularity_merchants',\n","        'count_high_popularity_merchants'\n","    ]\n","    return final_agg_features\n","\n","agg_merchant_train = create_aggregated_merchant_features(train)\n","agg_merchant_test = create_aggregated_merchant_features(test)\n","\n","agg_merchant_train = reduce_mem_usage(agg_merchant_train, cat_cols=['merchant_popularity'])\n","agg_merchant_test = reduce_mem_usage(agg_merchant_test, cat_cols=['merchant_popularity'])\n","\n","agg_merchant_train.head(3)"],"metadata":{"id":"VqfNKAf104O7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442103642,"user_tz":-180,"elapsed":46554,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"8ba5d8ac-5613-4231-8d4e-6ba6ffc87b5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 15.22 MB\n","Memory usage after optimization is: 6.28 MB\n","Decreased by 58.8%\n","Memory usage of dataframe is 8.51 MB\n","Memory usage after optimization is: 3.51 MB\n","Decreased by 58.8%\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","<ipython-input-10-918fba180882>:24: RuntimeWarning: overflow encountered in cast\n","  if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n","  has_large_values = (abs_vals > 1e6).any()\n"]},{"output_type":"execute_result","data":{"text/plain":["   client_num  mean_mean_transaction_amount_by_merchant  \\\n","0           1                               2781.618164   \n","1           2                               1804.263306   \n","2           3                              11617.436523   \n","\n","   std_mean_transaction_amount_by_merchant  \\\n","0                              5882.106445   \n","1                              3717.214111   \n","2                             69837.875000   \n","\n","   mean_std_transaction_amount_by_merchant  \\\n","0                              3013.024170   \n","1                               591.072937   \n","2                             19753.390625   \n","\n","   std_std_transaction_amount_by_merchant  \\\n","0                             7089.197754   \n","1                             1435.419067   \n","2                            93220.398438   \n","\n","   mean_max_transaction_amount_by_merchant  \\\n","0                              3865.462158   \n","1                              2076.414551   \n","2                             23039.830078   \n","\n","   std_max_transaction_amount_by_merchant  \\\n","0                            10817.418945   \n","1                             3939.475586   \n","2                           145622.421875   \n","\n","   mean_min_transaction_amount_by_merchant  \\\n","0                              1814.556641   \n","1                              1600.792725   \n","2                              4014.744629   \n","\n","   std_min_transaction_amount_by_merchant  \\\n","0                             3024.733398   \n","1                             3630.780029   \n","2                            20364.472656   \n","\n","   mean_total_transaction_amount_by_merchant  \\\n","0                                8149.792480   \n","1                                4196.438965   \n","2                               34506.914062   \n","\n","   std_total_transaction_amount_by_merchant  \\\n","0                              42501.332031   \n","1                               8163.542480   \n","2                             209562.187500   \n","\n","   mean_transaction_count_by_merchant  std_transaction_count_by_merchant  \\\n","0                            2.263672                           4.187500   \n","1                            3.658203                           7.144531   \n","2                            3.126953                           3.656250   \n","\n","   total_transaction_count_by_merchant  mean_activity_period_by_merchant  \\\n","0                                  240                         14.585938   \n","1                                  300                         21.312500   \n","2                                  147                         21.484375   \n","\n","   std_activity_period_by_merchant  mean_merchant_usage_ratio  \\\n","0                         27.15625                   0.009438   \n","1                         31.81250                   0.012192   \n","2                         27.84375                   0.021271   \n","\n","   std_merchant_usage_ratio  mean_mean_time_diff_by_merchant  \\\n","0                  0.017456                      1683380.500   \n","1                  0.023819                      1642571.625   \n","2                  0.024872                      1321385.375   \n","\n","   std_mean_time_diff_by_merchant  mean_std_time_diff_by_merchant  \\\n","0                      1679391.25                    1.266659e+06   \n","1                      1595785.75                    1.387796e+06   \n","2                      1062412.25                    8.736537e+05   \n","\n","   std_std_time_diff_by_merchant  mean_max_time_diff_by_merchant  \\\n","0                   1.238450e+06                      2399127.50   \n","1                   1.328677e+06                      2697578.75   \n","2                   6.983847e+05                      2210195.00   \n","\n","   std_max_time_diff_by_merchant  mean_min_time_diff_by_merchant  \\\n","0                    1980392.625                    1.134144e+06   \n","1                    2065502.375                    9.305012e+05   \n","2                    1451905.875                    7.809250e+05   \n","\n","   std_min_time_diff_by_merchant  count_low_popularity_merchants  \\\n","0                    1740961.875                             106   \n","1                    1611065.750                              82   \n","2                    1189436.125                              47   \n","\n","   count_medium_popularity_merchants  count_high_popularity_merchants  \n","0                                  0                                0  \n","1                                  0                                0  \n","2                                  0                                0  "],"text/html":["\n","  <div id=\"df-4b8cf0bb-23cf-4740-8d83-0bdb1c2081eb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>client_num</th>\n","      <th>mean_mean_transaction_amount_by_merchant</th>\n","      <th>std_mean_transaction_amount_by_merchant</th>\n","      <th>mean_std_transaction_amount_by_merchant</th>\n","      <th>std_std_transaction_amount_by_merchant</th>\n","      <th>mean_max_transaction_amount_by_merchant</th>\n","      <th>std_max_transaction_amount_by_merchant</th>\n","      <th>mean_min_transaction_amount_by_merchant</th>\n","      <th>std_min_transaction_amount_by_merchant</th>\n","      <th>mean_total_transaction_amount_by_merchant</th>\n","      <th>std_total_transaction_amount_by_merchant</th>\n","      <th>mean_transaction_count_by_merchant</th>\n","      <th>std_transaction_count_by_merchant</th>\n","      <th>total_transaction_count_by_merchant</th>\n","      <th>mean_activity_period_by_merchant</th>\n","      <th>std_activity_period_by_merchant</th>\n","      <th>mean_merchant_usage_ratio</th>\n","      <th>std_merchant_usage_ratio</th>\n","      <th>mean_mean_time_diff_by_merchant</th>\n","      <th>std_mean_time_diff_by_merchant</th>\n","      <th>mean_std_time_diff_by_merchant</th>\n","      <th>std_std_time_diff_by_merchant</th>\n","      <th>mean_max_time_diff_by_merchant</th>\n","      <th>std_max_time_diff_by_merchant</th>\n","      <th>mean_min_time_diff_by_merchant</th>\n","      <th>std_min_time_diff_by_merchant</th>\n","      <th>count_low_popularity_merchants</th>\n","      <th>count_medium_popularity_merchants</th>\n","      <th>count_high_popularity_merchants</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2781.618164</td>\n","      <td>5882.106445</td>\n","      <td>3013.024170</td>\n","      <td>7089.197754</td>\n","      <td>3865.462158</td>\n","      <td>10817.418945</td>\n","      <td>1814.556641</td>\n","      <td>3024.733398</td>\n","      <td>8149.792480</td>\n","      <td>42501.332031</td>\n","      <td>2.263672</td>\n","      <td>4.187500</td>\n","      <td>240</td>\n","      <td>14.585938</td>\n","      <td>27.15625</td>\n","      <td>0.009438</td>\n","      <td>0.017456</td>\n","      <td>1683380.500</td>\n","      <td>1679391.25</td>\n","      <td>1.266659e+06</td>\n","      <td>1.238450e+06</td>\n","      <td>2399127.50</td>\n","      <td>1980392.625</td>\n","      <td>1.134144e+06</td>\n","      <td>1740961.875</td>\n","      <td>106</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1804.263306</td>\n","      <td>3717.214111</td>\n","      <td>591.072937</td>\n","      <td>1435.419067</td>\n","      <td>2076.414551</td>\n","      <td>3939.475586</td>\n","      <td>1600.792725</td>\n","      <td>3630.780029</td>\n","      <td>4196.438965</td>\n","      <td>8163.542480</td>\n","      <td>3.658203</td>\n","      <td>7.144531</td>\n","      <td>300</td>\n","      <td>21.312500</td>\n","      <td>31.81250</td>\n","      <td>0.012192</td>\n","      <td>0.023819</td>\n","      <td>1642571.625</td>\n","      <td>1595785.75</td>\n","      <td>1.387796e+06</td>\n","      <td>1.328677e+06</td>\n","      <td>2697578.75</td>\n","      <td>2065502.375</td>\n","      <td>9.305012e+05</td>\n","      <td>1611065.750</td>\n","      <td>82</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>11617.436523</td>\n","      <td>69837.875000</td>\n","      <td>19753.390625</td>\n","      <td>93220.398438</td>\n","      <td>23039.830078</td>\n","      <td>145622.421875</td>\n","      <td>4014.744629</td>\n","      <td>20364.472656</td>\n","      <td>34506.914062</td>\n","      <td>209562.187500</td>\n","      <td>3.126953</td>\n","      <td>3.656250</td>\n","      <td>147</td>\n","      <td>21.484375</td>\n","      <td>27.84375</td>\n","      <td>0.021271</td>\n","      <td>0.024872</td>\n","      <td>1321385.375</td>\n","      <td>1062412.25</td>\n","      <td>8.736537e+05</td>\n","      <td>6.983847e+05</td>\n","      <td>2210195.00</td>\n","      <td>1451905.875</td>\n","      <td>7.809250e+05</td>\n","      <td>1189436.125</td>\n","      <td>47</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b8cf0bb-23cf-4740-8d83-0bdb1c2081eb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4b8cf0bb-23cf-4740-8d83-0bdb1c2081eb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4b8cf0bb-23cf-4740-8d83-0bdb1c2081eb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-140cecf3-a2a5-4c4c-a0b9-10686e12b882\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-140cecf3-a2a5-4c4c-a0b9-10686e12b882')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-140cecf3-a2a5-4c4c-a0b9-10686e12b882 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"agg_merchant_train"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LQhU7Cef74zi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442103755,"user_tz":-180,"elapsed":106,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"c35b12f7-8c60-4e20-8938-7804fea3b4d7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":25}],"source":["gc.collect()"]},{"cell_type":"markdown","metadata":{"id":"IFNaqBq7yNZw"},"source":["### Соединими все датасеты в один"]},{"cell_type":"code","source":["aggregated_train = pd.merge(left=agg_dt_train, right=agg_client_train, on='client_num', how='left').merge(agg_mcc_train, on='client_num', how='left').merge(agg_merchant_train, on='client_num', how='left').merge(train_target, on='client_num', how='left')"],"metadata":{"id":"oRqt5Iroevzm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["aggregated_test = pd.merge(left=agg_dt_test, right=agg_client_test, on='client_num', how='left').merge(agg_mcc_test, on='client_num', how='left').merge(agg_merchant_test, on='client_num', how='left')"],"metadata":{"id":"xsGKBnsC5bJF"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"txOk2mDrA3DO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442104097,"user_tz":-180,"elapsed":156,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"2b20fc9c-9e07-4621-fa1e-7ff41449280e"},"outputs":[{"output_type":"stream","name":"stdout","text":["(70000, 215)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n","  has_large_values = (abs_vals > 1e6).any()\n"]},{"output_type":"execute_result","data":{"text/plain":["       client_num  mean_hour_of_day  std_hour_of_day  mode_hour_of_day  \\\n","35191       54703         11.148438         3.855469                 8   \n","42505       66171         15.570312         6.882812                21   \n","29718       46170         13.164062         6.777344                19   \n","\n","       mean_day_of_week  std_day_of_week  mode_day_of_week  mean_month  \\\n","35191          3.099609         2.359375                 6    7.898438   \n","42505          2.630859         2.058594                 0    7.882812   \n","29718          3.093750         1.883789                 5    7.792969   \n","\n","       std_month  mode_month  mean_time_diff  std_time_diff  max_time_diff  \\\n","35191   0.852051           7       94.062500     136.625000       530.5000   \n","42505   0.827148           7       26.140625      24.515625        93.3125   \n","29718   0.809570           7        5.300781      15.859375       180.0000   \n","\n","       min_time_diff  transactions_in_last_month first_transaction_date  \\\n","35191            0.0                           6    2024-07-07 04:47:00   \n","42505            0.0                          24    2024-07-01 12:19:00   \n","29718            0.0                         101    2024-07-01 15:27:00   \n","\n","      last_transaction_date  activity_days mode_time_of_day  \\\n","35191   2024-09-23 14:20:00             78          morning   \n","42505   2024-09-30 23:38:00             91          evening   \n","29718   2024-09-30 19:59:00             91          evening   \n","\n","       count_time_of_day  sum_morning_transactions  \\\n","35191                 20                      10.0   \n","42505                 84                       5.0   \n","29718                413                     108.0   \n","\n","       sum_afternoon_transactions  sum_evening_transactions  \\\n","35191                         8.0                       1.0   \n","42505                        30.0                      22.0   \n","29718                        90.0                     103.0   \n","\n","       sum_night_transactions  sum_weekday_transactions  \\\n","35191                     1.0                        13   \n","42505                    27.0                        67   \n","29718                   112.0                       295   \n","\n","       sum_weekend_transactions  sum_beginning_of_month_transactions  \\\n","35191                         7                                    7   \n","42505                        17                                   17   \n","29718                       118                                   67   \n","\n","       sum_end_of_month_transactions  mean_days_since_first_transaction  \\\n","35191                              2                           33.50000   \n","42505                             20                           42.09375   \n","29718                            134                           40.93750   \n","\n","       std_days_since_first_transaction  max_days_since_first_transaction  \\\n","35191                         26.546875                                78   \n","42505                         26.234375                                91   \n","29718                         25.781250                                91   \n","\n","       min_days_since_first_transaction  mean_days_until_last_transaction  \\\n","35191                                 0                           44.2500   \n","42505                                 0                           48.6875   \n","29718                                 0                           49.3125   \n","\n","       std_days_until_last_transaction  max_days_until_last_transaction  \\\n","35191                        26.421875                               78   \n","42505                        26.265625                               91   \n","29718                        25.750000                               91   \n","\n","       min_days_until_last_transaction  mean_time_diff_minutes  \\\n","35191                                0            135471.59375   \n","42505                                0             37634.00000   \n","29718                                0              7630.72168   \n","\n","       std_time_diff_minutes  max_time_diff_minutes  min_time_diff_minutes  \\\n","35191          196799.500000               764208.0                    0.0   \n","42505           35315.265625               134400.0                    0.0   \n","29718           22832.291016               259176.0                    0.0   \n","\n","       sum_frequent_transactions  sum_recent_activity_transactions  \\\n","35191                          1                                 0   \n","42505                          6                                 0   \n","29718                         22                                 0   \n","\n","       sum_weekday_hour_interaction  sum_weekday_merchant_interaction  \\\n","35191                            20                                20   \n","42505                            84                                84   \n","29718                           413                               413   \n","\n","       total_activity_period  day_of_week_0  day_of_week_1  day_of_week_2  \\\n","35191                     78              3              4              3   \n","42505                     91             18             16              6   \n","29718                     91             43             59             66   \n","\n","       day_of_week_3  day_of_week_4  day_of_week_5  day_of_week_6  month_7  \\\n","35191              1              2              1              6        8   \n","42505              9             18              8              9       34   \n","29718             58             69             71             47      187   \n","\n","       month_8  month_9  month_10  log_mean_time_diff  log_max_time_diff  \\\n","35191        6        6         0            4.554688           6.277344   \n","42505       26       24         0            3.300781           4.546875   \n","29718      125      101         0            1.840820           5.199219   \n","\n","       mean_transaction_amount  std_transaction_amount  \\\n","35191               726.549988              643.155884   \n","42505              1248.154785             3324.603516   \n","29718               418.677979              660.355652   \n","\n","       max_transaction_amount  min_transaction_amount  \\\n","35191                    2770                      88   \n","42505                   25000                      30   \n","29718                    7701                       4   \n","\n","       total_transaction_amount  transaction_count  unique_mcc_count  \\\n","35191                     14531                 20                 6   \n","42505                    104845                 84                12   \n","29718                    172914                413                17   \n","\n","       unique_merchant_count  \\\n","35191                      8   \n","42505                     16   \n","29718                     36   \n","\n","                                  most_frequent_merchant  \\\n","35191  13090e3a3997ae7d771b40a6bec350bfd53671f5fb62eb...   \n","42505  7a84c222bc987f8d151f368b8f0bae26d84cfecf7d53c6...   \n","29718  f2e85726dab81f89023aff42316bb194c0e5b1fb5ffd40...   \n","\n","       log_mean_transaction_amount  log_std_transaction_amount  \\\n","35191                     6.273438                    0.826660   \n","42505                     5.921875                    1.421875   \n","29718                     5.472656                    1.051758   \n","\n","       log_max_transaction_amount  log_min_transaction_amount  \\\n","35191                    7.925781                    4.488281   \n","42505                   10.125000                    3.433594   \n","29718                    8.953125                    1.609375   \n","\n","       large_transaction_count most_frequent_mcc_by_frequency  \\\n","35191                       15                           5964   \n","42505                       38                           5411   \n","29718                      145                           7995   \n","\n","                     most_frequent_merchant_by_frequency  \\\n","35191  13090e3a3997ae7d771b40a6bec350bfd53671f5fb62eb...   \n","42505  7a84c222bc987f8d151f368b8f0bae26d84cfecf7d53c6...   \n","29718  f2e85726dab81f89023aff42316bb194c0e5b1fb5ffd40...   \n","\n","       log_total_transaction_amount  amount_range  mean_vs_min_ratio  \\\n","35191                      9.585938          2682           8.256250   \n","42505                     11.562500         24970          41.605156   \n","29718                     12.062500          7697         104.669464   \n","\n","       mean_vs_max_ratio  mcc_amount_3990  mcc_amount_4111  mcc_amount_4121  \\\n","35191           0.262207                0                0                0   \n","42505           0.049927                0                0                0   \n","29718           0.054352                0                0                0   \n","\n","       mcc_amount_4131  mcc_amount_5200  mcc_amount_5300  mcc_amount_5331  \\\n","35191                0                0                0                0   \n","42505                0             1356                0                0   \n","29718              980              392                0                0   \n","\n","       mcc_amount_5411  mcc_amount_5499  mcc_amount_5541  mcc_amount_5812  \\\n","35191             1639              223                0                0   \n","42505            23470                0             5690                0   \n","29718            30657            11075                0             1830   \n","\n","       mcc_amount_5814  mcc_amount_5912  mcc_amount_5921  mcc_amount_6011  \\\n","35191                0              217                0                0   \n","42505              779             1589             1191            26100   \n","29718             2376              871             6899             6900   \n","\n","       mcc_amount_6536  mcc_amount_6538  mcc_amount_other  mcc_frequency_3990  \\\n","35191                0                0             12452                   0   \n","42505                0                0             44670                   0   \n","29718            34014            30774             46146                   0   \n","\n","       mcc_frequency_4111  mcc_frequency_4121  mcc_frequency_4131  \\\n","35191                   0                   0                   0   \n","42505                   0                   0                   0   \n","29718                   0                   0                  28   \n","\n","       mcc_frequency_5200  mcc_frequency_5300  mcc_frequency_5331  \\\n","35191                   0                   0                   0   \n","42505                   4                   0                   0   \n","29718                   1                   0                   0   \n","\n","       mcc_frequency_5411  mcc_frequency_5499  mcc_frequency_5541  \\\n","35191                   3                   1                   0   \n","42505                  49                   0                   2   \n","29718                  37                  34                   0   \n","\n","       mcc_frequency_5812  mcc_frequency_5814  mcc_frequency_5912  \\\n","35191                   0                   0                   1   \n","42505                   0                   1                   1   \n","29718                   1                  16                   3   \n","\n","       mcc_frequency_5921  mcc_frequency_6011  mcc_frequency_6536  \\\n","35191                   0                   0                   0   \n","42505                   1                   3                   0   \n","29718                  17                   6                  21   \n","\n","       mcc_frequency_6538  mcc_frequency_other  mcc_mean_amount_3990  \\\n","35191                   0                   15                   0.0   \n","42505                   0                   23                   0.0   \n","29718                  51                  198                   0.0   \n","\n","       mcc_mean_amount_4111  mcc_mean_amount_4121  mcc_mean_amount_4131  \\\n","35191                   0.0                   0.0                   0.0   \n","42505                   0.0                   0.0                   0.0   \n","29718                   0.0                   0.0                  35.0   \n","\n","       mcc_mean_amount_5200  mcc_mean_amount_5300  mcc_mean_amount_5331  \\\n","35191                   0.0                   0.0                   0.0   \n","42505                 339.0                   0.0                   0.0   \n","29718                 392.0                   0.0                   0.0   \n","\n","       mcc_mean_amount_5411  mcc_mean_amount_5499  mcc_mean_amount_5541  \\\n","35191            546.333313            223.000000                   0.0   \n","42505            478.979584              0.000000                2844.0   \n","29718            828.567566            325.735291                   0.0   \n","\n","       mcc_mean_amount_5812  mcc_mean_amount_5814  mcc_mean_amount_5912  \\\n","35191                   0.0                   0.0            217.000000   \n","42505                   0.0                 779.0           1589.000000   \n","29718                1830.0                 148.5            290.333344   \n","\n","       mcc_mean_amount_5921  mcc_mean_amount_6011  mcc_mean_amount_6536  \\\n","35191              0.000000                   0.0              0.000000   \n","42505           1191.000000                8700.0              0.000000   \n","29718            405.823517                1150.0           1619.714233   \n","\n","       mcc_mean_amount_6538  mcc_mean_amount_other  mcc_max_amount_3990  \\\n","35191              0.000000             830.133362                    0   \n","42505              0.000000            1942.173950                    0   \n","29718            603.411743             233.060608                    0   \n","\n","       mcc_max_amount_4111  mcc_max_amount_4121  mcc_max_amount_4131  \\\n","35191                    0                    0                    0   \n","42505                    0                    0                    0   \n","29718                    0                    0                   35   \n","\n","       mcc_max_amount_5200  mcc_max_amount_5300  mcc_max_amount_5331  \\\n","35191                    0                    0                    0   \n","42505                  662                    0                    0   \n","29718                  392                    0                    0   \n","\n","       mcc_max_amount_5411  mcc_max_amount_5499  mcc_max_amount_5541  \\\n","35191                  695                  223                    0   \n","42505                 1605                    0                 2967   \n","29718                 7701                  675                    0   \n","\n","       mcc_max_amount_5812  mcc_max_amount_5814  mcc_max_amount_5912  \\\n","35191                    0                    0                  217   \n","42505                    0                  779                 1589   \n","29718                 1830                  868                  643   \n","\n","       mcc_max_amount_5921  mcc_max_amount_6011  mcc_max_amount_6536  \\\n","35191                    0                    0                    0   \n","42505                 1191                25000                    0   \n","29718                 1197                 2000                 6350   \n","\n","       mcc_max_amount_6538  mcc_max_amount_other  mcc_min_amount_3990  \\\n","35191                    0                  2770                    0   \n","42505                    0                 15017                    0   \n","29718                 1118                  2052                    0   \n","\n","       mcc_min_amount_4111  mcc_min_amount_4121  mcc_min_amount_4131  \\\n","35191                    0                    0                    0   \n","42505                    0                    0                    0   \n","29718                    0                    0                   35   \n","\n","       mcc_min_amount_5200  mcc_min_amount_5300  mcc_min_amount_5331  \\\n","35191                    0                    0                    0   \n","42505                  162                    0                    0   \n","29718                  392                    0                    0   \n","\n","       mcc_min_amount_5411  mcc_min_amount_5499  mcc_min_amount_5541  \\\n","35191                  321                  223                    0   \n","42505                   50                    0                 2723   \n","29718                   25                   50                    0   \n","\n","       mcc_min_amount_5812  mcc_min_amount_5814  mcc_min_amount_5912  \\\n","35191                    0                    0                  217   \n","42505                    0                  779                 1589   \n","29718                 1830                    5                    4   \n","\n","       mcc_min_amount_5921  mcc_min_amount_6011  mcc_min_amount_6536  \\\n","35191                    0                    0                    0   \n","42505                 1191                  300                    0   \n","29718                   35                  900                 1000   \n","\n","       mcc_min_amount_6538  mcc_min_amount_other  log_mcc_amount_3990  \\\n","35191                    0                    88                  0.0   \n","42505                    0                    30                  0.0   \n","29718                   31                    80                  0.0   \n","\n","       log_mcc_amount_4111  log_mcc_amount_4121  log_mcc_amount_4131  \\\n","35191                  0.0                  0.0             0.000000   \n","42505                  0.0                  0.0             0.000000   \n","29718                  0.0                  0.0             6.886719   \n","\n","       log_mcc_amount_5200  log_mcc_amount_5300  log_mcc_amount_5331  \\\n","35191             0.000000                  0.0                  0.0   \n","42505             7.214844                  0.0                  0.0   \n","29718             5.972656                  0.0                  0.0   \n","\n","       log_mcc_amount_5411  log_mcc_amount_5499  log_mcc_amount_5541  \\\n","35191             7.402344             5.410156             0.000000   \n","42505            10.062500             0.000000             8.648438   \n","29718            10.328125             9.312500             0.000000   \n","\n","       log_mcc_amount_5812  log_mcc_amount_5814  log_mcc_amount_5912  \\\n","35191             0.000000             0.000000             5.382812   \n","42505             0.000000             6.660156             7.371094   \n","29718             7.511719             7.773438             6.769531   \n","\n","       log_mcc_amount_5921  log_mcc_amount_6011  log_mcc_amount_6536  \\\n","35191             0.000000             0.000000               0.0000   \n","42505             7.082031            10.171875               0.0000   \n","29718             8.835938             8.835938              10.4375   \n","\n","       log_mcc_amount_6538  log_mcc_amount_other  \\\n","35191             0.000000              9.429688   \n","42505             0.000000             10.710938   \n","29718            10.335938             10.742188   \n","\n","       mean_mean_transaction_amount_by_merchant  \\\n","35191                                418.605774   \n","42505                               2223.283936   \n","29718                                714.399719   \n","\n","       std_mean_transaction_amount_by_merchant  \\\n","35191                               294.654266   \n","42505                              2856.224854   \n","29718                              1098.666504   \n","\n","       mean_std_transaction_amount_by_merchant  \\\n","35191                               706.351990   \n","42505                              2105.261475   \n","29718                               362.923767   \n","\n","       std_std_transaction_amount_by_merchant  \\\n","35191                                     NaN   \n","42505                             4522.534668   \n","29718                              466.423401   \n","\n","       mean_max_transaction_amount_by_merchant  \\\n","35191                               648.375000   \n","42505                              3930.187500   \n","29718                              1119.083374   \n","\n","       std_max_transaction_amount_by_merchant  \\\n","35191                              882.450806   \n","42505                             6806.572754   \n","29718                             1622.397827   \n","\n","       mean_min_transaction_amount_by_merchant  \\\n","35191                               331.500000   \n","42505                              1257.625000   \n","29718                               515.138916   \n","\n","       std_min_transaction_amount_by_merchant  \\\n","35191                              212.919830   \n","42505                             2015.054688   \n","29718                              877.250793   \n","\n","       mean_total_transaction_amount_by_merchant  \\\n","35191                                1816.375000   \n","42505                                6552.812500   \n","29718                                4803.166504   \n","\n","       std_total_transaction_amount_by_merchant  \\\n","35191                               4166.130371   \n","42505                               9334.440430   \n","29718                               8597.563477   \n","\n","       mean_transaction_count_by_merchant  std_transaction_count_by_merchant  \\\n","35191                             2.50000                           4.242188   \n","42505                             5.25000                           6.718750   \n","29718                            11.46875                          32.000000   \n","\n","       total_transaction_count_by_merchant  mean_activity_period_by_merchant  \\\n","35191                                   20                            9.7500   \n","42505                                   84                           32.7500   \n","29718                                  413                           37.5625   \n","\n","       std_activity_period_by_merchant  mean_merchant_usage_ratio  \\\n","35191                        27.578125                   0.125000   \n","42505                        31.921875                   0.062500   \n","29718                        35.343750                   0.027771   \n","\n","       std_merchant_usage_ratio  mean_mean_time_diff_by_merchant  \\\n","35191                  0.212158                       564465.000   \n","42505                  0.079956                      1158686.500   \n","29718                  0.077515                      1273677.375   \n","\n","       std_mean_time_diff_by_merchant  mean_std_time_diff_by_merchant  \\\n","35191                             NaN                      841075.500   \n","42505                    8.259632e+05                      725046.375   \n","29718                    1.575258e+06                      998753.125   \n","\n","       std_std_time_diff_by_merchant  mean_max_time_diff_by_merchant  \\\n","35191                            NaN                       2864340.0   \n","42505                    449717.3125                       1985346.0   \n","29718                    670984.1250                       2476608.0   \n","\n","       std_max_time_diff_by_merchant  mean_min_time_diff_by_merchant  \\\n","35191                            NaN                           300.0   \n","42505                     790301.125                        612150.0   \n","29718                    1767764.125                        760296.0   \n","\n","       std_min_time_diff_by_merchant  count_low_popularity_merchants  \\\n","35191                            NaN                               8   \n","42505                     965408.375                              16   \n","29718                    1672089.625                              35   \n","\n","       count_medium_popularity_merchants  count_high_popularity_merchants  \\\n","35191                                  0                                0   \n","42505                                  0                                0   \n","29718                                  0                                1   \n","\n","       target  \n","35191       4  \n","42505       6  \n","29718       1  "],"text/html":["\n","  <div id=\"df-055cf29b-19fc-4320-beae-0b39bc90f278\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>client_num</th>\n","      <th>mean_hour_of_day</th>\n","      <th>std_hour_of_day</th>\n","      <th>mode_hour_of_day</th>\n","      <th>mean_day_of_week</th>\n","      <th>std_day_of_week</th>\n","      <th>mode_day_of_week</th>\n","      <th>mean_month</th>\n","      <th>std_month</th>\n","      <th>mode_month</th>\n","      <th>mean_time_diff</th>\n","      <th>std_time_diff</th>\n","      <th>max_time_diff</th>\n","      <th>min_time_diff</th>\n","      <th>transactions_in_last_month</th>\n","      <th>first_transaction_date</th>\n","      <th>last_transaction_date</th>\n","      <th>activity_days</th>\n","      <th>mode_time_of_day</th>\n","      <th>count_time_of_day</th>\n","      <th>sum_morning_transactions</th>\n","      <th>sum_afternoon_transactions</th>\n","      <th>sum_evening_transactions</th>\n","      <th>sum_night_transactions</th>\n","      <th>sum_weekday_transactions</th>\n","      <th>sum_weekend_transactions</th>\n","      <th>sum_beginning_of_month_transactions</th>\n","      <th>sum_end_of_month_transactions</th>\n","      <th>mean_days_since_first_transaction</th>\n","      <th>std_days_since_first_transaction</th>\n","      <th>max_days_since_first_transaction</th>\n","      <th>min_days_since_first_transaction</th>\n","      <th>mean_days_until_last_transaction</th>\n","      <th>std_days_until_last_transaction</th>\n","      <th>max_days_until_last_transaction</th>\n","      <th>min_days_until_last_transaction</th>\n","      <th>mean_time_diff_minutes</th>\n","      <th>std_time_diff_minutes</th>\n","      <th>max_time_diff_minutes</th>\n","      <th>min_time_diff_minutes</th>\n","      <th>sum_frequent_transactions</th>\n","      <th>sum_recent_activity_transactions</th>\n","      <th>sum_weekday_hour_interaction</th>\n","      <th>sum_weekday_merchant_interaction</th>\n","      <th>total_activity_period</th>\n","      <th>day_of_week_0</th>\n","      <th>day_of_week_1</th>\n","      <th>day_of_week_2</th>\n","      <th>day_of_week_3</th>\n","      <th>day_of_week_4</th>\n","      <th>day_of_week_5</th>\n","      <th>day_of_week_6</th>\n","      <th>month_7</th>\n","      <th>month_8</th>\n","      <th>month_9</th>\n","      <th>month_10</th>\n","      <th>log_mean_time_diff</th>\n","      <th>log_max_time_diff</th>\n","      <th>mean_transaction_amount</th>\n","      <th>std_transaction_amount</th>\n","      <th>max_transaction_amount</th>\n","      <th>min_transaction_amount</th>\n","      <th>total_transaction_amount</th>\n","      <th>transaction_count</th>\n","      <th>unique_mcc_count</th>\n","      <th>unique_merchant_count</th>\n","      <th>most_frequent_merchant</th>\n","      <th>log_mean_transaction_amount</th>\n","      <th>log_std_transaction_amount</th>\n","      <th>log_max_transaction_amount</th>\n","      <th>log_min_transaction_amount</th>\n","      <th>large_transaction_count</th>\n","      <th>most_frequent_mcc_by_frequency</th>\n","      <th>most_frequent_merchant_by_frequency</th>\n","      <th>log_total_transaction_amount</th>\n","      <th>amount_range</th>\n","      <th>mean_vs_min_ratio</th>\n","      <th>mean_vs_max_ratio</th>\n","      <th>mcc_amount_3990</th>\n","      <th>mcc_amount_4111</th>\n","      <th>mcc_amount_4121</th>\n","      <th>mcc_amount_4131</th>\n","      <th>mcc_amount_5200</th>\n","      <th>mcc_amount_5300</th>\n","      <th>mcc_amount_5331</th>\n","      <th>mcc_amount_5411</th>\n","      <th>mcc_amount_5499</th>\n","      <th>mcc_amount_5541</th>\n","      <th>mcc_amount_5812</th>\n","      <th>mcc_amount_5814</th>\n","      <th>mcc_amount_5912</th>\n","      <th>mcc_amount_5921</th>\n","      <th>mcc_amount_6011</th>\n","      <th>mcc_amount_6536</th>\n","      <th>mcc_amount_6538</th>\n","      <th>mcc_amount_other</th>\n","      <th>mcc_frequency_3990</th>\n","      <th>mcc_frequency_4111</th>\n","      <th>mcc_frequency_4121</th>\n","      <th>mcc_frequency_4131</th>\n","      <th>mcc_frequency_5200</th>\n","      <th>mcc_frequency_5300</th>\n","      <th>mcc_frequency_5331</th>\n","      <th>mcc_frequency_5411</th>\n","      <th>mcc_frequency_5499</th>\n","      <th>mcc_frequency_5541</th>\n","      <th>mcc_frequency_5812</th>\n","      <th>mcc_frequency_5814</th>\n","      <th>mcc_frequency_5912</th>\n","      <th>mcc_frequency_5921</th>\n","      <th>mcc_frequency_6011</th>\n","      <th>mcc_frequency_6536</th>\n","      <th>mcc_frequency_6538</th>\n","      <th>mcc_frequency_other</th>\n","      <th>mcc_mean_amount_3990</th>\n","      <th>mcc_mean_amount_4111</th>\n","      <th>mcc_mean_amount_4121</th>\n","      <th>mcc_mean_amount_4131</th>\n","      <th>mcc_mean_amount_5200</th>\n","      <th>mcc_mean_amount_5300</th>\n","      <th>mcc_mean_amount_5331</th>\n","      <th>mcc_mean_amount_5411</th>\n","      <th>mcc_mean_amount_5499</th>\n","      <th>mcc_mean_amount_5541</th>\n","      <th>mcc_mean_amount_5812</th>\n","      <th>mcc_mean_amount_5814</th>\n","      <th>mcc_mean_amount_5912</th>\n","      <th>mcc_mean_amount_5921</th>\n","      <th>mcc_mean_amount_6011</th>\n","      <th>mcc_mean_amount_6536</th>\n","      <th>mcc_mean_amount_6538</th>\n","      <th>mcc_mean_amount_other</th>\n","      <th>mcc_max_amount_3990</th>\n","      <th>mcc_max_amount_4111</th>\n","      <th>mcc_max_amount_4121</th>\n","      <th>mcc_max_amount_4131</th>\n","      <th>mcc_max_amount_5200</th>\n","      <th>mcc_max_amount_5300</th>\n","      <th>mcc_max_amount_5331</th>\n","      <th>mcc_max_amount_5411</th>\n","      <th>mcc_max_amount_5499</th>\n","      <th>mcc_max_amount_5541</th>\n","      <th>mcc_max_amount_5812</th>\n","      <th>mcc_max_amount_5814</th>\n","      <th>mcc_max_amount_5912</th>\n","      <th>mcc_max_amount_5921</th>\n","      <th>mcc_max_amount_6011</th>\n","      <th>mcc_max_amount_6536</th>\n","      <th>mcc_max_amount_6538</th>\n","      <th>mcc_max_amount_other</th>\n","      <th>mcc_min_amount_3990</th>\n","      <th>mcc_min_amount_4111</th>\n","      <th>mcc_min_amount_4121</th>\n","      <th>mcc_min_amount_4131</th>\n","      <th>mcc_min_amount_5200</th>\n","      <th>mcc_min_amount_5300</th>\n","      <th>mcc_min_amount_5331</th>\n","      <th>mcc_min_amount_5411</th>\n","      <th>mcc_min_amount_5499</th>\n","      <th>mcc_min_amount_5541</th>\n","      <th>mcc_min_amount_5812</th>\n","      <th>mcc_min_amount_5814</th>\n","      <th>mcc_min_amount_5912</th>\n","      <th>mcc_min_amount_5921</th>\n","      <th>mcc_min_amount_6011</th>\n","      <th>mcc_min_amount_6536</th>\n","      <th>mcc_min_amount_6538</th>\n","      <th>mcc_min_amount_other</th>\n","      <th>log_mcc_amount_3990</th>\n","      <th>log_mcc_amount_4111</th>\n","      <th>log_mcc_amount_4121</th>\n","      <th>log_mcc_amount_4131</th>\n","      <th>log_mcc_amount_5200</th>\n","      <th>log_mcc_amount_5300</th>\n","      <th>log_mcc_amount_5331</th>\n","      <th>log_mcc_amount_5411</th>\n","      <th>log_mcc_amount_5499</th>\n","      <th>log_mcc_amount_5541</th>\n","      <th>log_mcc_amount_5812</th>\n","      <th>log_mcc_amount_5814</th>\n","      <th>log_mcc_amount_5912</th>\n","      <th>log_mcc_amount_5921</th>\n","      <th>log_mcc_amount_6011</th>\n","      <th>log_mcc_amount_6536</th>\n","      <th>log_mcc_amount_6538</th>\n","      <th>log_mcc_amount_other</th>\n","      <th>mean_mean_transaction_amount_by_merchant</th>\n","      <th>std_mean_transaction_amount_by_merchant</th>\n","      <th>mean_std_transaction_amount_by_merchant</th>\n","      <th>std_std_transaction_amount_by_merchant</th>\n","      <th>mean_max_transaction_amount_by_merchant</th>\n","      <th>std_max_transaction_amount_by_merchant</th>\n","      <th>mean_min_transaction_amount_by_merchant</th>\n","      <th>std_min_transaction_amount_by_merchant</th>\n","      <th>mean_total_transaction_amount_by_merchant</th>\n","      <th>std_total_transaction_amount_by_merchant</th>\n","      <th>mean_transaction_count_by_merchant</th>\n","      <th>std_transaction_count_by_merchant</th>\n","      <th>total_transaction_count_by_merchant</th>\n","      <th>mean_activity_period_by_merchant</th>\n","      <th>std_activity_period_by_merchant</th>\n","      <th>mean_merchant_usage_ratio</th>\n","      <th>std_merchant_usage_ratio</th>\n","      <th>mean_mean_time_diff_by_merchant</th>\n","      <th>std_mean_time_diff_by_merchant</th>\n","      <th>mean_std_time_diff_by_merchant</th>\n","      <th>std_std_time_diff_by_merchant</th>\n","      <th>mean_max_time_diff_by_merchant</th>\n","      <th>std_max_time_diff_by_merchant</th>\n","      <th>mean_min_time_diff_by_merchant</th>\n","      <th>std_min_time_diff_by_merchant</th>\n","      <th>count_low_popularity_merchants</th>\n","      <th>count_medium_popularity_merchants</th>\n","      <th>count_high_popularity_merchants</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>35191</th>\n","      <td>54703</td>\n","      <td>11.148438</td>\n","      <td>3.855469</td>\n","      <td>8</td>\n","      <td>3.099609</td>\n","      <td>2.359375</td>\n","      <td>6</td>\n","      <td>7.898438</td>\n","      <td>0.852051</td>\n","      <td>7</td>\n","      <td>94.062500</td>\n","      <td>136.625000</td>\n","      <td>530.5000</td>\n","      <td>0.0</td>\n","      <td>6</td>\n","      <td>2024-07-07 04:47:00</td>\n","      <td>2024-09-23 14:20:00</td>\n","      <td>78</td>\n","      <td>morning</td>\n","      <td>20</td>\n","      <td>10.0</td>\n","      <td>8.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>13</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>33.50000</td>\n","      <td>26.546875</td>\n","      <td>78</td>\n","      <td>0</td>\n","      <td>44.2500</td>\n","      <td>26.421875</td>\n","      <td>78</td>\n","      <td>0</td>\n","      <td>135471.59375</td>\n","      <td>196799.500000</td>\n","      <td>764208.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>78</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>4.554688</td>\n","      <td>6.277344</td>\n","      <td>726.549988</td>\n","      <td>643.155884</td>\n","      <td>2770</td>\n","      <td>88</td>\n","      <td>14531</td>\n","      <td>20</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>13090e3a3997ae7d771b40a6bec350bfd53671f5fb62eb...</td>\n","      <td>6.273438</td>\n","      <td>0.826660</td>\n","      <td>7.925781</td>\n","      <td>4.488281</td>\n","      <td>15</td>\n","      <td>5964</td>\n","      <td>13090e3a3997ae7d771b40a6bec350bfd53671f5fb62eb...</td>\n","      <td>9.585938</td>\n","      <td>2682</td>\n","      <td>8.256250</td>\n","      <td>0.262207</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1639</td>\n","      <td>223</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>217</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>12452</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>15</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>546.333313</td>\n","      <td>223.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>217.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>830.133362</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>695</td>\n","      <td>223</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>217</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2770</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>321</td>\n","      <td>223</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>217</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>88</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>7.402344</td>\n","      <td>5.410156</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>5.382812</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>9.429688</td>\n","      <td>418.605774</td>\n","      <td>294.654266</td>\n","      <td>706.351990</td>\n","      <td>NaN</td>\n","      <td>648.375000</td>\n","      <td>882.450806</td>\n","      <td>331.500000</td>\n","      <td>212.919830</td>\n","      <td>1816.375000</td>\n","      <td>4166.130371</td>\n","      <td>2.50000</td>\n","      <td>4.242188</td>\n","      <td>20</td>\n","      <td>9.7500</td>\n","      <td>27.578125</td>\n","      <td>0.125000</td>\n","      <td>0.212158</td>\n","      <td>564465.000</td>\n","      <td>NaN</td>\n","      <td>841075.500</td>\n","      <td>NaN</td>\n","      <td>2864340.0</td>\n","      <td>NaN</td>\n","      <td>300.0</td>\n","      <td>NaN</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>42505</th>\n","      <td>66171</td>\n","      <td>15.570312</td>\n","      <td>6.882812</td>\n","      <td>21</td>\n","      <td>2.630859</td>\n","      <td>2.058594</td>\n","      <td>0</td>\n","      <td>7.882812</td>\n","      <td>0.827148</td>\n","      <td>7</td>\n","      <td>26.140625</td>\n","      <td>24.515625</td>\n","      <td>93.3125</td>\n","      <td>0.0</td>\n","      <td>24</td>\n","      <td>2024-07-01 12:19:00</td>\n","      <td>2024-09-30 23:38:00</td>\n","      <td>91</td>\n","      <td>evening</td>\n","      <td>84</td>\n","      <td>5.0</td>\n","      <td>30.0</td>\n","      <td>22.0</td>\n","      <td>27.0</td>\n","      <td>67</td>\n","      <td>17</td>\n","      <td>17</td>\n","      <td>20</td>\n","      <td>42.09375</td>\n","      <td>26.234375</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>48.6875</td>\n","      <td>26.265625</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>37634.00000</td>\n","      <td>35315.265625</td>\n","      <td>134400.0</td>\n","      <td>0.0</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>84</td>\n","      <td>84</td>\n","      <td>91</td>\n","      <td>18</td>\n","      <td>16</td>\n","      <td>6</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>8</td>\n","      <td>9</td>\n","      <td>34</td>\n","      <td>26</td>\n","      <td>24</td>\n","      <td>0</td>\n","      <td>3.300781</td>\n","      <td>4.546875</td>\n","      <td>1248.154785</td>\n","      <td>3324.603516</td>\n","      <td>25000</td>\n","      <td>30</td>\n","      <td>104845</td>\n","      <td>84</td>\n","      <td>12</td>\n","      <td>16</td>\n","      <td>7a84c222bc987f8d151f368b8f0bae26d84cfecf7d53c6...</td>\n","      <td>5.921875</td>\n","      <td>1.421875</td>\n","      <td>10.125000</td>\n","      <td>3.433594</td>\n","      <td>38</td>\n","      <td>5411</td>\n","      <td>7a84c222bc987f8d151f368b8f0bae26d84cfecf7d53c6...</td>\n","      <td>11.562500</td>\n","      <td>24970</td>\n","      <td>41.605156</td>\n","      <td>0.049927</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1356</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23470</td>\n","      <td>0</td>\n","      <td>5690</td>\n","      <td>0</td>\n","      <td>779</td>\n","      <td>1589</td>\n","      <td>1191</td>\n","      <td>26100</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>44670</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>49</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>339.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>478.979584</td>\n","      <td>0.000000</td>\n","      <td>2844.0</td>\n","      <td>0.0</td>\n","      <td>779.0</td>\n","      <td>1589.000000</td>\n","      <td>1191.000000</td>\n","      <td>8700.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1942.173950</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>662</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1605</td>\n","      <td>0</td>\n","      <td>2967</td>\n","      <td>0</td>\n","      <td>779</td>\n","      <td>1589</td>\n","      <td>1191</td>\n","      <td>25000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>15017</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>162</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>0</td>\n","      <td>2723</td>\n","      <td>0</td>\n","      <td>779</td>\n","      <td>1589</td>\n","      <td>1191</td>\n","      <td>300</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>7.214844</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>10.062500</td>\n","      <td>0.000000</td>\n","      <td>8.648438</td>\n","      <td>0.000000</td>\n","      <td>6.660156</td>\n","      <td>7.371094</td>\n","      <td>7.082031</td>\n","      <td>10.171875</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","      <td>10.710938</td>\n","      <td>2223.283936</td>\n","      <td>2856.224854</td>\n","      <td>2105.261475</td>\n","      <td>4522.534668</td>\n","      <td>3930.187500</td>\n","      <td>6806.572754</td>\n","      <td>1257.625000</td>\n","      <td>2015.054688</td>\n","      <td>6552.812500</td>\n","      <td>9334.440430</td>\n","      <td>5.25000</td>\n","      <td>6.718750</td>\n","      <td>84</td>\n","      <td>32.7500</td>\n","      <td>31.921875</td>\n","      <td>0.062500</td>\n","      <td>0.079956</td>\n","      <td>1158686.500</td>\n","      <td>8.259632e+05</td>\n","      <td>725046.375</td>\n","      <td>449717.3125</td>\n","      <td>1985346.0</td>\n","      <td>790301.125</td>\n","      <td>612150.0</td>\n","      <td>965408.375</td>\n","      <td>16</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>29718</th>\n","      <td>46170</td>\n","      <td>13.164062</td>\n","      <td>6.777344</td>\n","      <td>19</td>\n","      <td>3.093750</td>\n","      <td>1.883789</td>\n","      <td>5</td>\n","      <td>7.792969</td>\n","      <td>0.809570</td>\n","      <td>7</td>\n","      <td>5.300781</td>\n","      <td>15.859375</td>\n","      <td>180.0000</td>\n","      <td>0.0</td>\n","      <td>101</td>\n","      <td>2024-07-01 15:27:00</td>\n","      <td>2024-09-30 19:59:00</td>\n","      <td>91</td>\n","      <td>evening</td>\n","      <td>413</td>\n","      <td>108.0</td>\n","      <td>90.0</td>\n","      <td>103.0</td>\n","      <td>112.0</td>\n","      <td>295</td>\n","      <td>118</td>\n","      <td>67</td>\n","      <td>134</td>\n","      <td>40.93750</td>\n","      <td>25.781250</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>49.3125</td>\n","      <td>25.750000</td>\n","      <td>91</td>\n","      <td>0</td>\n","      <td>7630.72168</td>\n","      <td>22832.291016</td>\n","      <td>259176.0</td>\n","      <td>0.0</td>\n","      <td>22</td>\n","      <td>0</td>\n","      <td>413</td>\n","      <td>413</td>\n","      <td>91</td>\n","      <td>43</td>\n","      <td>59</td>\n","      <td>66</td>\n","      <td>58</td>\n","      <td>69</td>\n","      <td>71</td>\n","      <td>47</td>\n","      <td>187</td>\n","      <td>125</td>\n","      <td>101</td>\n","      <td>0</td>\n","      <td>1.840820</td>\n","      <td>5.199219</td>\n","      <td>418.677979</td>\n","      <td>660.355652</td>\n","      <td>7701</td>\n","      <td>4</td>\n","      <td>172914</td>\n","      <td>413</td>\n","      <td>17</td>\n","      <td>36</td>\n","      <td>f2e85726dab81f89023aff42316bb194c0e5b1fb5ffd40...</td>\n","      <td>5.472656</td>\n","      <td>1.051758</td>\n","      <td>8.953125</td>\n","      <td>1.609375</td>\n","      <td>145</td>\n","      <td>7995</td>\n","      <td>f2e85726dab81f89023aff42316bb194c0e5b1fb5ffd40...</td>\n","      <td>12.062500</td>\n","      <td>7697</td>\n","      <td>104.669464</td>\n","      <td>0.054352</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>980</td>\n","      <td>392</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30657</td>\n","      <td>11075</td>\n","      <td>0</td>\n","      <td>1830</td>\n","      <td>2376</td>\n","      <td>871</td>\n","      <td>6899</td>\n","      <td>6900</td>\n","      <td>34014</td>\n","      <td>30774</td>\n","      <td>46146</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>28</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>37</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>16</td>\n","      <td>3</td>\n","      <td>17</td>\n","      <td>6</td>\n","      <td>21</td>\n","      <td>51</td>\n","      <td>198</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>35.0</td>\n","      <td>392.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>828.567566</td>\n","      <td>325.735291</td>\n","      <td>0.0</td>\n","      <td>1830.0</td>\n","      <td>148.5</td>\n","      <td>290.333344</td>\n","      <td>405.823517</td>\n","      <td>1150.0</td>\n","      <td>1619.714233</td>\n","      <td>603.411743</td>\n","      <td>233.060608</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>392</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7701</td>\n","      <td>675</td>\n","      <td>0</td>\n","      <td>1830</td>\n","      <td>868</td>\n","      <td>643</td>\n","      <td>1197</td>\n","      <td>2000</td>\n","      <td>6350</td>\n","      <td>1118</td>\n","      <td>2052</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>392</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>25</td>\n","      <td>50</td>\n","      <td>0</td>\n","      <td>1830</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>35</td>\n","      <td>900</td>\n","      <td>1000</td>\n","      <td>31</td>\n","      <td>80</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>6.886719</td>\n","      <td>5.972656</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>10.328125</td>\n","      <td>9.312500</td>\n","      <td>0.000000</td>\n","      <td>7.511719</td>\n","      <td>7.773438</td>\n","      <td>6.769531</td>\n","      <td>8.835938</td>\n","      <td>8.835938</td>\n","      <td>10.4375</td>\n","      <td>10.335938</td>\n","      <td>10.742188</td>\n","      <td>714.399719</td>\n","      <td>1098.666504</td>\n","      <td>362.923767</td>\n","      <td>466.423401</td>\n","      <td>1119.083374</td>\n","      <td>1622.397827</td>\n","      <td>515.138916</td>\n","      <td>877.250793</td>\n","      <td>4803.166504</td>\n","      <td>8597.563477</td>\n","      <td>11.46875</td>\n","      <td>32.000000</td>\n","      <td>413</td>\n","      <td>37.5625</td>\n","      <td>35.343750</td>\n","      <td>0.027771</td>\n","      <td>0.077515</td>\n","      <td>1273677.375</td>\n","      <td>1.575258e+06</td>\n","      <td>998753.125</td>\n","      <td>670984.1250</td>\n","      <td>2476608.0</td>\n","      <td>1767764.125</td>\n","      <td>760296.0</td>\n","      <td>1672089.625</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-055cf29b-19fc-4320-beae-0b39bc90f278')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-055cf29b-19fc-4320-beae-0b39bc90f278 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-055cf29b-19fc-4320-beae-0b39bc90f278');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c3af9b1a-ea08-4581-be60-e8b1f46a50d8\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3af9b1a-ea08-4581-be60-e8b1f46a50d8')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c3af9b1a-ea08-4581-be60-e8b1f46a50d8 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":30}],"source":["print(aggregated_train.shape)\n","aggregated_train.sample(3)"]},{"cell_type":"markdown","metadata":{"id":"Cl0KHhHV1U4K"},"source":["# На основе важности признаков, создадим дополнительные фичи"]},{"cell_type":"markdown","metadata":{"id":"AARgsn6_3BlB"},"source":["Выделим переменную, где выделим самых активных пользователей карты"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LuJJPEhl3tOS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442104350,"user_tz":-180,"elapsed":215,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"1a986a8c-734c-479f-ed80-a78d1b006e05"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(10, 5))\n","sns.histplot(aggregated_train['activity_days'], bins=range(0, 91));\n","plt.xticks(rotation=90);"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"02zCeqlz4wC9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442104368,"user_tz":-180,"elapsed":13,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"a3338a70-a508-4128-e015-42a71a57b8d0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["activity_days\n","91    0.193557\n","90    0.124257\n","89    0.070543\n","88    0.050514\n","87    0.038457\n","Name: proportion, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>proportion</th>\n","    </tr>\n","    <tr>\n","      <th>activity_days</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>91</th>\n","      <td>0.193557</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>0.124257</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>0.070543</td>\n","    </tr>\n","    <tr>\n","      <th>88</th>\n","      <td>0.050514</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>0.038457</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":34}],"source":["aggregated_train['activity_days'].value_counts(normalize=True).head(5)"]},{"cell_type":"markdown","metadata":{"id":"qkE_R5hL4n40"},"source":["Видим, что большинство клиентов пользовались картой каждый день"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YBIywQK49Pj5"},"outputs":[],"source":["aggregated_train['max_activity'] = aggregated_train['activity_days'].apply(lambda x: 1 if x == 91 else 0)\n","aggregated_test['max_activity'] = aggregated_test['activity_days'].apply(lambda x: 1 if x == 91 else 0)"]},{"cell_type":"markdown","source":["Обработаем переменные к нужному типу для дальнейшей рабоыт с признаками"],"metadata":{"id":"rrkXdts70s6B"}},{"cell_type":"code","source":["aggregated_train['activity_days'] = aggregated_train['activity_days'].apply(lambda x: int(x))\n","aggregated_test['activity_days'] = aggregated_test['activity_days'].apply(lambda x: int(x))\n","\n","aggregated_train['transactions_in_last_month'] = aggregated_train['transactions_in_last_month'].apply(lambda x: int(x))\n","aggregated_test['transactions_in_last_month'] = aggregated_test['transactions_in_last_month'].apply(lambda x: int(x))\n","\n","aggregated_train['unique_mcc_count'] = aggregated_train['unique_mcc_count'].apply(lambda x: int(x))\n","aggregated_test['unique_mcc_count'] = aggregated_test['unique_mcc_count'].apply(lambda x: int(x))\n","\n","aggregated_train['mode_time_of_day'] = aggregated_train['mode_time_of_day'].astype('object')\n","aggregated_test['mode_time_of_day'] = aggregated_test['mode_time_of_day'].astype('object')"],"metadata":{"id":"meg3NJ8VjFcX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"15CQD46v1xBd"},"source":["Создадим переменную с соотношением среднего времени между транзакциями и активностью в месяце"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kMIFhp_61RnA"},"outputs":[],"source":["aggregated_train['time_diff_mean_to_activity_days_ratio'] = aggregated_train['mean_time_diff'] / (aggregated_train['activity_days'] + 1e-6) # чтобы не было деления на ноль\n","aggregated_test['time_diff_mean_to_activity_days_ratio'] = aggregated_test['mean_time_diff'] / (aggregated_test['activity_days'] + 1e-6) # чтобы не было деления на ноль"]},{"cell_type":"markdown","metadata":{"id":"PWPLDue96Mi4"},"source":["Сумма транзакций за последний месяц относительно средней суммы транзакций"]},{"cell_type":"code","source":["aggregated_train['is_last_month_sum_to_amount_mean_ratio'] = aggregated_train['transactions_in_last_month'] / (aggregated_train['mean_transaction_amount'])\n","aggregated_test['is_last_month_sum_to_amount_mean_ratio'] = aggregated_test['transactions_in_last_month'] / (aggregated_test['mean_transaction_amount'])"],"metadata":{"id":"9nplCBvwLHXV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LljAobq87K7Z"},"source":["Стандартное отклонение времени между транзакциями относительно среднего"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qh0p-D597g2N"},"outputs":[],"source":["aggregated_train['std_time_diff_to_mean_time_diff_ratio'] = aggregated_train['std_time_diff'] / aggregated_train['mean_time_diff']\n","aggregated_test['std_time_diff_to_mean_time_diff_ratio'] = aggregated_test['std_time_diff'] / aggregated_test['mean_time_diff']"]},{"cell_type":"code","source":["# отношение суммы всех транзацкий к среднему\n","aggregated_train['total_amount_to_mean_ratio'] = aggregated_train['total_transaction_amount'] / (aggregated_train['mean_transaction_amount'] + 1e-6)\n","aggregated_test['total_amount_to_mean_ratio'] = aggregated_test['total_transaction_amount'] / (aggregated_test['mean_transaction_amount'] + 1e-6)\n","\n","# отношение трат за последний месяц к тратам за все время\n","aggregated_train['last_month_sum_to_total_ratio'] = aggregated_train['transactions_in_last_month'] / (aggregated_train['total_transaction_amount'] + 1e-6)\n","aggregated_test['last_month_sum_to_total_ratio'] = aggregated_test['transactions_in_last_month'] / (aggregated_test['total_transaction_amount'] + 1e-6)\n","\n","# абсолютная разница  между часами в среднем и\n","aggregated_train['hour_diff_from_mean'] = np.abs(aggregated_train['mean_hour_of_day'] - aggregated_train['mean_hour_of_day'].mean())\n","aggregated_test['hour_diff_from_mean'] = np.abs(aggregated_test['mean_hour_of_day'] - aggregated_test['mean_hour_of_day'].mean())\n","\n","# MCC коды\n","aggregated_train['mcc_amount_5411_ratio'] = aggregated_train['mcc_amount_5411'] / aggregated_train['total_transaction_amount']\n","aggregated_test['mcc_amount_5411_ratio'] = aggregated_test['mcc_amount_5411'] / aggregated_test['total_transaction_amount']\n","\n","aggregated_train['mcc_amount_6536_ratio'] = aggregated_train['mcc_amount_6536'] / aggregated_train['total_transaction_amount']\n","aggregated_test['mcc_amount_6536_ratio'] = aggregated_test['mcc_amount_6536'] / aggregated_test['total_transaction_amount']\n","\n","# средняя сумма транзакций по колчеству уникальных MCC:\n","aggregated_train['total_amount_to_unique_mcc_count'] = aggregated_train['total_transaction_amount'] / aggregated_train['unique_mcc_count']\n","aggregated_test['total_amount_to_unique_mcc_count'] = aggregated_test['total_transaction_amount'] / aggregated_test['unique_mcc_count']"],"metadata":{"id":"ua2iXkwicGPT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442104780,"user_tz":-180,"elapsed":34,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"b4f69e61-dfcc-4029-ee64-ee4fe3b6c135"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/pandas/core/nanops.py:1487: RuntimeWarning: overflow encountered in cast\n","  return dtype.type(n)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:52: RuntimeWarning: overflow encountered in reduce\n","  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n","/usr/local/lib/python3.11/dist-packages/pandas/core/nanops.py:731: RuntimeWarning: invalid value encountered in scalar divide\n","  the_mean = the_sum / count if count > 0 else np.nan\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:52: RuntimeWarning: overflow encountered in reduce\n","  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n"]}]},{"cell_type":"markdown","source":["2-ое добавление:"],"metadata":{"id":"j2fxJA1STnXG"}},{"cell_type":"code","source":["# отношение минимальной суммы транзакции к средней\n","aggregated_train['min_to_mean_transaction_ratio'] = (\n","    aggregated_train['min_transaction_amount'] / (aggregated_train['mean_transaction_amount'] + 1e-6)\n",")\n","\n","aggregated_test['min_to_mean_transaction_ratio'] = (\n","    aggregated_test['min_transaction_amount'] / (aggregated_test['mean_transaction_amount'] + 1e-6)\n",")\n","\n","# логарифмическая сумма всех транзакций\n","aggregated_train['log_total_transaction_amount'] = np.log1p(aggregated_train['total_transaction_amount'] + 1e-6)\n","aggregated_test['log_total_transaction_amount'] = np.log1p(aggregated_test['total_transaction_amount'] + 1e-6)\n","\n","# отношение суммы транзакций к количеству уникальных MCC\n","aggregated_train['amount_per_unique_mcc'] = (\n","    aggregated_train['total_transaction_amount'] / aggregated_train['unique_mcc_count']\n",")\n","aggregated_test['amount_per_unique_mcc'] = (\n","    aggregated_test['total_transaction_amount'] / aggregated_test['unique_mcc_count']\n",")\n","\n","# частота использования категории MCC 5411\n","aggregated_test['mcc_5411_frequency'] = aggregated_test['mcc_frequency_5411'] / aggregated_test['total_transaction_amount']\n","aggregated_train['mcc_5411_frequency'] = aggregated_test['mcc_frequency_5411'] / aggregated_test['total_transaction_amount']\n","\n","# отношение среднего времени между транзакциями к активности\n","aggregated_train['mean_time_diff_to_activity_ratio'] = (\n","    aggregated_train['mean_time_diff'] / (aggregated_train['activity_days'] + 1e-6)\n",")\n","aggregated_test['mean_time_diff_to_activity_ratio'] = (\n","    aggregated_test['mean_time_diff'] / (aggregated_test['activity_days'] + 1e-6)\n",")\n","\n","# отношение суммы транзакций к количеству дней активности\n","aggregated_train['transaction_amount_per_active_day'] = (\n","    aggregated_train['total_transaction_amount'] / aggregated_train['activity_days']\n",")\n","\n","aggregated_test['transaction_amount_per_active_day'] = (\n","    aggregated_test['total_transaction_amount'] / aggregated_test['activity_days']\n",")\n","\n","# разница между максимальной и минимальной суммой транзакций\n","aggregated_train['max_to_min_transaction_ratio'] = (\n","    aggregated_train['max_transaction_amount'] / (aggregated_train['min_transaction_amount'] + 1e-6)\n",")\n","\n","aggregated_test['max_to_min_transaction_ratio'] = (\n","    aggregated_test['max_transaction_amount'] / (aggregated_test['min_transaction_amount'] + 1e-6)\n",")\n","\n","# логарифм общей суммы транзакций\n","aggregated_train['log_total_transaction_amount'] = aggregated_train['total_transaction_amount'].apply(lambda x: np.log1p(x) + 1e-6)\n","\n","# логарифм частоты MCC-транзакций\n","mcc_freq_columns = [col for col in aggregated_train.columns if col.startswith('mcc_frequency_')]\n","aggregated_train['log_mcc_frequency_sum'] = aggregated_train[mcc_freq_columns].sum(axis=1).apply(lambda x: np.log1p(x) + 1e-6)\n","aggregated_test['log_mcc_frequency_sum'] = aggregated_test[mcc_freq_columns].sum(axis=1).apply(lambda x: np.log1p(x) + 1e-6)"],"metadata":{"id":"5BL6i3bvTtIt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Сделаем еще одно добавление на основе важности признаков:"],"metadata":{"id":"INCyUTGEzLLo"}},{"cell_type":"code","source":["# обработаем три самые популярные, повседневные категории (они и самые важные) - аптеки, кафе, супермаркеты ПО ОДИНОЧКЕ\n","aggregated_train['squared_mcc_amount_5812'] = aggregated_train['mcc_amount_5812'] ** 2\n","aggregated_test['squared_mcc_amount_5812'] = aggregated_test['mcc_amount_5812'] ** 2\n","aggregated_train['squared_mcc_amount_5912'] = aggregated_train['mcc_amount_5912'] ** 2\n","aggregated_test['squared_mcc_amount_5912'] = aggregated_test['mcc_amount_5912'] ** 2\n","aggregated_train['squared_mcc_amount_5411'] = aggregated_train['mcc_amount_5411'] ** 2\n","aggregated_test['squared_mcc_amount_5411'] = aggregated_test['mcc_amount_5411'] ** 2\n","\n","# обработаем три самые популярные, повседневные категории (они и самые важные) - аптеки, кафе, супермаркеты ПОПАРНО\n","aggregated_train['mcc_amount_5812_ratio'] = aggregated_train['mcc_amount_5812'] / aggregated_train['total_transaction_amount'] + 1e-6 # mcc_amount_5812 ratio\n","aggregated_test['mcc_amount_5812_ratio'] = aggregated_test['mcc_amount_5812'] / aggregated_test['total_transaction_amount'] + 1e-6 # mcc_amount_5812\n","\n","aggregated_train['mcc_amount_5912_ratio'] = aggregated_train['mcc_amount_5912'] / aggregated_train['total_transaction_amount'] + 1e-6 # mcc_amount_5912 ratio\n","aggregated_test['mcc_amount_5912_ratio'] = aggregated_test['mcc_amount_5912'] / aggregated_test['total_transaction_amount'] + 1e-6 # mcc_amount_5912\n","\n","aggregated_train['mcc_amount_5411_ratio'] = aggregated_train['mcc_amount_5411'] / aggregated_train['total_transaction_amount'] + 1e-6 # mcc_amount_5411 ratio\n","aggregated_test['mcc_amount_5411_ratio'] = aggregated_test['mcc_amount_5411'] / aggregated_test['total_transaction_amount'] + 1e-6 # mcc_amount_5411 ratio\n","\n","\n","aggregated_train['mcc_amount_5812_plus_5912'] = aggregated_train['mcc_amount_5812'] + aggregated_train['mcc_amount_5912'] # mcc_amount_5812+5912\n","aggregated_test['mcc_amount_5812_plus_5912'] = aggregated_test['mcc_amount_5812'] + aggregated_test['mcc_amount_5912'] # mcc_amount_5812+5912\n","aggregated_train['log_amount_5812_plus_5912'] = np.log1p(aggregated_train['mcc_amount_5812'] + aggregated_train['mcc_amount_5912'] + 1e-6)\n","aggregated_test['log_amount_5812_plus_5912'] = np.log1p(aggregated_test['mcc_amount_5812'] + aggregated_test['mcc_amount_5912'] + 1e-6)\n","\n","\n","aggregated_train['mcc_amount_5812_plus_5411'] = aggregated_train['mcc_amount_5812'] + aggregated_train['mcc_amount_5411'] # mcc_amount_5812+5411\n","aggregated_test['mcc_amount_5812_plus_5411'] = aggregated_test['mcc_amount_5812'] + aggregated_test['mcc_amount_5411'] # mcc_amount_5812+5411\n","aggregated_train['log_amount_5812_plus_5411'] = np.log1p(aggregated_train['mcc_amount_5812'] + aggregated_train['mcc_amount_5411'] + 1e-6)\n","aggregated_test['log_amount_5812_plus_5411'] = np.log1p(aggregated_test['mcc_amount_5812'] + aggregated_test['mcc_amount_5411'] + 1e-6)\n","\n","\n","aggregated_train['mcc_amount_5912_plus_5411'] = aggregated_train['mcc_amount_5912'] + aggregated_train['mcc_amount_5411'] # mcc_amount_5912+5411\n","aggregated_test['mcc_amount_5912_plus_5411'] = aggregated_test['mcc_amount_5912'] + aggregated_test['mcc_amount_5411'] # mcc_amount_5912+5411\n","aggregated_train['log_amount_5912_plus_5411'] = np.log1p(aggregated_train['mcc_amount_5912'] + aggregated_train['mcc_amount_5411'] + 1e-6)\n","aggregated_test['log_amount_5912_plus_5411'] = np.log1p(aggregated_test['mcc_amount_5912'] + aggregated_test['mcc_amount_5411'] + 1e-6)\n","\n","\n","aggregated_train['mcc_amount_5812_minus_5912'] = aggregated_train['mcc_amount_5812'] - aggregated_train['mcc_amount_5912'] # mcc_amount_5812-5912\n","aggregated_test['mcc_amount_5812_minus_5912'] = aggregated_test['mcc_amount_5812'] - aggregated_test['mcc_amount_5912'] # mcc_amount_5812-5912\n","aggregated_train['mcc_amount_5812_minus_5411'] = aggregated_train['mcc_amount_5812'] - aggregated_train['mcc_amount_5411'] # mcc_amount_5812-5411\n","aggregated_test['mcc_amount_5812_minus_5411'] = aggregated_test['mcc_amount_5812'] - aggregated_test['mcc_amount_5411'] # mcc_amount_5812-5411\n","aggregated_train['mcc_amount_5912_minus_5411'] = aggregated_train['mcc_amount_5912'] - aggregated_train['mcc_amount_5411'] # mcc_amount_5912-5411\n","aggregated_test['mcc_amount_5912_minus_5411'] = aggregated_test['mcc_amount_5912'] - aggregated_test['mcc_amount_5411'] # mcc_amount_5912-5411\n","\n","aggregated_train['mcc_amount_5812_divide_5912'] = aggregated_train['mcc_amount_5812'] / aggregated_train['mcc_amount_5912'] + 1e-6 # mcc_amount_5812/5912\n","aggregated_test['mcc_amount_5812_divide_5912'] = aggregated_test['mcc_amount_5812'] / aggregated_test['mcc_amount_5912'] + 1e-6 # mcc_amount_5812/5912\n","aggregated_train['mcc_amount_5812_divide_5411'] = aggregated_train['mcc_amount_5812'] / aggregated_train['mcc_amount_5411'] + 1e-6 # mcc_amount_5812/5411\n","aggregated_test['mcc_amount_5812_divide_5411'] = aggregated_test['mcc_amount_5812'] / aggregated_test['mcc_amount_5411'] + 1e-6 # mcc_amount_5812/5411\n","aggregated_train['mcc_amount_5912_divide_5411'] = aggregated_train['mcc_amount_5912'] / aggregated_train['mcc_amount_5411'] + 1e-6 # mcc_amount_5912/5411\n","aggregated_test['mcc_amount_5912_divide_5411'] = aggregated_test['mcc_amount_5912'] / aggregated_test['mcc_amount_5411'] + 1e-6 # mcc_amount_5912/5411\n","\n","aggregated_train['mcc_amount_5812_multiply_5912'] = aggregated_train['mcc_amount_5812'] * aggregated_train['mcc_amount_5912'] # mcc_amount_5812*5912\n","aggregated_test['mcc_amount_5812_multiply_5912'] = aggregated_test['mcc_amount_5812'] * aggregated_test['mcc_amount_5912'] # mcc_amount_5812*5912\n","aggregated_train['mcc_amount_5812_multiply_5411'] = aggregated_train['mcc_amount_5812'] * aggregated_train['mcc_amount_5411'] # mcc_amount_5812*5411\n","aggregated_test['mcc_amount_5812_multiply_5411'] = aggregated_test['mcc_amount_5812'] * aggregated_test['mcc_amount_5411'] # mcc_amount_5812*5411\n","aggregated_train['mcc_amount_5912_multiply_5411'] = aggregated_train['mcc_amount_5912'] * aggregated_train['mcc_amount_5411'] # mcc_amount_5912*5411\n","aggregated_test['mcc_amount_5912_multiply_5411'] = aggregated_test['mcc_amount_5912'] * aggregated_test['mcc_amount_5411'] # mcc_amount_5912*5411\n","\n","\n","aggregated_train['mcc_amount_5812_minus_mean_min_transaction_amount_by_merchant'] = aggregated_train['mcc_amount_5812'] - aggregated_train['mean_min_transaction_amount_by_merchant']\n","aggregated_test['mcc_amount_5812_minus_mean_min_transaction_amount_by_merchant'] = aggregated_test['mcc_amount_5812'] - aggregated_test['mean_min_transaction_amount_by_merchant']\n","aggregated_train['mcc_amount_5912_minus_mean_min_transaction_amount_by_merchant'] = aggregated_train['mcc_amount_5912'] - aggregated_train['mean_min_transaction_amount_by_merchant']\n","aggregated_test['mcc_amount_5912_minus_mean_min_transaction_amount_by_merchant'] = aggregated_test['mcc_amount_5912'] - aggregated_test['mean_min_transaction_amount_by_merchant']\n","aggregated_train['mcc_amount_5411_minus_mean_min_transaction_amount_by_merchant'] = aggregated_train['mcc_amount_5411'] - aggregated_train['mean_min_transaction_amount_by_merchant']\n","aggregated_test['mcc_amount_5411_minus_mean_min_transaction_amount_by_merchant'] = aggregated_test['mcc_amount_5411'] - aggregated_test['mean_min_transaction_amount_by_merchant']\n","\n","# обработаем три самые популярные, повседневные категории (они и самые важные) - аптеки, кафе, супермаркеты\n","aggregated_train['mcc_amount_5812_plus_5912_plus_5411'] = aggregated_train['mcc_amount_5812'] + aggregated_train['mcc_amount_5912'] + aggregated_train['mcc_amount_5411'] # mcc_amount_5812+5912+5411\n","aggregated_test['mcc_amount_5812_plus_5912_plus_5411'] = aggregated_test['mcc_amount_5812'] + aggregated_test['mcc_amount_5912'] + aggregated_test['mcc_amount_5411'] # mcc_amount_5812+5912+5411\n","\n","aggregated_train['log_mcc_amount_5812_plus_5912_plus_5411'] = np.log1p(aggregated_train['mcc_amount_5812'] + aggregated_train['mcc_amount_5912'] + aggregated_train['mcc_amount_5411'] + 1e-6) # mcc_amount_5812+5912+5411\n","aggregated_test['log_mcc_amount_5812_plus_5912_plus_5411'] = np.log1p(aggregated_test['mcc_amount_5812'] + aggregated_test['mcc_amount_5912'] + aggregated_test['mcc_amount_5411'] + 1e-6) # mcc_amount_5812+5912+5411\n","\n","aggregated_train['mean_mcc_amount_5812_plus_5912_plus_5411'] = (aggregated_train['mcc_amount_5812'] + aggregated_train['mcc_amount_5912'] + aggregated_train['mcc_amount_5411']) / 3 # среднее из трех самых важных (повседневных категорий)\n","aggregated_test['mean_mcc_amount_5812_plus_5912_plus_5411'] = (aggregated_test['mcc_amount_5812'] + aggregated_test['mcc_amount_5912'] + aggregated_test['mcc_amount_5411']) / 3 # среднее из трех самых важных (повседневных категорий)\n","\n","# обработаем другие важные признаки связанные с транзакциями\n","aggregated_train['total_transaction_amount_divide_mean_min_transaction_amount_by_merchant'] = aggregated_train['total_transaction_amount'] / aggregated_train['mean_min_transaction_amount_by_merchant'] + 1e-6 # total_transaction_amount/mean_min_transaction_amount_by_merchant\n","aggregated_test['total_transaction_amount_divide_mean_min_transaction_amount_by_merchant'] = aggregated_test['total_transaction_amount'] / aggregated_test['mean_min_transaction_amount_by_merchant'] + 1e-6 # total_transaction_amount/mean_min_transaction_amount_by_merchant\n","\n","aggregated_train['total_transaction_amount_multiply_mean_min_transaction_amount_by_merchant'] = aggregated_train['total_transaction_amount'] * aggregated_train['mean_min_transaction_amount_by_merchant'] + 1e-6 # total_transaction_amount/mean_min_transaction_amount_by_merchant\n","aggregated_test['total_transaction_amount_multiply_mean_min_transaction_amount_by_merchant'] = aggregated_test['total_transaction_amount'] * aggregated_test['mean_min_transaction_amount_by_merchant'] + 1e-6 # total_transaction_amount/mean_min_transaction_amount_by_merchant\n","\n","# сгенерируем фичи с временем\n","aggregated_train['mean_time_between_transactions'] = aggregated_train['std_time_diff_to_mean_time_diff_ratio'] * aggregated_train['mean_time_diff']\n","aggregated_test['mean_time_between_transactions'] = aggregated_test['std_time_diff_to_mean_time_diff_ratio'] * aggregated_test['mean_time_diff']"],"metadata":{"id":"xFKcRJDUH475"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# пользуется ли клиент услугами mcc 3990? (Экосистема Яндекс)\n","aggregated_train['mcc_frequency_3990'].value_counts().head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_tYkKbRj717H","executionInfo":{"status":"ok","timestamp":1748442104993,"user_tz":-180,"elapsed":69,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"5f220588-b234-4003-fd73-1dbc473fdb4d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["mcc_frequency_3990\n","0    50197\n","1     2520\n","2     1916\n","3     1569\n","4     1183\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>mcc_frequency_3990</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>50197</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2520</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1916</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1569</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1183</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["aggregated_train['used_mcc_frequency_3990'] = aggregated_train['mcc_frequency_3990'].apply(lambda x: 0 if x == 0 else 1)\n","aggregated_test['used_mcc_frequency_3990'] = aggregated_test['mcc_frequency_3990'].apply(lambda x: 0 if x == 0 else 1)"],"metadata":{"id":"sIPf9VSf9Gzu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# пользуется ли клиент услугами mcc 6536? (переводы)\n","aggregated_train['mcc_frequency_6536'].value_counts().head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rSp0Dldw-eb-","executionInfo":{"status":"ok","timestamp":1748442105034,"user_tz":-180,"elapsed":32,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"fdf8f76c-0f21-4892-8af5-1f8beb40b898"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["mcc_frequency_6536\n","0    57493\n","1     4703\n","2     1914\n","3     1209\n","4      734\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>mcc_frequency_6536</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>57493</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4703</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1914</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1209</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>734</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["aggregated_train['used_mcc_frequency_6536'] = aggregated_train['mcc_frequency_6536'].apply(lambda x: 0 if x == 0 else 1)\n","aggregated_test['used_mcc_frequency_6536'] = aggregated_test['mcc_frequency_6536'].apply(lambda x: 0 if x == 0 else 1)"],"metadata":{"id":"jLfepVLL-zIR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YChiY4cu76yg"},"source":["#### Мусорные фичи:\n","Биннинг времени между транзакциями"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8sYo33bt8PX4"},"outputs":[],"source":["# plt.figure(figsize=(20, 5))\n","# sns.histplot(aggregated_train['time_diff_mean']);"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1RwAyen72SP"},"outputs":[],"source":["# bins = [0, 10, 30, 60, np.inf]\n","# labels = ['very_low', 'low', 'medium', 'high']\n","\n","# aggregated_train['time_diff_mean_binned'] = pd.cut(aggregated_train['time_diff_mean'], bins=bins, labels=labels)\n","# aggregated_test['time_diff_mean_binned'] = pd.cut(aggregated_test['time_diff_mean'], bins=bins, labels=labels)"]},{"cell_type":"markdown","metadata":{"id":"Uk_VqZEs-Cz6"},"source":["Биннинг суммы транзакций"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"47ojywaqAdIm"},"outputs":[],"source":["# aggregated_train['amount_mean'] = aggregated_train['amount_mean'].astype(int)\n","# aggregated_test['amount_mean'] = aggregated_test['amount_mean'].astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"df5uQ1U2-yKZ"},"outputs":[],"source":["# bins = [0, 1000, 5000, 10000, np.inf]\n","# labels = ['low', 'medium', 'high', 'very_high']\n","\n","# aggregated_train['amount_mean_binned'] = pd.cut(aggregated_train['amount_mean'], bins=bins, labels=labels)\n","# aggregated_test['amount_mean_binned'] = pd.cut(aggregated_test['amount_mean'], bins=bins, labels=labels)"]},{"cell_type":"code","source":["# aggregated_train.isna().value_counts()"],"metadata":{"id":"5EFNFr97YY5B"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MfSAA1bjCt-x"},"source":["# Структурируем переменные по группам и отфильтруем датасет"]},{"cell_type":"code","source":["def process_datetime_features(df):\n","    \"\"\"\n","    преобразуем first_transaction_date и last_transaction_date с типом данных datetime64[us]\n","    в числовые форматы для того, чтобы бустинги могли их обработать\n","    \"\"\"\n","    # преобразование first_transaction_date в Unix timestamp (количество секунд с 1970-01-01)\n","    if 'first_transaction_date' in df.columns:\n","        df['first_transaction_date'] = pd.to_datetime(df['first_transaction_date'])\n","        df['first_transaction_timestamp'] = (df['first_transaction_date'].astype('int64')).astype('float32') #  // 10**9\n","\n","    # преобразование last_transaction_date в Unix timestamp\n","    if 'last_transaction_date' in df.columns:\n","        df['last_transaction_date'] = pd.to_datetime(df['last_transaction_date'])\n","        df['last_transaction_timestamp'] = (df['last_transaction_date'].astype('int64')).astype('float32')\n","\n","    # дополнительно можно добавить разницу между датами\n","    if 'first_transaction_date' in df.columns and 'last_transaction_date' in df.columns:\n","        df['transaction_period'] = (df['last_transaction_date'] - df['first_transaction_date']).dt.days\n","\n","    #также, добавим дополнительные временные фичи\n","    df['time_since_last_transaction'] = (pd.Timestamp.now() - pd.to_datetime(df['last_transaction_timestamp'], unit='us')).dt.total_seconds()\n","\n","    # df['last_transaction_day_of_week'] = pd.to_datetime(df['last_transaction_timestamp'], unit='us').dt.dayofweek # неинформативен\n","\n","    df['last_transaction_month'] = pd.to_datetime(df['last_transaction_timestamp'], unit='us').dt.month\n","\n","    return df\n","\n","# Пример использования\n","aggregated_train = process_datetime_features(aggregated_train)\n","aggregated_test = process_datetime_features(aggregated_test)"],"metadata":{"id":"1RE-GV7upaUX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def identify_categorical_columns(df, targets=['target'], unique_threshold=24): # unique_threshold=0.01 - если долями\n","    \"\"\"\n","    Определяем категориальные признаки в датафрейме и добавляет их названия в массив cat_cols\n","    \"\"\"\n","    cat_cols = []\n","    total_count = len(df)\n","\n","    for col in df.columns:\n","        # проверка типа данных\n","        if df[col].dtype.name in ['object', 'category', 'bool'] and col not in targets: # ЧТОБЫ ПОТОМ КОРРЕКТНО ОБРАБАТЫВАТЬ КАТЕГОРИАЛЬНЫЕ ПРИЗНАКИ\n","            cat_cols.append(col)\n","        else:\n","            # проверка количества уникальных значений\n","            unique_count = df[col].nunique()\n","            if 0 < unique_threshold < 1: # если в unique_threshold передаем порог в качестве доли\n","                if df[col].dtype.name not in ['float8', 'float16', 'float32', 'float64'] and (unique_count / total_count < unique_threshold) and col not in targets:\n","                    cat_cols.append(col)\n","            else:\n","                if df[col].dtype.name not in ['float8', 'float16', 'float32', 'float64'] and (unique_count <= unique_threshold) and col not in targets:\n","                    cat_cols.append(col)\n","    return cat_cols"],"metadata":{"id":"NGhTlK3qVKRG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# фильтрация признаков (столбцов) с числом уникальных значений меньше 30\n","aggregated_train.loc[:, aggregated_train.nunique() < 24].nunique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ar4Q2RaFLKV2","executionInfo":{"status":"ok","timestamp":1748442105572,"user_tz":-180,"elapsed":241,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"49e14f6c-7828-4f8e-cfeb-5fc74e1a3938"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["mode_day_of_week                     7\n","mode_month                           3\n","min_time_diff                        1\n","mode_time_of_day                     4\n","min_days_since_first_transaction     1\n","min_days_until_last_transaction      1\n","min_time_diff_minutes                1\n","month_10                             2\n","count_medium_popularity_merchants    8\n","count_high_popularity_merchants      5\n","target                               7\n","max_activity                         2\n","hour_diff_from_mean                  0\n","used_mcc_frequency_3990              2\n","used_mcc_frequency_6536              2\n","last_transaction_month               3\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>mode_day_of_week</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>mode_month</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>min_time_diff</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>mode_time_of_day</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>min_days_since_first_transaction</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>min_days_until_last_transaction</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>min_time_diff_minutes</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>month_10</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>count_medium_popularity_merchants</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>count_high_popularity_merchants</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>target</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>max_activity</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>hour_diff_from_mean</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>used_mcc_frequency_3990</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>used_mcc_frequency_6536</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>last_transaction_month</th>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["low_imp_features = ['mcc_min_amount_other',\n"," 'mean_mean_time_diff_by_merchant',\n"," 'mcc_max_amount_5411',\n"," 'mean_time_diff',\n"," 'max_time_diff',\n"," 'first_transaction_timestamp',\n"," 'mode_hour_of_day',\n"," 'mcc_frequency_5812',\n"," 'mean_max_time_diff_by_merchant',\n"," 'mcc_min_amount_5912',\n"," 'mcc_min_amount_3990',\n"," 'mcc_mean_amount_5812',\n"," 'mcc_frequency_5814',\n"," 'log_max_time_diff',\n"," 'mcc_mean_amount_3990',\n"," 'mcc_frequency_5200',\n"," 'mcc_amount_5814',\n"," 'mcc_max_amount_6011',\n"," 'mcc_max_amount_6538',\n"," 'most_frequent_mcc_by_frequency',\n"," 'mcc_frequency_6011',\n"," 'mcc_amount_5921',\n"," 'std_max_time_diff_by_merchant',\n"," 'mean_std_transaction_amount_by_merchant',\n"," 'mcc_min_amount_6011',\n"," 'mcc_mean_amount_5300',\n"," 'mean_day_of_week',\n"," 'mcc_amount_5200',\n"," 'std_total_transaction_amount_by_merchant',\n"," 'mcc_min_amount_5541',\n"," 'log_mean_time_diff',\n"," 'mcc_amount_other',\n"," 'mcc_amount_4131',\n"," 'mean_std_time_diff_by_merchant',\n"," 'mcc_mean_amount_4111',\n"," 'std_mean_time_diff_by_merchant',\n"," 'mcc_amount_5499',\n"," 'mcc_min_amount_5812',\n"," 'mcc_frequency_4131',\n"," 'max_activity',\n"," 'last_month_sum_to_total_ratio',\n"," 'mean_total_transaction_amount_by_merchant',\n"," 'std_std_transaction_amount_by_merchant',\n"," 'std_max_transaction_amount_by_merchant',\n"," 'mode_day_of_week',\n"," 'mode_month',\n"," 'mcc_min_amount_5200',\n"," 'log_mcc_amount_5814',\n"," 'mcc_max_amount_5331',\n"," 'mcc_mean_amount_5200',\n"," 'mcc_min_amount_5921',\n"," 'log_mcc_amount_4111',\n"," 'mean_vs_max_ratio',\n"," 'mcc_frequency_5411',\n"," 'std_transaction_count_by_merchant',\n"," 'mcc_amount_5411_ratio',\n"," 'mean_transaction_count_by_merchant',\n"," 'month_8',\n"," 'mcc_amount_5541',\n"," 'mcc_max_amount_5499',\n"," 'day_of_week_5',\n"," 'mcc_min_amount_5300',\n"," 'day_of_week_4',\n"," 'mcc_mean_amount_4121',\n"," 'mcc_min_amount_4131',\n"," 'day_of_week_2',\n"," 'mcc_amount_6011',\n"," 'mcc_frequency_other',\n"," 'mcc_min_amount_5331',\n"," 'day_of_week_6',\n"," 'std_min_transaction_amount_by_merchant',\n"," 'unique_merchant_count',\n"," 'mcc_mean_amount_5331',\n"," 'mcc_mean_amount_5921',\n"," 'std_mean_transaction_amount_by_merchant',\n"," 'mcc_frequency_5921',\n"," 'mcc_frequency_5912',\n"," 'mcc_amount_5331',\n"," 'mcc_mean_amount_4131',\n"," 'std_transaction_amount',\n"," 'max_transaction_amount',\n"," 'log_mcc_amount_6538',\n"," 'mcc_max_amount_5921',\n"," 'mcc_max_amount_4111',\n"," 'time_diff_mean_to_activity_days_ratio',\n"," 'mcc_mean_amount_6538',\n"," 'mcc_frequency_5541',\n"," 'mcc_amount_4111',\n"," 'std_std_time_diff_by_merchant',\n"," 'month_7',\n"," 'std_min_time_diff_by_merchant',\n"," 'log_mcc_amount_5541',\n"," 'day_of_week_3',\n"," 'log_mcc_amount_5921',\n"," 'log_mcc_amount_4131',\n"," 'day_of_week_0',\n"," 'count_low_popularity_merchants',\n"," 'mcc_frequency_4111',\n"," 'mcc_max_amount_5300',\n"," 'mcc_mean_amount_6536',\n"," 'log_mcc_amount_3990',\n"," 'mcc_frequency_5300',\n"," 'unique_mcc_count',\n"," 'mcc_max_amount_4121',\n"," 'amount_range',\n"," 'log_mcc_amount_6011',\n"," 'log_mcc_amount_5300',\n"," 'day_of_week_1',\n"," 'transaction_count',\n"," 'mode_time_of_day',\n"," 'count_medium_popularity_merchants',\n"," 'mcc_max_amount_other',\n"," 'mcc_frequency_6538',\n"," 'count_high_popularity_merchants',\n"," 'log_mcc_amount_5200',\n"," 'mcc_min_amount_4121',\n"," 'mcc_max_amount_4131',\n"," 'mcc_amount_4121',\n"," 'mcc_amount_6538',\n"," 'mcc_amount_5300',\n"," 'mcc_frequency_5331',\n"," 'month_9',\n"," 'mean_merchant_usage_ratio',\n"," 'mcc_frequency_4121',\n"," 'mcc_amount_6536',\n"," 'most_frequent_merchant_by_frequency',\n"," 'month_10',\n"," 'min_time_diff',\n"," 'most_frequent_merchant',\n"," 'mcc_max_amount_6536',\n"," 'log_mcc_amount_4121',\n"," 'mean_max_transaction_amount_by_merchant',\n"," 'log_mcc_amount_6536',\n"," 'log_mcc_amount_5331',\n"," 'log_mcc_amount_5499',\n"," 'total_transaction_count_by_merchant',\n"," 'total_amount_to_mean_ratio',\n"," 'hour_diff_from_mean',\n"," 'transaction_period',\n"," 'is_last_month_sum_to_amount_mean_ratio',\n"," 'mcc_max_amount_5814',\n"," 'mean_vs_min_ratio',\n"," 'mcc_max_amount_5812',\n"," 'log_mcc_amount_5411',\n"," 'max_time_diff_minutes',\n"," 'mcc_max_amount_5541',\n"," 'mean_month',\n"," 'mcc_mean_amount_5814',\n"," 'mcc_mean_amount_5912',\n"," 'log_max_transaction_amount',\n"," 'mean_days_until_last_transaction',\n"," 'sum_morning_transactions',\n"," 'transactions_in_last_month',\n"," 'sum_beginning_of_month_transactions',\n"," 'max_to_min_transaction_ratio',\n"," 'sum_end_of_month_transactions',\n"," 'mcc_max_amount_5912',\n"," 'std_days_since_first_transaction',\n"," 'activity_days',\n"," 'log_min_transaction_amount',\n"," 'sum_afternoon_transactions',\n"," 'transaction_amount_per_active_day',\n"," 'mcc_max_amount_3990',\n"," 'sum_weekend_transactions',\n"," 'std_days_until_last_transaction',\n"," 'mcc_amount_3990',\n"," 'mean_time_diff_minutes',\n"," 'amount_per_unique_mcc',\n"," 'mcc_min_amount_6536',\n"," 'log_total_transaction_amount',\n"," 'std_time_diff',\n"," 'mean_time_diff_to_activity_ratio',\n"," 'sum_weekday_transactions',\n"," 'mcc_amount_6536_ratio',\n"," 'max_days_until_last_transaction',\n"," 'std_time_diff_minutes',\n"," 'log_mcc_frequency_sum',\n"," 'total_activity_period',\n"," 'count_time_of_day',\n"," 'max_days_since_first_transaction',\n"," 'sum_weekday_merchant_interaction',\n"," 'sum_weekday_hour_interaction',\n"," 'sum_recent_activity_transactions',\n"," 'min_days_since_first_transaction',\n"," 'min_days_until_last_transaction',\n"," 'min_time_diff_minutes',\n"," 'mcc_amount_5812_minus_5912',\n"," 'mcc_amount_5812',\n"," 'mean_transaction_amount',\n"," 'total_transaction_amount_divide_mean_min_transaction_amount_by_merchant',\n"," 'mean_hour_of_day',\n"," 'log_amount_5812_plus_5411',\n"," 'mcc_min_amount_5814',\n"," 'mcc_mean_amount_5499',\n"," 'mcc_amount_5812_plus_5411',\n"," 'mcc_mean_amount_5411',\n"," 'std_day_of_week',\n"," 'std_merchant_usage_ratio',\n"," 'sum_frequent_transactions',\n"," 'squared_mcc_amount_5411',\n"," 'log_std_transaction_amount',\n"," 'min_to_mean_transaction_ratio',\n"," 'std_activity_period_by_merchant',\n"," 'mcc_amount_5912_ratio',\n"," 'log_amount_5912_plus_5411',\n"," 'log_amount_5812_plus_5912',\n"," 'last_transaction_day_of_week',\n"," 'mcc_amount_5912_plus_5411',\n"," 'mcc_amount_5912_minus_mean_min_transaction_amount_by_merchant',\n"," 'total_transaction_amount',\n"," 'log_mcc_amount_5812_plus_5912_plus_5411',\n"," 'mcc_amount_5812_divide_5411',\n"," 'mcc_amount_5812_multiply_5912',\n"," 'mcc_min_amount_5411',\n"," 'mcc_min_amount_5499',\n"," 'log_mcc_amount_5812',\n"," 'sum_night_transactions',\n"," 'mean_mcc_amount_5812_plus_5912_plus_5411',\n"," 'mcc_amount_5812_ratio',\n"," 'mcc_5411_frequency',\n"," 'mcc_amount_5812_minus_mean_min_transaction_amount_by_merchant',\n"," 'mcc_amount_5411_minus_mean_min_transaction_amount_by_merchant',\n"," 'log_mcc_amount_5912',\n"," 'used_mcc_frequency_3990',\n"," 'mcc_amount_5912_divide_5411',\n"," 'mcc_amount_5812_minus_5411',\n"," 'squared_mcc_amount_5812',\n"," 'mcc_amount_5812_divide_5912',\n"," 'mcc_amount_5912_multiply_5411',\n"," 'mcc_amount_5411',\n"," 'mcc_amount_5912_minus_5411',\n"," 'squared_mcc_amount_5912',\n"," 'mcc_amount_5812_multiply_5411',\n"," 'mcc_amount_5912',\n"," 'last_transaction_month',\n"," 'std_month',\n"," 'sum_evening_transactions',\n"," 'total_transaction_amount_multiply_mean_min_transaction_amount_by_merchant',\n"," 'mcc_mean_amount_other',\n"," 'used_mcc_frequency_6536'] # НЕ ОБНОВИ СЛУЧАЙНО!!!"],"metadata":{"id":"JaagN_Li3hOG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# удалим ненужные датасеты и освободим память\n","del train\n","del test\n","\n","# оптимизируем хранение датасета по памяти\n","# aggregated_train = reduce_mem_usage(aggregated_train, cat_cols=cat_cols)\n","# aggregated_test = reduce_mem_usage(aggregated_test, cat_cols=cat_cols)"],"metadata":{"id":"NJmPXSbY9Xrq"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":686,"status":"ok","timestamp":1748442106326,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"},"user_tz":-180},"id":"qXWWp1G6WzsX","outputId":"ca42ef46-02fc-4f23-d163-4c278c26b576"},"outputs":[{"output_type":"stream","name":"stdout","text":["---------------------------------------\n","cols2drop: ['client_num', 'mcc_min_amount_other', 'mean_mean_time_diff_by_merchant', 'mcc_max_amount_5411', 'mean_time_diff', 'max_time_diff', 'first_transaction_timestamp', 'mode_hour_of_day', 'mcc_frequency_5812', 'mean_max_time_diff_by_merchant', 'mcc_min_amount_5912', 'mcc_min_amount_3990', 'mcc_mean_amount_5812', 'mcc_frequency_5814', 'log_max_time_diff', 'mcc_mean_amount_3990', 'mcc_frequency_5200', 'mcc_amount_5814', 'mcc_max_amount_6011', 'mcc_max_amount_6538', 'most_frequent_mcc_by_frequency', 'mcc_frequency_6011', 'mcc_amount_5921', 'std_max_time_diff_by_merchant', 'mean_std_transaction_amount_by_merchant', 'mcc_min_amount_6011', 'mcc_mean_amount_5300', 'mean_day_of_week', 'mcc_amount_5200', 'std_total_transaction_amount_by_merchant', 'mcc_min_amount_5541', 'log_mean_time_diff', 'mcc_amount_other', 'mcc_amount_4131', 'mean_std_time_diff_by_merchant', 'mcc_mean_amount_4111', 'std_mean_time_diff_by_merchant', 'mcc_amount_5499', 'mcc_min_amount_5812', 'mcc_frequency_4131', 'max_activity', 'last_month_sum_to_total_ratio', 'mean_total_transaction_amount_by_merchant', 'std_std_transaction_amount_by_merchant', 'std_max_transaction_amount_by_merchant', 'mode_day_of_week', 'mode_month', 'mcc_min_amount_5200', 'log_mcc_amount_5814', 'mcc_max_amount_5331', 'mcc_mean_amount_5200', 'mcc_min_amount_5921', 'log_mcc_amount_4111', 'mean_vs_max_ratio', 'mcc_frequency_5411', 'std_transaction_count_by_merchant', 'mcc_amount_5411_ratio', 'mean_transaction_count_by_merchant', 'month_8', 'mcc_amount_5541', 'mcc_max_amount_5499', 'day_of_week_5', 'mcc_min_amount_5300', 'day_of_week_4', 'mcc_mean_amount_4121', 'mcc_min_amount_4131', 'day_of_week_2', 'mcc_amount_6011', 'mcc_frequency_other', 'mcc_min_amount_5331', 'day_of_week_6', 'std_min_transaction_amount_by_merchant', 'unique_merchant_count', 'mcc_mean_amount_5331', 'mcc_mean_amount_5921', 'std_mean_transaction_amount_by_merchant', 'mcc_frequency_5921', 'mcc_frequency_5912', 'mcc_amount_5331', 'mcc_mean_amount_4131', 'std_transaction_amount', 'max_transaction_amount', 'log_mcc_amount_6538', 'mcc_max_amount_5921', 'mcc_max_amount_4111', 'time_diff_mean_to_activity_days_ratio', 'mcc_mean_amount_6538', 'mcc_frequency_5541', 'mcc_amount_4111', 'std_std_time_diff_by_merchant', 'month_7', 'std_min_time_diff_by_merchant', 'log_mcc_amount_5541', 'day_of_week_3', 'log_mcc_amount_5921', 'log_mcc_amount_4131', 'day_of_week_0', 'count_low_popularity_merchants', 'mcc_frequency_4111', 'mcc_max_amount_5300', 'mcc_mean_amount_6536', 'log_mcc_amount_3990', 'mcc_frequency_5300', 'unique_mcc_count', 'mcc_max_amount_4121', 'amount_range', 'log_mcc_amount_6011', 'log_mcc_amount_5300', 'day_of_week_1', 'transaction_count', 'mode_time_of_day', 'count_medium_popularity_merchants', 'mcc_max_amount_other', 'mcc_frequency_6538', 'count_high_popularity_merchants', 'log_mcc_amount_5200', 'mcc_min_amount_4121', 'mcc_max_amount_4131', 'mcc_amount_4121', 'mcc_amount_6538', 'mcc_amount_5300', 'mcc_frequency_5331', 'month_9', 'mean_merchant_usage_ratio', 'mcc_frequency_4121', 'mcc_amount_6536', 'most_frequent_merchant_by_frequency', 'month_10', 'min_time_diff', 'most_frequent_merchant', 'mcc_max_amount_6536', 'log_mcc_amount_4121', 'mean_max_transaction_amount_by_merchant', 'log_mcc_amount_6536', 'log_mcc_amount_5331', 'log_mcc_amount_5499', 'total_transaction_count_by_merchant', 'total_amount_to_mean_ratio', 'hour_diff_from_mean', 'transaction_period', 'is_last_month_sum_to_amount_mean_ratio', 'mcc_max_amount_5814', 'mean_vs_min_ratio', 'mcc_max_amount_5812', 'log_mcc_amount_5411', 'max_time_diff_minutes', 'mcc_max_amount_5541', 'mean_month', 'mcc_mean_amount_5814', 'mcc_mean_amount_5912', 'log_max_transaction_amount', 'mean_days_until_last_transaction', 'sum_morning_transactions', 'transactions_in_last_month', 'sum_beginning_of_month_transactions', 'max_to_min_transaction_ratio', 'sum_end_of_month_transactions', 'mcc_max_amount_5912', 'std_days_since_first_transaction', 'activity_days', 'log_min_transaction_amount', 'sum_afternoon_transactions', 'transaction_amount_per_active_day', 'mcc_max_amount_3990', 'sum_weekend_transactions', 'std_days_until_last_transaction', 'mcc_amount_3990', 'mean_time_diff_minutes', 'amount_per_unique_mcc', 'mcc_min_amount_6536', 'log_total_transaction_amount', 'std_time_diff', 'mean_time_diff_to_activity_ratio', 'sum_weekday_transactions', 'mcc_amount_6536_ratio', 'max_days_until_last_transaction', 'std_time_diff_minutes', 'log_mcc_frequency_sum', 'total_activity_period', 'count_time_of_day', 'max_days_since_first_transaction', 'sum_weekday_merchant_interaction', 'sum_weekday_hour_interaction', 'sum_recent_activity_transactions', 'min_days_since_first_transaction', 'min_days_until_last_transaction', 'min_time_diff_minutes', 'mcc_amount_5812_minus_5912', 'mcc_amount_5812', 'mean_transaction_amount', 'total_transaction_amount_divide_mean_min_transaction_amount_by_merchant', 'mean_hour_of_day', 'log_amount_5812_plus_5411', 'mcc_min_amount_5814', 'mcc_mean_amount_5499', 'mcc_amount_5812_plus_5411', 'mcc_mean_amount_5411', 'std_day_of_week', 'std_merchant_usage_ratio', 'sum_frequent_transactions', 'squared_mcc_amount_5411', 'log_std_transaction_amount', 'min_to_mean_transaction_ratio', 'std_activity_period_by_merchant', 'mcc_amount_5912_ratio', 'log_amount_5912_plus_5411', 'log_amount_5812_plus_5912', 'last_transaction_day_of_week', 'mcc_amount_5912_plus_5411', 'mcc_amount_5912_minus_mean_min_transaction_amount_by_merchant', 'total_transaction_amount', 'log_mcc_amount_5812_plus_5912_plus_5411', 'mcc_amount_5812_divide_5411', 'mcc_amount_5812_multiply_5912', 'mcc_min_amount_5411', 'mcc_min_amount_5499', 'log_mcc_amount_5812', 'sum_night_transactions', 'mean_mcc_amount_5812_plus_5912_plus_5411', 'mcc_amount_5812_ratio', 'mcc_5411_frequency', 'mcc_amount_5812_minus_mean_min_transaction_amount_by_merchant', 'mcc_amount_5411_minus_mean_min_transaction_amount_by_merchant', 'log_mcc_amount_5912', 'used_mcc_frequency_3990', 'mcc_amount_5912_divide_5411', 'mcc_amount_5812_minus_5411', 'squared_mcc_amount_5812', 'mcc_amount_5812_divide_5912', 'mcc_amount_5912_multiply_5411', 'mcc_amount_5411', 'mcc_amount_5912_minus_5411', 'squared_mcc_amount_5912', 'mcc_amount_5812_multiply_5411', 'mcc_amount_5912', 'last_transaction_month', 'std_month', 'sum_evening_transactions', 'total_transaction_amount_multiply_mean_min_transaction_amount_by_merchant', 'mcc_mean_amount_other', 'used_mcc_frequency_6536']\n","dt_cols: ['first_transaction_date', 'last_transaction_date']\n","cat_cols: []\n","filtered_features: ['std_hour_of_day', 'mean_days_since_first_transaction', 'min_transaction_amount', 'log_mean_transaction_amount', 'large_transaction_count', 'mcc_frequency_3990', 'mcc_frequency_5499', 'mcc_frequency_6536', 'mcc_mean_amount_5541', 'mcc_mean_amount_6011', 'mcc_max_amount_5200', 'mcc_min_amount_4111', 'mcc_min_amount_6538', 'log_mcc_amount_other', 'mean_mean_transaction_amount_by_merchant', 'mean_min_transaction_amount_by_merchant', 'mean_activity_period_by_merchant', 'mean_min_time_diff_by_merchant', 'std_time_diff_to_mean_time_diff_ratio', 'total_amount_to_unique_mcc_count', 'mcc_amount_5812_plus_5912', 'mcc_amount_5812_plus_5912_plus_5411', 'mean_time_between_transactions', 'last_transaction_timestamp', 'time_since_last_transaction']\n","num_features: ['std_hour_of_day', 'mean_days_since_first_transaction', 'min_transaction_amount', 'log_mean_transaction_amount', 'large_transaction_count', 'mcc_frequency_3990', 'mcc_frequency_5499', 'mcc_frequency_6536', 'mcc_mean_amount_5541', 'mcc_mean_amount_6011', 'mcc_max_amount_5200', 'mcc_min_amount_4111', 'mcc_min_amount_6538', 'log_mcc_amount_other', 'mean_mean_transaction_amount_by_merchant', 'mean_min_transaction_amount_by_merchant', 'mean_activity_period_by_merchant', 'mean_min_time_diff_by_merchant', 'std_time_diff_to_mean_time_diff_ratio', 'total_amount_to_unique_mcc_count', 'mcc_amount_5812_plus_5912', 'mcc_amount_5812_plus_5912_plus_5411', 'mean_time_between_transactions', 'last_transaction_timestamp', 'time_since_last_transaction']\n","targets: ['target']\n"]}],"source":["targets = ['target']\n","\n","dt_cols = [col for col in aggregated_train.columns if aggregated_train[col].dtype.name == 'datetime64[us]']\n","\n","cat_cols = identify_categorical_columns(aggregated_train, targets)\n","# удаление ненужных категориальных признаков\n","cat_cols = [col for col in cat_cols if col not in low_imp_features]\n","\n","features2drop = ['client_num'] # выбрасываем id и const и пр. неинформативные признаки 'client_num'\n","cols2drop = features2drop + low_imp_features\n","\n","filtered_features = [\n","    i for i in aggregated_train.columns\n","    if ((i not in targets) and (i not in cols2drop) and (i not in dt_cols))\n","]\n","num_features = [i for i in filtered_features if (i not in cat_cols and i not in dt_cols and i not in low_imp_features)]\n","\n","print('---------------------------------------')\n","print(f'cols2drop: {cols2drop}', end='\\n')\n","print(f'dt_cols: {dt_cols}', end='\\n')\n","print(f'cat_cols: {cat_cols}', end='\\n')\n","print(f'filtered_features: {filtered_features}', end='\\n')\n","print(f'num_features: {num_features}', end='\\n')\n","print(f'targets: {targets}', end='\\n')\n","\n","# замена невстречающихся категорий в тестовой выборке\n","for col in cat_cols:\n","    train_unique = set(aggregated_train[col].unique())\n","    aggregated_train[col] = aggregated_train[col].apply(lambda x: x if x in train_unique else \"unknown\")\n","    aggregated_test[col] = aggregated_test[col].apply(lambda x: x if x in train_unique else \"unknown\")\n","\n","for col in cat_cols:\n","    aggregated_train[col] = aggregated_train[col].astype(str) # убираем NaN'ы если есть\n","    aggregated_test[col] = aggregated_test[col].astype(str)\n","\n","# очищенная тренировочная выборка\n","X = aggregated_train[filtered_features].drop(targets+cols2drop, axis=1, errors='ignore')\n","y = aggregated_train[targets].astype(int)\n","\n","cat_cols = [col for col in cat_cols if col in X.columns]\n","\n","# очищенная тестовая выборка\n","filtered_test = aggregated_test[filtered_features].drop(targets+cols2drop, axis=1, errors='ignore') # TARGETS"]},{"cell_type":"code","source":["len(X.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dFL52i7qEXz4","executionInfo":{"status":"ok","timestamp":1748442106328,"user_tz":-180,"elapsed":60,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"069bed6a-76b4-457d-bd38-4228e2102be1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["25"]},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","source":["#### Дообработаем и заресэмплим наши данные, т.к. классы несбалансированы"],"metadata":{"id":"kI2xMq6j1Ost"}},{"cell_type":"code","source":["# сохраняем названия всех колонок\n","original_columns = X.columns\n","\n","# отфильтруем только числовые колонки\n","numeric_columns = X.select_dtypes(include=[np.number]).columns\n","non_numeric_columns = X.select_dtypes(exclude=[np.number]).columns  # нечисловые колонки\n","\n","# замена бесконечных значений на медиану в числовых колонках\n","for col in numeric_columns:\n","    if np.isinf(X[col]).any():\n","        # вычисляем медиану, игнорируя бесконечные значения\n","        median_value = X[col].replace([np.inf, -np.inf], np.nan).median()\n","        # заменяем бесконечные значения на медиану\n","        X[col] = X[col].replace([np.inf, -np.inf], median_value)\n","        filtered_test[col] = filtered_test[col].replace([np.inf, -np.inf], median_value)\n","\n","# создаем импутер для заполнения пропущенных значений\n","imputer = SimpleImputer(strategy='median')  # Можно выбрать 'median' / 'mean / 'most_frequent'\n","\n","# применяем импутер к числовым данным\n","X_imputed = imputer.fit_transform(X[numeric_columns])\n","filtered_test_imputed = imputer.transform(filtered_test[numeric_columns])\n","\n","# преобразуем результат обратно в DataFrame для числовых колонок\n","X_numeric = pd.DataFrame(X_imputed, columns=numeric_columns)\n","filtered_test_numeric = pd.DataFrame(filtered_test_imputed, columns=numeric_columns)\n","\n","# объединяем обработанные числовые колонки с нечисловыми\n","X = pd.concat([X_numeric, X[non_numeric_columns]], axis=1)\n","filtered_test = pd.concat([filtered_test_numeric, filtered_test[non_numeric_columns]], axis=1)\n","\n","# восстанавливаем исходный порядок колонок\n","X = X[original_columns]\n","filtered_test = filtered_test[original_columns]"],"metadata":{"id":"6GjFYUtKojwY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Не сработал овер-сэмплинг и андерспэмплинг:"],"metadata":{"id":"JTZAMv7qeSV9"}},{"cell_type":"code","source":["# # over-sampling\n","# smote = SMOTE(random_state=101)\n","# X, y = smote.fit_resample(X, y)\n","\n","# X[cat_cols] = X[cat_cols].astype(str)\n","# filtered_test[cat_cols] = filtered_test[cat_cols].astype(str)\n","\n","# # under-sampling\n","# # cc = ClusterCentroids(random_state=101)\n","# # X, y = cc.fit_resample(X, y)"],"metadata":{"id":"ycYTAHm0n4bk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gGMTxe1zu5XJ"},"source":["# Вспомогательные функции"]},{"cell_type":"markdown","source":["#### Функция для создания кастомной метрики"],"metadata":{"id":"8LHOSyO7uqzQ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"U5AV91kXn4FS"},"outputs":[],"source":["# определение WMAE как метрики\n","def wmae(y_true, y_pred, weights):\n","    \"\"\"\n","    вычисляем weighted mean absolute error (wmae).\n","\n","    Параметры:\n","    - y_true: истинные метки (1D массив)\n","    - y_pred: предсказанные метки или вероятности (1D или 2D массив)\n","    - weights: словарь весов для каждого класса\n","\n","    Возвращает:\n","    - значение WMAE.\n","    \"\"\"\n","    y_true = np.array(y_true).ravel().astype(int) # преобразуем y_true в одномерный массив\n","\n","    # если y_pred содержит вероятности, преобразуем их в индексы классов\n","    if len(y_pred.shape) > 1:\n","        y_pred = np.argmax(y_pred, axis=1)  # Преобразуем вероятности в метки классов\n","    y_pred = np.array(y_pred).ravel().astype(int)\n","\n","    # проверка корректности данных\n","    if y_true.shape != y_pred.shape:\n","        raise ValueError(f\"Размеры y_true ({y_true.shape}) и y_pred ({y_pred.shape}) не совпадают.\")\n","\n","    # проверка, что все предсказания находятся в допустимом диапазоне\n","    num_classes = len(weights)\n","    if not np.all((y_pred >= 0) & (y_pred < num_classes)):\n","        raise ValueError(\"Некоторые предсказания выходят за пределы допустимого диапазона классов.\")\n","\n","    absolute_errors = np.abs(y_true - y_pred) # вычисление абсолютных ошибок\n","\n","    sample_weights = np.array([weights[y] for y in y_true]) # применение весов\n","\n","    wmae_value = np.sum(absolute_errors * sample_weights) / np.sum(sample_weights) # вычисление WMAE\n","\n","    return wmae_value\n","\n","\n","class WMAEMetric(object):\n","    \"\"\"\n","    та же кастомная метрика wmae, только для Catboost\n","    \"\"\"\n","    def __init__(self, weights_dict):\n","        \"\"\"\n","        инициализация метрики wmae.\n","\n","        параметры:\n","        - weights_dict: словарь весов для каждого класса\n","        \"\"\"\n","        self.weights_dict = weights_dict\n","\n","    def get_final_error(self, error, weight):\n","        \"\"\"\n","        возвращает финальное значение ошибки\n","        \"\"\"\n","        return error / weight if weight != 0 else 0\n","\n","    def is_max_optimal(self):\n","        \"\"\"\n","        указывает, является ли метрика максимизируемой.\n","        Для ошибок возвращаем False (минимизируем метрику)\n","        \"\"\"\n","        return False\n","\n","    def evaluate(self, approxes, target, weight=None):\n","        \"\"\"\n","        вычисляет значение метрики.\n","\n","        параметры:\n","        - approxes: список приближений (логиты или вероятности)\n","        - target: истинные метки\n","        - weight: веса объектов\n","\n","        возвращает:\n","        - значение ошибки и сумму весов\n","        \"\"\"\n","        # преобразуем приближения в предсказания классов\n","        y_pred = np.argmax(approxes[0])\n","        y_true = np.array(target).astype(int)\n","\n","        # вычисляем абсолютные ошибки\n","        absolute_errors = np.abs(y_true - y_pred)\n","\n","        # gрименяем веса\n","        sample_weights = np.array([self.weights_dict[y] for y in y_true])\n","        total_weight = np.sum(sample_weights)\n","        weighted_error = np.sum(absolute_errors * sample_weights)\n","\n","        return weighted_error, total_weight"]},{"cell_type":"markdown","source":["#### Функция для создания кастомного лосса"],"metadata":{"id":"N5rrJ2j5470o"}},{"cell_type":"code","source":["def weighted_cross_entropy(y_true, y_pred, class_weights):\n","    \"\"\"\n","    кастомный лосс для многоклассовой классификации в XGBoost и LightGBM.\n","    \"\"\"\n","    if isinstance(y_true, pd.DataFrame):\n","        y_true = y_true.values.ravel()  # преобразуем в одномерный массив\n","    elif isinstance(y_true, pd.Series):\n","        y_true = y_true.values  # преобразуем в одномерный массив\n","\n","    # преобразуем y_true в массив NumPy\n","    if isinstance(y_true, xgb.DMatrix):\n","        y_true = y_true.get_label()\n","    elif hasattr(y_true, 'get_label'):\n","        y_true = y_true.get_label()  # для LightGBM\n","\n","    # определяем количество классов\n","    num_classes = len(class_weights)\n","\n","    # преобразуем y_true в one-hot encoding\n","    y_true_onehot = np.zeros((len(y_true), num_classes))\n","    y_true_onehot[np.arange(len(y_true)), y_true.astype(int)] = 1\n","\n","    # преобразуем предсказания в вероятности через softmax\n","    y_pred = y_pred.reshape(-1, num_classes)  # Reshape to (n_samples, n_classes)\n","    preds = np.exp(y_pred - logsumexp(y_pred, axis=1, keepdims=True))  # Softmax\n","\n","    # вычисляем веса для каждого объекта\n","    weights = np.array([class_weights[int(t)] for t in y_true])\n","\n","    # градиент и гессиан\n","    grad = weights[:, None] * (preds - y_true_onehot)  # Shape: (n_samples, n_classes)\n","    hess = weights[:, None] * preds * (1 - preds)      # Shape: (n_samples, n_classes)\n","\n","    # flatten\n","    grad = grad.flatten()\n","    hess = hess.flatten()\n","\n","    return grad, hess"],"metadata":{"id":"JpGZzldO436Z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Функция для тренировки модели"],"metadata":{"id":"zCpFGtVgumeu"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"4KYhlJvcn9Z4"},"outputs":[],"source":["def train_model(\n","    my_model,\n","    X,\n","    y,\n","    early_stopping_rounds,\n","    init_params=None,\n","    cat_features=None,\n","    rs=101,\n","    n_splits=3,\n","    class_weights=True\n","):\n","    \"\"\"\n","    обучение модели с автоматическим расчетом весов классов\n","    \"\"\"\n","    scores, models = [], []\n","    kf = KFold(n_splits=n_splits, random_state=rs, shuffle=True)\n","    # списки для хранения данных для каждого фолда\n","    X_train_folds, X_eval_folds, y_train_folds, y_eval_folds = [], [], [], []\n","\n","    for train_index, eval_index in kf.split(X, y):\n","        X_train, X_eval = X.iloc[train_index], X.iloc[eval_index]\n","        y_train, y_eval = y.iloc[train_index], y.iloc[eval_index]\n","\n","        # сохранение данных для каждого фолда\n","        X_train_folds.append(X_train)\n","        X_eval_folds.append(X_eval)\n","        y_train_folds.append(y_train)\n","        y_eval_folds.append(y_eval)\n","\n","        classes = np.unique(y_train['target'])\n","        # вычисление весов\n","        if class_weights:\n","\n","            class_frequencies = y.value_counts(normalize=True)\n","            class_frequencies.index = [idx[0] if isinstance(idx, tuple) else idx for idx in class_frequencies.index]\n","            class_weights = {cls: freq for cls, freq in class_frequencies.items()}\n","            total_weight = sum(class_weights.values())\n","            class_weights = {cls: weight / total_weight for cls, weight in class_weights.items()}\n","            class_weights = {int(cls): float(weight) for cls, weight in class_weights.items()}\n","\n","            class_weights[1] = class_weights[1] * 8 # 4\n","\n","        train_weights = [class_weights[i] for i in y_train['target'].values]\n","        print(\"Class weights:\", class_weights)\n","\n","\n","        # обучение модели в зависимости от типа\n","        if my_model.__name__ == \"CatBoostClassifier\":\n","            train_dataset = Pool(data=X_train, label=y_train, cat_features=cat_features, weight=train_weights)\n","            eval_dataset = Pool(data=X_eval, label=y_eval, cat_features=cat_features)\n","\n","            model = CatBoost(params={\n","            \"eval_metric\": WMAEMetric(weights_dict=class_weights), # Передаем кастомную метрику\n","            \"classes_count\": len(classes),\n","            **init_params\n","            })\n","\n","            # Обучаем модель\n","            model.fit(\n","                train_dataset,\n","                eval_set=eval_dataset,\n","                early_stopping_rounds=early_stopping_rounds,\n","                verbose_eval=200,\n","            )\n","\n","        elif my_model.__name__ == \"LGBMClassifier\":\n","            train_dataset = Dataset(data=X_train, label=y_train, categorical_feature=cat_features)\n","            eval_dataset = Dataset(data=X_eval, label=y_eval, categorical_feature=cat_features)\n","\n","            init_params[\"num_class\"] = len(classes)\n","            init_params[\"objective\"] = lambda preds, dtrain: weighted_cross_entropy(dtrain, preds, class_weights)\n","\n","            model = lgb.train(\n","                params=init_params,\n","                train_set=train_dataset,\n","                valid_sets=[eval_dataset],\n","                feval=lambda preds, train_data: ('wmae', wmae(train_data.get_label(), np.argmax(preds.reshape(-1, len(class_weights)), axis=1), class_weights), False),\n","            )\n","\n","        elif my_model.__name__ == \"XGBClassifier\":\n","            train_dataset = DMatrix(X_train, label=y_train, enable_categorical=True)\n","            eval_dataset = DMatrix(X_eval, label=y_eval, enable_categorical=True)\n","\n","            init_params[\"num_class\"] = len(classes)\n","\n","            model = xgb.train(\n","                params=init_params,\n","                dtrain=train_dataset,\n","                evals=[(eval_dataset, \"eval\")],\n","                obj=lambda preds, dtrain: weighted_cross_entropy(dtrain, preds, class_weights),\n","                feval=lambda preds, dtrain: ('wmae', wmae(dtrain.get_label(), preds, class_weights))\n","            )\n","\n","        else:\n","            raise ValueError(f\"Unsupported model class: {my_model.__name__}\")\n","\n","        # предсказание и оценка метрики\n","        if my_model.__name__ == 'XGBClassifier':\n","            X_eval = xgb.DMatrix(X_eval, enable_categorical=True)\n","            X_train = xgb.DMatrix(X_train, enable_categorical=True)\n","\n","        y_pred = model.predict(X_eval) # np.argmax в метриках\n","        score = wmae(y_eval, y_pred, class_weights)\n","\n","        train_score = wmae(y_train, model.predict(X_train), class_weights) # поможет проверять модель на переобучение и устойчивость к новым данным\n","        print(f\"Train score: {train_score}\")\n","        print(f\"Val score: {score}\")\n","        scores.append(score)\n","        models.append(model)\n","\n","    # выбор лучшей модели\n","    best_idx = np.argmin(scores)\n","    best_model = models[best_idx]\n","    mean_score = np.mean(scores)\n","\n","    # возвращаем данные для лучшего фолда\n","    X_eval_best = X_eval_folds[best_idx]\n","    y_eval_best = y_eval_folds[best_idx]\n","\n","    return mean_score, best_model, X_eval_best, y_eval_best"]},{"cell_type":"markdown","source":["#### Функция для тюнинга параметров"],"metadata":{"id":"HEGDS9MwpTFz"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ayIjEIEHu4lR"},"outputs":[],"source":["def tuning_params(\n","    my_model,\n","    X,\n","    y,\n","    init_params,\n","    fit_params,\n","    grid_params,\n","    n_iter=20,\n","    cv=3,\n","    scoring=\"neg_mean_absolute_error\",\n","    test_size=0.2,\n","    rs=101,\n","    class_weights=True\n","):\n","    \"\"\"\n","    Функция для подбора оптимальных гиперпараметров модели с использованием RandomizedSearchCV.\n","    \"\"\"\n","    # разделение данных на обучающую и валидационную выборки\n","    X_train, X_val, y_train, y_val = train_test_split(\n","        X, y, test_size=test_size, random_state=rs, stratify=y, shuffle=True\n","    )\n","\n","    class_frequencies = y_train.value_counts(normalize=True)\n","    class_frequencies.index = [idx[0] if isinstance(idx, tuple) else idx for idx in class_frequencies.index]\n","    class_weights = {cls: freq for cls, freq in class_frequencies.items()}\n","    total_weight = sum(class_weights.values())\n","    class_weights = {cls: weight / total_weight for cls, weight in class_weights.items()}\n","    class_weights = {int(cls): float(weight) for cls, weight in class_weights.items()}\n","\n","    # добавление весов классов в параметры модели\n","    if class_weights:\n","        if \"class_weight\" in init_params:\n","            init_params[\"class_weight\"] = class_weights\n","        elif \"scale_pos_weight\" in init_params:  # Для XGBoost\n","            init_params[\"scale_pos_weight\"] = class_weights\n","\n","    # инициализация модели\n","    estimator = my_model(**init_params)\n","\n","    # настройка RandomizedSearchCV\n","    search = RandomizedSearchCV(\n","        estimator=estimator,\n","        param_distributions=grid_params,\n","        n_iter=n_iter, # Будет проверено n_iter случайных комбинаций параметров\n","        cv=cv,\n","        scoring=scoring,\n","        random_state=rs,\n","        n_jobs=-1,\n","        verbose=False,\n","        error_score=\"raise\"\n","    )\n","\n","    # обучение модели с использованием кросс-валидации\n","    if my_model.__name__ == 'CatBoostClassifier':\n","        search.fit(X_train, y_train, eval_set=[(X_val, y_val)], early_stopping_rounds=50, **fit_params)\n","    if my_model.__name__ == 'LGBMClassifier':\n","        search.fit(X_train, y_train, eval_set=[(X_val, y_val)], **fit_params)\n","    if my_model.__name__ == 'XGBClassifier':\n","        search.fit(X_train, y_train, eval_set=[(X_val, y_val)], **fit_params)\n","\n","\n","    # оценка модели на валидационной выборке\n","    best_model = search.best_estimator_\n","    val_pred = best_model.predict(X_val)\n","    val_score = wmae(y_val, val_pred, class_weights)\n","\n","    print(f\"Лучшие параметры: {search.best_params_}\")\n","    print(f\"WMAE на валидационной выборке: {val_score}\")\n","\n","    return search.best_params_, val_score"]},{"cell_type":"markdown","source":["#### Функции для отображения важности признаков и их отбора"],"metadata":{"id":"FkihBpNDpd52"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"QynvFSFGu4vx"},"outputs":[],"source":["def shap_importance(\n","    model,\n","    X_train,\n","    max_display=25\n","):\n","    explainer = shap.Explainer(model)\n","    shap_values = explainer(X_train)\n","\n","    # средняя абсолютная важность признаков\n","    feature_importance = np.abs(shap_values.values).mean(axis=0)\n","\n","    # если модель многоклассовая, нужно усреднить по классам\n","    if len(feature_importance.shape) > 1:\n","        feature_importance = feature_importance.mean(axis=1)\n","\n","    # создание DataFrame с важностью признаков\n","    feature_importance_df = pd.DataFrame({\n","        'Feature Id': X_train.columns,\n","        'Importances': feature_importance\n","    }).sort_values(by='Importances', ascending=False)\n","\n","    # вывод n самых важных признаков\n","    top_n_features = feature_importance_df.head(max_display)\n","    print(\"Топ-n важных признаков:\")\n","    print(top_n_features)\n","\n","    shap.summary_plot(shap_values, plot_type='bar', max_display=max_display)\n","\n","    return top_n_features, top_n_features.loc[:, 'Feature Id'].values.tolist() # df, list\n","\n","\n","def cv_find_low_imp_features(model, min_features, max_features, imp_features_df, X, y, early_stopping_rounds, init_params, cat_features, rs=101, step=5, class_weights=True):\n","    \"\"\"\n","    С помощью кросс-валидации находим ненужные признаки и выводим их\n","    \"\"\"\n","    low_imp_features = []\n","    best_k = None\n","    best_wmae = np.inf\n","    best_model = None\n","\n","    for k in range(min_features, max_features+1, step):  # проверяем каждые step признаков\n","        # исключаем категориальные признаки из анализа важности\n","        non_cat_features = [feat for feat in imp_features_df['Feature Id'] if feat not in cat_features]\n","        k_best_non_cat_features = non_cat_features[:k]\n","\n","        # добавляем категориальные признаки обратно\n","        k_best_features = list(set(k_best_non_cat_features + cat_features))\n","\n","        # обновление списка категориальных признаков\n","        edited_cat_features = [cat_col for cat_col in cat_features if cat_col in k_best_features]\n","        # print(f'Категориальные признаки:', edited_cat_features)\n","\n","        # если категориальных признаков нет, передаем None\n","        if len(edited_cat_features) == 0:\n","            edited_cat_features = None\n","\n","        # обучение модели\n","        if class_weights:\n","            model_mean_wmae, trained_model, _, _ = train_model(\n","                my_model=model,\n","                X=X[k_best_features],\n","                y=y,\n","                early_stopping_rounds=early_stopping_rounds,\n","                init_params=init_params,\n","                cat_features=edited_cat_features,\n","                rs=rs,\n","                class_weights=True\n","            )\n","        else:\n","            model_mean_wmae, trained_model, _, _ = train_model(\n","                my_model=model,\n","                X=X[k_best_features],\n","                y=y,\n","                early_stopping_rounds=early_stopping_rounds,\n","                init_params=init_params,\n","                cat_features=edited_cat_features,\n","                rs=rs,\n","                class_weights=False\n","            )\n","\n","        # обновление лучшей модели\n","        if model_mean_wmae < best_wmae:\n","            low_imp_features = imp_features_df.loc[k:]['Feature Id'].values.tolist()\n","            best_k = k # лучшее отсечение признаков\n","            best_wmae = model_mean_wmae\n","            best_model = trained_model\n","\n","        print(f'Модель с {k} лучшими фичами выдает WMAE = {model_mean_wmae}')\n","    print(f'ЛУЧШАЯ МОДЕЛЬ с {best_k} лучшими фичами выдает WMAE = {best_wmae}')\n","    return low_imp_features, best_wmae, best_model"]},{"cell_type":"markdown","source":["# Обучим модели"],"metadata":{"id":"SllIArTlwdas"}},{"cell_type":"markdown","metadata":{"id":"2VRguQMHbJJJ"},"source":["## CatBoost"]},{"cell_type":"markdown","metadata":{"id":"z6zY4lS9wf0v"},"source":["#### Создаем гиперпараметры"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ioZel-D4alVk"},"outputs":[],"source":["cb_grid_params = {\n","    # 'boosting_type': ['Plain'], # ORDERED тлько для cpu\n","    'bootstrap_type': ['Poisson', 'Bernoulli'],\n","    'learning_rate': [0.01, 0.05, 0.1],  # скорость обучения\n","    'depth': [4, 5],              # глубина деревьев\n","    'l2_leaf_reg': [3, 5, 7, 10, 13],        # регуляризация L2\n","    'iterations': [1250],     # количество итераций (деревьев) # 750, 1000,\n","    'random_strength': [10, 15, 20, 25, 30],       # сила рандомизации при выборе разбиений\n","    # 'bagging_temperature': [1, 2, 5],    # температура бэггинга\n","    # 'colsample_bylevel': [0.8, 0.9, 1], # доля случайных признаков, используемых при разбиении\n","    # 'subsample': [0.8, 0.9, 0.95],        # доля объектов, используемых для обучения каждого дерева # Не для bayesian\n","    'border_count': [32, 64, 128],       # количество разбиений для числовых признаков\n","    'grow_policy': ['SymmetricTree', 'Depthwise', 'Lossguide'],  # стратегия роста деревьев\n","    'early_stopping_rounds': [50, 100],        # Остановка обучения при отсутствии улучшений\n","}\n","\n","#     'auto_class_weights': ['Balanced'],  # Автоматическая балансировка классов\n","#     'loss_function': ['MultiClass', 'MultiClassOneVsAll'],  # Функция потерь для многоклассовой классификации\n","\n","\n","cb_fit_params = {\n","    'verbose': 200,\n","    # 'early_stopping_rounds': 100,\n","    # 'silent': True\n","}"]},{"cell_type":"markdown","metadata":{"id":"miI4238fwpMQ"},"source":["### Random State=101"]},{"cell_type":"markdown","metadata":{"id":"FWTsDSJKxQry"},"source":["#### Тюним параметры"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1748442462914,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"},"user_tz":-180},"id":"zEQmQBygM-OJ","outputId":"d7919432-6fa7-48a8-ab82-dacf9319469c"},"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 7 µs, sys: 0 ns, total: 7 µs\n","Wall time: 11.7 µs\n"]}],"source":["%%time\n","cb_init_params = {\n","    \"loss_function\": \"MultiClass\",\n","    \"eval_metric\": \"TotalF1\",\n","    \"random_seed\": 101,\n","    \"thread_count\": -1,\n","    # \"verbose\": False,\n","    \"task_type\": 'GPU',\n","    \"devices\": '0',\n","    \"max_ctr_complexity\": 1, # для уменьшения сложности CTR (Click-Through Rate) расчетов\n","    \"cat_features\": cat_cols,\n","    \"rsm\": 1.0,  # Явное отключение RSM\n","    'early_stopping_rounds': 100\n","}\n","\n","cb_tuned_params = tuning_params(\n","    my_model=CatBoostClassifier,\n","    X=X,\n","    y=y,\n","    init_params=cb_init_params,\n","    fit_params=cb_fit_params,\n","    grid_params=cb_grid_params,\n","    n_iter=50,\n","    cv=3,\n","    scoring=\"neg_mean_absolute_error\",\n","    test_size=0.2,\n","    rs=101,\n","    class_weights=True\n",")\n","\n","cb_tuned_params"]},{"cell_type":"code","source":["# cb_tuned_params = {\n","#     'random_strength': 25,\n","#     'learning_rate': 0.1,\n","#     'l2_leaf_reg': 13,\n","#     'iterations': 1500,\n","#     'grow_policy': 'Depthwise',\n","#     'early_stopping_rounds': 100,\n","#     'depth': 4,\n","#     'border_count': 128,\n","#     'bootstrap_type': 'Poisson',\n","#     # 'bagging_temperature': 5,    # температура бэггинга\n","#     # 'subsample': 1,        # доля объектов, используемых для обучения каждого дерева # Не для bayesian\n","#     }"],"metadata":{"id":"T1hWRjpXv13E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Обучим модель на лучших весах"],"metadata":{"id":"JFZXpoZlo8M0"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IlhimTznAIFS","outputId":"5bb4f3c0-a2d1-4e17-a73d-005b8dbb3c65","executionInfo":{"status":"ok","timestamp":1748442494925,"user_tz":-180,"elapsed":28163,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Class weights: {1: 2.0594285714285716, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.7606042\ttest: 0.1102241\tbest: 0.1102241 (0)\ttotal: 8.75ms\tremaining: 13.1s\n","bestTest = 0.1102241008\n","bestIteration = 0\n","Shrink model to first 1 iterations.\n","Train score: 0.29392562741932665\n","Val score: 0.29629082454376093\n","Class weights: {1: 2.0594285714285716, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.7601421\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 6.61ms\tremaining: 9.9s\n","200:\tlearn: 0.7652008\ttest: 0.1223584\tbest: 0.1223815 (199)\ttotal: 2.7s\tremaining: 17.4s\n","400:\tlearn: 0.7684130\ttest: 0.1325517\tbest: 0.1325517 (400)\ttotal: 5.02s\tremaining: 13.8s\n","600:\tlearn: 0.7714563\ttest: 0.1394188\tbest: 0.1394188 (600)\ttotal: 6.04s\tremaining: 9.04s\n","800:\tlearn: 0.7738321\ttest: 0.1449460\tbest: 0.1449460 (800)\ttotal: 7.05s\tremaining: 6.15s\n","1000:\tlearn: 0.7759929\ttest: 0.1481941\tbest: 0.1482521 (995)\ttotal: 8.06s\tremaining: 4.02s\n","1200:\tlearn: 0.7778503\ttest: 0.1524447\tbest: 0.1525078 (1199)\ttotal: 9.1s\tremaining: 2.27s\n","1400:\tlearn: 0.7798363\ttest: 0.1565889\tbest: 0.1567373 (1397)\ttotal: 10.1s\tremaining: 714ms\n","1499:\tlearn: 0.7807073\ttest: 0.1590881\tbest: 0.1593034 (1497)\ttotal: 10.6s\tremaining: 0us\n","bestTest = 0.1593033907\n","bestIteration = 1497\n","Shrink model to first 1498 iterations.\n","Train score: 0.27593029503021754\n","Val score: 0.3040345815142499\n","Class weights: {1: 2.0594285714285716, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.7595518\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 9.16ms\tremaining: 13.7s\n","200:\tlearn: 0.7630767\ttest: 0.1206524\tbest: 0.1207492 (199)\ttotal: 3.04s\tremaining: 19.7s\n","400:\tlearn: 0.7660805\ttest: 0.1267505\tbest: 0.1272417 (394)\ttotal: 5.23s\tremaining: 14.3s\n","600:\tlearn: 0.7687829\ttest: 0.1323629\tbest: 0.1325271 (592)\ttotal: 6.36s\tremaining: 9.51s\n","800:\tlearn: 0.7712026\ttest: 0.1374886\tbest: 0.1374886 (800)\ttotal: 7.4s\tremaining: 6.46s\n","1000:\tlearn: 0.7734550\ttest: 0.1420732\tbest: 0.1420732 (1000)\ttotal: 8.44s\tremaining: 4.21s\n","1200:\tlearn: 0.7758319\ttest: 0.1460285\tbest: 0.1461348 (1196)\ttotal: 9.45s\tremaining: 2.35s\n","1400:\tlearn: 0.7777036\ttest: 0.1505145\tbest: 0.1505145 (1399)\ttotal: 10.5s\tremaining: 739ms\n","1499:\tlearn: 0.7788783\ttest: 0.1527892\tbest: 0.1528949 (1491)\ttotal: 11s\tremaining: 0us\n","bestTest = 0.1528949486\n","bestIteration = 1491\n","Shrink model to first 1492 iterations.\n","Train score: 0.2773459014907066\n","Val score: 0.30284707876656175\n","MEAN WMAE = 0.3010574949415242\n"]}],"source":["cb_tuned_params.update(cb_init_params)\n","\n","cb1_mean_wmae, cb_model_1, X_train_of_bm, y_train_of_bm = train_model(\n","    my_model=CatBoostClassifier,\n","    X=X,\n","    y=y,\n","    early_stopping_rounds=50,\n","    init_params=cb_tuned_params,\n","    cat_features=cat_cols,\n","    rs=101,\n","    n_splits=3,\n","    class_weights=True)  # Передаем веса в функцию обучения)\n","\n","print(f'MEAN WMAE = {cb1_mean_wmae}')"]},{"cell_type":"code","source":["# wmae == 0.302"],"metadata":{"id":"vNyGVvIIDF_X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" cb_model_1.best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4pRr0gzFVcga","executionInfo":{"status":"ok","timestamp":1748442498118,"user_tz":-180,"elapsed":28,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"5aaa19df-77bb-412a-ea7c-c26ae4a9c1b9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'learn': {'TotalF1': 0.7606041757062508, 'MultiClass': 0.636952809883559},\n"," 'validation': {'TotalF1': 0.11022410083721426,\n","  'MultiClass': 1.8724607868346619}}"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x5JXcbg1o2yf"},"outputs":[],"source":["# cb_model_1.save_model('cb_101')"]},{"cell_type":"markdown","metadata":{"id":"lGCHKJ2MxnIv"},"source":["#### Делаем предсказание на тестовых данных"]},{"cell_type":"markdown","metadata":{"id":"VWTenM5YaMaD"},"source":["#### Визуализация результатов и предсказание на тестовых данных"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mc54UIKYHXWn","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1748428889479,"user_tz":-180,"elapsed":50570,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"a77ca3f2-b373-41ec-c92b-80e5ff5194ee"},"outputs":[{"output_type":"stream","name":"stdout","text":["Топ-n важных признаков:\n","                                  Feature Id  Importances\n","18     std_time_diff_to_mean_time_diff_ratio     0.182004\n","4                    large_transaction_count     0.147546\n","21       mcc_amount_5812_plus_5912_plus_5411     0.143453\n","15   mean_min_transaction_amount_by_merchant     0.133825\n","5                         mcc_frequency_3990     0.119203\n","20                 mcc_amount_5812_plus_5912     0.112222\n","23                last_transaction_timestamp     0.101444\n","1          mean_days_since_first_transaction     0.099154\n","22            mean_time_between_transactions     0.088117\n","3                log_mean_transaction_amount     0.087590\n","7                         mcc_frequency_6536     0.086956\n","0                            std_hour_of_day     0.084664\n","16          mean_activity_period_by_merchant     0.080960\n","2                     min_transaction_amount     0.068747\n","9                       mcc_mean_amount_6011     0.067370\n","12                       mcc_min_amount_6538     0.066153\n","14  mean_mean_transaction_amount_by_merchant     0.063924\n","8                       mcc_mean_amount_5541     0.058278\n","24               time_since_last_transaction     0.057508\n","10                       mcc_max_amount_5200     0.051787\n","6                         mcc_frequency_5499     0.048017\n","17            mean_min_time_diff_by_merchant     0.047100\n","19          total_amount_to_unique_mcc_count     0.046451\n","13                      log_mcc_amount_other     0.045164\n","11                       mcc_min_amount_4111     0.044928\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x1150 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["imp_cb_features_df, imp_cb_features_list = shap_importance(cb_model_1, X_train_of_bm[:5000], max_display=30) # len(aggregated_train.columns) для дальнейшей кросс-валидации"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bT-swsSU4V8J","colab":{"base_uri":"https://localhost:8080/","height":833},"executionInfo":{"status":"ok","timestamp":1748429051114,"user_tz":-180,"elapsed":23,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"505c9b19-90db-4077-d5d4-6746c0bc493b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                  Feature Id  Importances\n","0      std_time_diff_to_mean_time_diff_ratio    10.392962\n","1    mean_min_transaction_amount_by_merchant     7.523635\n","2        mcc_amount_5812_plus_5912_plus_5411     7.082474\n","3                log_mean_transaction_amount     6.817392\n","4                    large_transaction_count     6.044459\n","5                 last_transaction_timestamp     5.305057\n","6          mean_days_since_first_transaction     5.206988\n","7                            std_hour_of_day     4.269204\n","8                     min_transaction_amount     4.228376\n","9                       log_mcc_amount_other     3.880982\n","10                      mcc_mean_amount_6011     3.593395\n","11                 mcc_amount_5812_plus_5912     3.592385\n","12                        mcc_frequency_3990     3.236097\n","13                        mcc_frequency_6536     3.165809\n","14  mean_mean_transaction_amount_by_merchant     3.082395\n","15          mean_activity_period_by_merchant     2.947315\n","16            mean_time_between_transactions     2.876910\n","17               time_since_last_transaction     2.854206\n","18                      mcc_mean_amount_5541     2.814796\n","19          total_amount_to_unique_mcc_count     2.610180\n","20                       mcc_min_amount_6538     2.249182\n","21                       mcc_max_amount_5200     1.922451\n","22            mean_min_time_diff_by_merchant     1.716793\n","23                        mcc_frequency_5499     1.605836\n","24                       mcc_min_amount_4111     0.980718"],"text/html":["\n","  <div id=\"df-56b16271-bef9-4445-bbf0-7103b7051a33\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature Id</th>\n","      <th>Importances</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>std_time_diff_to_mean_time_diff_ratio</td>\n","      <td>10.392962</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>mean_min_transaction_amount_by_merchant</td>\n","      <td>7.523635</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>mcc_amount_5812_plus_5912_plus_5411</td>\n","      <td>7.082474</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>log_mean_transaction_amount</td>\n","      <td>6.817392</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>large_transaction_count</td>\n","      <td>6.044459</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>last_transaction_timestamp</td>\n","      <td>5.305057</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>mean_days_since_first_transaction</td>\n","      <td>5.206988</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>std_hour_of_day</td>\n","      <td>4.269204</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>min_transaction_amount</td>\n","      <td>4.228376</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>log_mcc_amount_other</td>\n","      <td>3.880982</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>mcc_mean_amount_6011</td>\n","      <td>3.593395</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>mcc_amount_5812_plus_5912</td>\n","      <td>3.592385</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>mcc_frequency_3990</td>\n","      <td>3.236097</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>mcc_frequency_6536</td>\n","      <td>3.165809</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>mean_mean_transaction_amount_by_merchant</td>\n","      <td>3.082395</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>mean_activity_period_by_merchant</td>\n","      <td>2.947315</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>mean_time_between_transactions</td>\n","      <td>2.876910</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>time_since_last_transaction</td>\n","      <td>2.854206</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>mcc_mean_amount_5541</td>\n","      <td>2.814796</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>total_amount_to_unique_mcc_count</td>\n","      <td>2.610180</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>mcc_min_amount_6538</td>\n","      <td>2.249182</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>mcc_max_amount_5200</td>\n","      <td>1.922451</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>mean_min_time_diff_by_merchant</td>\n","      <td>1.716793</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>mcc_frequency_5499</td>\n","      <td>1.605836</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>mcc_min_amount_4111</td>\n","      <td>0.980718</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-56b16271-bef9-4445-bbf0-7103b7051a33')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-56b16271-bef9-4445-bbf0-7103b7051a33 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-56b16271-bef9-4445-bbf0-7103b7051a33');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-a615d00c-ee33-4e2c-8717-6eabb39d4b75\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a615d00c-ee33-4e2c-8717-6eabb39d4b75')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-a615d00c-ee33-4e2c-8717-6eabb39d4b75 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"imp_cb_features_df2\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"Feature Id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"min_transaction_amount\",\n          \"mean_time_between_transactions\",\n          \"std_time_diff_to_mean_time_diff_ratio\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Importances\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1901115160204694,\n        \"min\": 0.9807177503274268,\n        \"max\": 10.392961883853497,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          4.22837633453893,\n          2.8769103051060747,\n          10.392961883853497\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":118}],"source":["imp_cb_features_df2 = cb_model_1.get_feature_importance(prettified=True)\n","imp_cb_features_df2.iloc[:30]"]},{"cell_type":"markdown","source":["#### С приоритезацией 1-го класса"],"metadata":{"id":"EFoXijOSgcEH"}},{"cell_type":"markdown","source":["- Ось X (под главной диагональнью) - ложноотрицательные предсказания(FN), т.е. класс i был определен неправильно, как один из других классов;\n","- Ось y (над главной диагональю) - ложноположительные(FP), т.е. другие классы сработали как i  класс;\n","- Все предсказания кроме главное диагонали - истинноотрицательные (TN)\n","\n","**Проблема в определении 0 и 1 класса - самых частых классов. Поэтому, для самой низкой метрики на тестовых данных, мы выкрутим весы для 1-го класса**"],"metadata":{"id":"Nd9-UEcL0MXE"}},{"cell_type":"code","source":["ConfusionMatrixDisplay.from_predictions(\n","    y_true=y_train_of_bm,\n","    y_pred=np.argmax(cb_model_1.predict(X_train_of_bm), axis=1),\n","    display_labels=cb_model_1.classes_\n",")"],"metadata":{"id":"al5FqH2mW0I3"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0EA9oCT_-GWE"},"outputs":[],"source":["# plt.figure(figsize=(15, 5))\n","# sns.barplot(imp_feat_cb_df, x='Feature Id', y='Importances', palette='Set1')\n","# plt.xticks(rotation=90);"]},{"cell_type":"markdown","source":["#### Выбираем худшие признаки для отсечения"],"metadata":{"id":"Eoa3iKzRO4IR"}},{"cell_type":"code","source":["# выбираем худшие признаки для отсечения\n","new_low_imp_features, best_wmae, best_model = cv_find_low_imp_features(\n","    model=CatBoostClassifier,\n","    min_features=15,\n","    max_features=30,\n","    imp_features_df=imp_cb_features_df,\n","    X=X,\n","    y=y,\n","    early_stopping_rounds=100,\n","    init_params=cb_tuned_params,\n","    cat_features=cat_cols,\n","    rs=101,\n","    step=1,\n","    class_weights=True\n",")"],"metadata":{"id":"kGLp2p8kiuTk","colab":{"base_uri":"https://localhost:8080/"},"outputId":"143346f6-d979-4d94-871e-cdd2492a91a0","executionInfo":{"status":"ok","timestamp":1748428168395,"user_tz":-180,"elapsed":727425,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 9.1ms\tremaining: 11.4s\n","200:\tlearn: 0.7068488\ttest: 0.1267936\tbest: 0.1267936 (200)\ttotal: 1.25s\tremaining: 6.55s\n","400:\tlearn: 0.7109511\ttest: 0.1361947\tbest: 0.1362358 (391)\ttotal: 3.18s\tremaining: 6.74s\n","600:\tlearn: 0.7141468\ttest: 0.1402421\tbest: 0.1403784 (597)\ttotal: 6.21s\tremaining: 6.71s\n","800:\tlearn: 0.7171750\ttest: 0.1450531\tbest: 0.1450531 (800)\ttotal: 7.24s\tremaining: 4.06s\n","1000:\tlearn: 0.7200408\ttest: 0.1494328\tbest: 0.1497095 (974)\ttotal: 8.23s\tremaining: 2.05s\n","1200:\tlearn: 0.7222463\ttest: 0.1541993\tbest: 0.1541993 (1200)\ttotal: 9.97s\tremaining: 407ms\n","1249:\tlearn: 0.7231218\ttest: 0.1552416\tbest: 0.1557785 (1242)\ttotal: 10.2s\tremaining: 0us\n","bestTest = 0.1557785346\n","bestIteration = 1242\n","Shrink model to first 1243 iterations.\n","Train wmae score: 0.34978978387294885\n","Val wmae score: 0.37993463663372634\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 7.09ms\tremaining: 8.86s\n","200:\tlearn: 0.7072369\ttest: 0.1262235\tbest: 0.1263589 (197)\ttotal: 1.07s\tremaining: 5.59s\n","400:\tlearn: 0.7117866\ttest: 0.1342711\tbest: 0.1342711 (400)\ttotal: 2.07s\tremaining: 4.38s\n","600:\tlearn: 0.7151348\ttest: 0.1399864\tbest: 0.1403121 (598)\ttotal: 3.15s\tremaining: 3.4s\n","800:\tlearn: 0.7180345\ttest: 0.1445703\tbest: 0.1445819 (792)\ttotal: 6.97s\tremaining: 3.91s\n","1000:\tlearn: 0.7206725\ttest: 0.1503951\tbest: 0.1503951 (1000)\ttotal: 8.02s\tremaining: 2s\n","1200:\tlearn: 0.7234835\ttest: 0.1545584\tbest: 0.1545763 (1198)\ttotal: 9.03s\tremaining: 368ms\n","1249:\tlearn: 0.7242297\ttest: 0.1556219\tbest: 0.1556219 (1249)\ttotal: 9.27s\tremaining: 0us\n","bestTest = 0.1556219038\n","bestIteration = 1249\n","Train wmae score: 0.3504643333040367\n","Val wmae score: 0.3781975682948802\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 8.88ms\tremaining: 11.1s\n","200:\tlearn: 0.7047889\ttest: 0.1243662\tbest: 0.1243662 (200)\ttotal: 1.19s\tremaining: 6.23s\n","400:\tlearn: 0.7088951\ttest: 0.1301364\tbest: 0.1303900 (397)\ttotal: 2.26s\tremaining: 4.78s\n","600:\tlearn: 0.7125618\ttest: 0.1350893\tbest: 0.1354362 (589)\ttotal: 3.25s\tremaining: 3.52s\n","800:\tlearn: 0.7162206\ttest: 0.1402289\tbest: 0.1403573 (799)\ttotal: 4.29s\tremaining: 2.4s\n","1000:\tlearn: 0.7196120\ttest: 0.1459677\tbest: 0.1459789 (999)\ttotal: 6.54s\tremaining: 1.63s\n","1200:\tlearn: 0.7219810\ttest: 0.1478184\tbest: 0.1482403 (1187)\ttotal: 9.31s\tremaining: 380ms\n","1249:\tlearn: 0.7227669\ttest: 0.1494817\tbest: 0.1497055 (1247)\ttotal: 9.57s\tremaining: 0us\n","bestTest = 0.1497054713\n","bestIteration = 1247\n","Shrink model to first 1248 iterations.\n","Train wmae score: 0.3512228349602678\n","Val wmae score: 0.37458250806171045\n","Модель с 15 лучшими фичами выдает WMAE = 0.37757157099677235\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 10.6ms\tremaining: 13.3s\n","200:\tlearn: 0.7070161\ttest: 0.1271940\tbest: 0.1274279 (191)\ttotal: 1.15s\tremaining: 6.03s\n","400:\tlearn: 0.7110727\ttest: 0.1346518\tbest: 0.1347092 (395)\ttotal: 2.16s\tremaining: 4.57s\n","600:\tlearn: 0.7145274\ttest: 0.1412890\tbest: 0.1413889 (597)\ttotal: 3.17s\tremaining: 3.42s\n","800:\tlearn: 0.7173402\ttest: 0.1446196\tbest: 0.1449989 (789)\ttotal: 4.18s\tremaining: 2.34s\n","1000:\tlearn: 0.7207029\ttest: 0.1492141\tbest: 0.1492659 (998)\ttotal: 5.21s\tremaining: 1.3s\n","1200:\tlearn: 0.7232441\ttest: 0.1536939\tbest: 0.1536939 (1200)\ttotal: 6.22s\tremaining: 254ms\n","1249:\tlearn: 0.7240571\ttest: 0.1544790\tbest: 0.1544793 (1248)\ttotal: 6.46s\tremaining: 0us\n","bestTest = 0.1544793148\n","bestIteration = 1248\n","Shrink model to first 1249 iterations.\n","Train wmae score: 0.3493592218010284\n","Val wmae score: 0.3835784562540522\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 41.3ms\tremaining: 51.5s\n","200:\tlearn: 0.7080143\ttest: 0.1264627\tbest: 0.1264627 (200)\ttotal: 1.78s\tremaining: 9.27s\n","400:\tlearn: 0.7119264\ttest: 0.1353216\tbest: 0.1353216 (400)\ttotal: 2.79s\tremaining: 5.91s\n","600:\tlearn: 0.7152600\ttest: 0.1403677\tbest: 0.1408759 (575)\ttotal: 3.79s\tremaining: 4.1s\n","800:\tlearn: 0.7182927\ttest: 0.1440814\tbest: 0.1440814 (800)\ttotal: 4.79s\tremaining: 2.68s\n","1000:\tlearn: 0.7208150\ttest: 0.1503967\tbest: 0.1504579 (987)\ttotal: 5.77s\tremaining: 1.43s\n","1200:\tlearn: 0.7236723\ttest: 0.1543951\tbest: 0.1545227 (1197)\ttotal: 6.76s\tremaining: 276ms\n","1249:\tlearn: 0.7242695\ttest: 0.1555629\tbest: 0.1558731 (1240)\ttotal: 6.99s\tremaining: 0us\n","bestTest = 0.1558730748\n","bestIteration = 1240\n","Shrink model to first 1241 iterations.\n","Train wmae score: 0.35028535598231497\n","Val wmae score: 0.3783934527224549\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 6.57ms\tremaining: 8.2s\n","200:\tlearn: 0.7046624\ttest: 0.1231077\tbest: 0.1231077 (200)\ttotal: 1.16s\tremaining: 6.04s\n","400:\tlearn: 0.7091841\ttest: 0.1303059\tbest: 0.1304806 (395)\ttotal: 4.75s\tremaining: 10.1s\n","600:\tlearn: 0.7128478\ttest: 0.1356252\tbest: 0.1357952 (599)\ttotal: 6.04s\tremaining: 6.53s\n","800:\tlearn: 0.7162944\ttest: 0.1407621\tbest: 0.1409187 (799)\ttotal: 7.05s\tremaining: 3.95s\n","1000:\tlearn: 0.7192631\ttest: 0.1453080\tbest: 0.1455772 (992)\ttotal: 8.29s\tremaining: 2.06s\n","1200:\tlearn: 0.7217118\ttest: 0.1485486\tbest: 0.1486917 (1199)\ttotal: 9.27s\tremaining: 378ms\n","1249:\tlearn: 0.7226604\ttest: 0.1498398\tbest: 0.1500021 (1236)\ttotal: 9.51s\tremaining: 0us\n","bestTest = 0.1500020837\n","bestIteration = 1236\n","Shrink model to first 1237 iterations.\n","Train wmae score: 0.35203470408947335\n","Val wmae score: 0.3764451162523646\n","Модель с 16 лучшими фичами выдает WMAE = 0.37947234174295724\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 6.55ms\tremaining: 8.18s\n","200:\tlearn: 0.7077624\ttest: 0.1295154\tbest: 0.1295154 (200)\ttotal: 1.05s\tremaining: 5.48s\n","400:\tlearn: 0.7122699\ttest: 0.1381621\tbest: 0.1381621 (400)\ttotal: 2.8s\tremaining: 5.93s\n","600:\tlearn: 0.7158925\ttest: 0.1443917\tbest: 0.1445359 (598)\ttotal: 9.36s\tremaining: 10.1s\n","800:\tlearn: 0.7191231\ttest: 0.1489520\tbest: 0.1492483 (799)\ttotal: 11.5s\tremaining: 6.45s\n","1000:\tlearn: 0.7216924\ttest: 0.1533098\tbest: 0.1533781 (999)\ttotal: 12.6s\tremaining: 3.12s\n","1200:\tlearn: 0.7243425\ttest: 0.1567188\tbest: 0.1570655 (1182)\ttotal: 13.6s\tremaining: 553ms\n","1249:\tlearn: 0.7250137\ttest: 0.1576086\tbest: 0.1576712 (1234)\ttotal: 13.8s\tremaining: 0us\n","bestTest = 0.157671161\n","bestIteration = 1234\n","Shrink model to first 1235 iterations.\n","Train wmae score: 0.34947535881055747\n","Val wmae score: 0.3818697129932413\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 8.83ms\tremaining: 11s\n","200:\tlearn: 0.7089504\ttest: 0.1299889\tbest: 0.1300028 (199)\ttotal: 3.14s\tremaining: 16.4s\n","400:\tlearn: 0.7127608\ttest: 0.1378908\tbest: 0.1383133 (396)\ttotal: 7.77s\tremaining: 16.4s\n","600:\tlearn: 0.7168385\ttest: 0.1443367\tbest: 0.1443367 (600)\ttotal: 9.68s\tremaining: 10.4s\n","800:\tlearn: 0.7196817\ttest: 0.1499857\tbest: 0.1500063 (799)\ttotal: 10.7s\tremaining: 6.02s\n","1000:\tlearn: 0.7227076\ttest: 0.1546574\tbest: 0.1548009 (999)\ttotal: 11.8s\tremaining: 2.92s\n","1200:\tlearn: 0.7255014\ttest: 0.1586904\tbest: 0.1588387 (1199)\ttotal: 12.8s\tremaining: 521ms\n","1249:\tlearn: 0.7262711\ttest: 0.1600839\tbest: 0.1600839 (1249)\ttotal: 13s\tremaining: 0us\n","bestTest = 0.1600838798\n","bestIteration = 1249\n","Train wmae score: 0.3489099043423567\n","Val wmae score: 0.37913286438671795\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 35.6ms\tremaining: 44.5s\n","200:\tlearn: 0.7053064\ttest: 0.1244746\tbest: 0.1249512 (185)\ttotal: 3.4s\tremaining: 17.7s\n","400:\tlearn: 0.7097380\ttest: 0.1314643\tbest: 0.1316198 (391)\ttotal: 4.53s\tremaining: 9.6s\n","600:\tlearn: 0.7136532\ttest: 0.1364643\tbest: 0.1367964 (565)\ttotal: 5.58s\tremaining: 6.02s\n","800:\tlearn: 0.7170147\ttest: 0.1421164\tbest: 0.1422820 (798)\ttotal: 6.58s\tremaining: 3.69s\n","1000:\tlearn: 0.7203292\ttest: 0.1480006\tbest: 0.1480465 (997)\ttotal: 7.57s\tremaining: 1.88s\n","1200:\tlearn: 0.7236093\ttest: 0.1510203\tbest: 0.1510941 (1175)\ttotal: 8.56s\tremaining: 349ms\n","1249:\tlearn: 0.7241250\ttest: 0.1522249\tbest: 0.1525249 (1244)\ttotal: 8.81s\tremaining: 0us\n","bestTest = 0.1525248628\n","bestIteration = 1244\n","Shrink model to first 1245 iterations.\n","Train wmae score: 0.3508328790583912\n","Val wmae score: 0.3754653582566569\n","Модель с 17 лучшими фичами выдает WMAE = 0.3788226452122054\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 8.79ms\tremaining: 11s\n","200:\tlearn: 0.7078522\ttest: 0.1297095\tbest: 0.1297152 (199)\ttotal: 1.26s\tremaining: 6.57s\n","400:\tlearn: 0.7120811\ttest: 0.1390579\tbest: 0.1390579 (400)\ttotal: 5.13s\tremaining: 10.9s\n","600:\tlearn: 0.7161763\ttest: 0.1457440\tbest: 0.1457440 (600)\ttotal: 6.34s\tremaining: 6.85s\n","800:\tlearn: 0.7191080\ttest: 0.1492778\tbest: 0.1494048 (784)\ttotal: 7.38s\tremaining: 4.13s\n","1000:\tlearn: 0.7222430\ttest: 0.1544739\tbest: 0.1545071 (989)\ttotal: 8.41s\tremaining: 2.09s\n","1200:\tlearn: 0.7250455\ttest: 0.1586793\tbest: 0.1587582 (1199)\ttotal: 9.44s\tremaining: 385ms\n","1249:\tlearn: 0.7257127\ttest: 0.1593843\tbest: 0.1593843 (1249)\ttotal: 9.72s\tremaining: 0us\n","bestTest = 0.1593843499\n","bestIteration = 1249\n","Train wmae score: 0.3486873770510877\n","Val wmae score: 0.38297988573283487\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 6.53ms\tremaining: 8.15s\n","200:\tlearn: 0.7086783\ttest: 0.1292619\tbest: 0.1297278 (189)\ttotal: 1.13s\tremaining: 5.91s\n","400:\tlearn: 0.7131622\ttest: 0.1388598\tbest: 0.1389398 (396)\ttotal: 2.13s\tremaining: 4.51s\n","600:\tlearn: 0.7168808\ttest: 0.1453857\tbest: 0.1453857 (600)\ttotal: 4.23s\tremaining: 4.57s\n","800:\tlearn: 0.7200334\ttest: 0.1487066\tbest: 0.1487066 (800)\ttotal: 7.23s\tremaining: 4.05s\n","1000:\tlearn: 0.7230830\ttest: 0.1548834\tbest: 0.1548834 (1000)\ttotal: 8.28s\tremaining: 2.06s\n","1200:\tlearn: 0.7260460\ttest: 0.1598857\tbest: 0.1599122 (1197)\ttotal: 9.29s\tremaining: 379ms\n","1249:\tlearn: 0.7266596\ttest: 0.1610210\tbest: 0.1612360 (1239)\ttotal: 9.53s\tremaining: 0us\n","bestTest = 0.1612359769\n","bestIteration = 1239\n","Shrink model to first 1240 iterations.\n","Train wmae score: 0.3485124770851617\n","Val wmae score: 0.37872556178595135\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 8.94ms\tremaining: 11.2s\n","200:\tlearn: 0.7053626\ttest: 0.1236235\tbest: 0.1247035 (185)\ttotal: 6.79s\tremaining: 35.5s\n","400:\tlearn: 0.7101442\ttest: 0.1321790\tbest: 0.1328128 (391)\ttotal: 13s\tremaining: 27.5s\n","600:\tlearn: 0.7143352\ttest: 0.1380375\tbest: 0.1382022 (598)\ttotal: 17.3s\tremaining: 18.7s\n","800:\tlearn: 0.7180863\ttest: 0.1443869\tbest: 0.1446227 (794)\ttotal: 20.8s\tremaining: 11.7s\n","1000:\tlearn: 0.7213886\ttest: 0.1506020\tbest: 0.1506076 (985)\ttotal: 23s\tremaining: 5.72s\n","1200:\tlearn: 0.7240303\ttest: 0.1539527\tbest: 0.1543343 (1195)\ttotal: 24s\tremaining: 981ms\n","1249:\tlearn: 0.7246594\ttest: 0.1553370\tbest: 0.1553442 (1243)\ttotal: 24.3s\tremaining: 0us\n","bestTest = 0.1553442296\n","bestIteration = 1243\n","Shrink model to first 1244 iterations.\n","Train wmae score: 0.35059856697568953\n","Val wmae score: 0.37444735323858724\n","Модель с 18 лучшими фичами выдает WMAE = 0.37871760025245776\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 9.24ms\tremaining: 11.5s\n","200:\tlearn: 0.7081109\ttest: 0.1308829\tbest: 0.1308829 (200)\ttotal: 1.22s\tremaining: 6.39s\n","400:\tlearn: 0.7126919\ttest: 0.1401013\tbest: 0.1403561 (393)\ttotal: 2.26s\tremaining: 4.78s\n","600:\tlearn: 0.7165827\ttest: 0.1464984\tbest: 0.1464984 (600)\ttotal: 3.28s\tremaining: 3.55s\n","800:\tlearn: 0.7194959\ttest: 0.1516302\tbest: 0.1518803 (798)\ttotal: 4.28s\tremaining: 2.4s\n","1000:\tlearn: 0.7228059\ttest: 0.1565225\tbest: 0.1565225 (1000)\ttotal: 5.28s\tremaining: 1.31s\n","1200:\tlearn: 0.7251912\ttest: 0.1600988\tbest: 0.1601145 (1198)\ttotal: 9.16s\tremaining: 374ms\n","1249:\tlearn: 0.7258646\ttest: 0.1611787\tbest: 0.1612772 (1240)\ttotal: 9.49s\tremaining: 0us\n","bestTest = 0.1612772111\n","bestIteration = 1240\n","Shrink model to first 1241 iterations.\n","Train wmae score: 0.34829128506551305\n","Val wmae score: 0.3795060974877216\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 7.36ms\tremaining: 9.19s\n","200:\tlearn: 0.7089589\ttest: 0.1304697\tbest: 0.1304697 (200)\ttotal: 972ms\tremaining: 5.08s\n","400:\tlearn: 0.7139031\ttest: 0.1413457\tbest: 0.1413457 (400)\ttotal: 1.98s\tremaining: 4.18s\n","600:\tlearn: 0.7177058\ttest: 0.1466344\tbest: 0.1466344 (600)\ttotal: 2.98s\tremaining: 3.21s\n","800:\tlearn: 0.7209888\ttest: 0.1519498\tbest: 0.1520186 (799)\ttotal: 3.97s\tremaining: 2.23s\n","1000:\tlearn: 0.7238919\ttest: 0.1574808\tbest: 0.1575744 (998)\ttotal: 4.98s\tremaining: 1.24s\n","1200:\tlearn: 0.7267305\ttest: 0.1614890\tbest: 0.1614890 (1200)\ttotal: 5.98s\tremaining: 244ms\n","1249:\tlearn: 0.7274643\ttest: 0.1626372\tbest: 0.1632117 (1238)\ttotal: 6.22s\tremaining: 0us\n","bestTest = 0.1632116984\n","bestIteration = 1238\n","Shrink model to first 1239 iterations.\n","Train wmae score: 0.34845063550080585\n","Val wmae score: 0.38004299461396773\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 36.2ms\tremaining: 45.2s\n","200:\tlearn: 0.7056684\ttest: 0.1259487\tbest: 0.1259487 (200)\ttotal: 2.65s\tremaining: 13.9s\n","400:\tlearn: 0.7109239\ttest: 0.1336789\tbest: 0.1340857 (397)\ttotal: 3.7s\tremaining: 7.83s\n","600:\tlearn: 0.7149182\ttest: 0.1395260\tbest: 0.1398779 (593)\ttotal: 4.69s\tremaining: 5.07s\n","800:\tlearn: 0.7181714\ttest: 0.1447030\tbest: 0.1447030 (800)\ttotal: 5.69s\tremaining: 3.19s\n","1000:\tlearn: 0.7214564\ttest: 0.1502616\tbest: 0.1507034 (997)\ttotal: 6.68s\tremaining: 1.66s\n","1200:\tlearn: 0.7247637\ttest: 0.1539719\tbest: 0.1541069 (1192)\ttotal: 7.68s\tremaining: 313ms\n","1249:\tlearn: 0.7255096\ttest: 0.1549026\tbest: 0.1553557 (1245)\ttotal: 7.92s\tremaining: 0us\n","bestTest = 0.1553556612\n","bestIteration = 1245\n","Shrink model to first 1246 iterations.\n","Train wmae score: 0.34967936079041356\n","Val wmae score: 0.3780546805745621\n","Модель с 19 лучшими фичами выдает WMAE = 0.3792012575587505\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 6.81ms\tremaining: 8.5s\n","200:\tlearn: 0.7078666\ttest: 0.1306590\tbest: 0.1309566 (198)\ttotal: 1.17s\tremaining: 6.09s\n","400:\tlearn: 0.7128150\ttest: 0.1403983\tbest: 0.1404023 (399)\ttotal: 4.99s\tremaining: 10.6s\n","600:\tlearn: 0.7162423\ttest: 0.1459672\tbest: 0.1459958 (597)\ttotal: 6.15s\tremaining: 6.64s\n","800:\tlearn: 0.7198145\ttest: 0.1509085\tbest: 0.1509085 (800)\ttotal: 7.14s\tremaining: 4s\n","1000:\tlearn: 0.7231878\ttest: 0.1552154\tbest: 0.1552154 (1000)\ttotal: 8.13s\tremaining: 2.02s\n","1200:\tlearn: 0.7258764\ttest: 0.1596942\tbest: 0.1599307 (1197)\ttotal: 9.11s\tremaining: 372ms\n","1249:\tlearn: 0.7263992\ttest: 0.1613742\tbest: 0.1613742 (1249)\ttotal: 9.36s\tremaining: 0us\n","bestTest = 0.161374176\n","bestIteration = 1249\n","Train wmae score: 0.3477321348284178\n","Val wmae score: 0.37918792032505744\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 9.04ms\tremaining: 11.3s\n","200:\tlearn: 0.7092292\ttest: 0.1304561\tbest: 0.1309043 (194)\ttotal: 1.21s\tremaining: 6.29s\n","400:\tlearn: 0.7139267\ttest: 0.1411655\tbest: 0.1414225 (398)\ttotal: 2.27s\tremaining: 4.8s\n","600:\tlearn: 0.7177887\ttest: 0.1470804\tbest: 0.1470804 (600)\ttotal: 3.45s\tremaining: 3.72s\n","800:\tlearn: 0.7206788\ttest: 0.1516233\tbest: 0.1518732 (781)\ttotal: 7.19s\tremaining: 4.03s\n","1000:\tlearn: 0.7233930\ttest: 0.1557800\tbest: 0.1562568 (988)\ttotal: 8.35s\tremaining: 2.08s\n","1200:\tlearn: 0.7263871\ttest: 0.1606480\tbest: 0.1606612 (1195)\ttotal: 9.36s\tremaining: 382ms\n","1249:\tlearn: 0.7273175\ttest: 0.1616939\tbest: 0.1620477 (1237)\ttotal: 10.2s\tremaining: 0us\n","bestTest = 0.1620476967\n","bestIteration = 1237\n","Shrink model to first 1238 iterations.\n","Train wmae score: 0.34800213462812996\n","Val wmae score: 0.3792179318228216\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 41.9ms\tremaining: 52.3s\n","200:\tlearn: 0.7056633\ttest: 0.1250629\tbest: 0.1251456 (199)\ttotal: 9.44s\tremaining: 49.3s\n","400:\tlearn: 0.7106567\ttest: 0.1328638\tbest: 0.1333530 (391)\ttotal: 15.6s\tremaining: 32.9s\n","600:\tlearn: 0.7146761\ttest: 0.1391569\tbest: 0.1391569 (600)\ttotal: 23.2s\tremaining: 25.1s\n","800:\tlearn: 0.7178410\ttest: 0.1448925\tbest: 0.1450525 (799)\ttotal: 28.1s\tremaining: 15.7s\n","1000:\tlearn: 0.7215427\ttest: 0.1498142\tbest: 0.1501932 (991)\ttotal: 31.8s\tremaining: 7.92s\n","1200:\tlearn: 0.7240851\ttest: 0.1539866\tbest: 0.1541997 (1198)\ttotal: 38.1s\tremaining: 1.55s\n","1249:\tlearn: 0.7253307\ttest: 0.1549608\tbest: 0.1550241 (1242)\ttotal: 39.1s\tremaining: 0us\n","bestTest = 0.1550241133\n","bestIteration = 1242\n","Shrink model to first 1243 iterations.\n","Train wmae score: 0.35009262341524006\n","Val wmae score: 0.3767248004195187\n","Модель с 20 лучшими фичами выдает WMAE = 0.37837688418913257\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 37.1ms\tremaining: 46.3s\n","200:\tlearn: 0.7081602\ttest: 0.1314937\tbest: 0.1314937 (200)\ttotal: 3.85s\tremaining: 20.1s\n","400:\tlearn: 0.7125192\ttest: 0.1388593\tbest: 0.1389248 (389)\ttotal: 7.87s\tremaining: 16.7s\n","600:\tlearn: 0.7158198\ttest: 0.1445555\tbest: 0.1446383 (598)\ttotal: 8.97s\tremaining: 9.69s\n","800:\tlearn: 0.7191105\ttest: 0.1490926\tbest: 0.1490993 (796)\ttotal: 10s\tremaining: 5.6s\n","1000:\tlearn: 0.7221104\ttest: 0.1539700\tbest: 0.1541189 (999)\ttotal: 11s\tremaining: 2.74s\n","1200:\tlearn: 0.7248542\ttest: 0.1585835\tbest: 0.1585835 (1200)\ttotal: 12.1s\tremaining: 494ms\n","1249:\tlearn: 0.7255133\ttest: 0.1596388\tbest: 0.1596404 (1247)\ttotal: 12.9s\tremaining: 0us\n","bestTest = 0.1596403815\n","bestIteration = 1247\n","Shrink model to first 1248 iterations.\n","Train wmae score: 0.348359220414518\n","Val wmae score: 0.38013474594563923\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 15.5ms\tremaining: 19.4s\n","200:\tlearn: 0.7097611\ttest: 0.1317862\tbest: 0.1318985 (196)\ttotal: 5.9s\tremaining: 30.8s\n","400:\tlearn: 0.7142650\ttest: 0.1428140\tbest: 0.1428140 (400)\ttotal: 9.91s\tremaining: 21s\n","600:\tlearn: 0.7180015\ttest: 0.1479974\tbest: 0.1480878 (598)\ttotal: 12.3s\tremaining: 13.3s\n","800:\tlearn: 0.7208445\ttest: 0.1517569\tbest: 0.1519145 (773)\ttotal: 13.4s\tremaining: 7.51s\n","1000:\tlearn: 0.7234608\ttest: 0.1550824\tbest: 0.1554003 (991)\ttotal: 14.4s\tremaining: 3.58s\n","1200:\tlearn: 0.7264679\ttest: 0.1592979\tbest: 0.1593120 (1182)\ttotal: 18.3s\tremaining: 746ms\n","1249:\tlearn: 0.7272099\ttest: 0.1601781\tbest: 0.1603716 (1245)\ttotal: 18.6s\tremaining: 0us\n","bestTest = 0.1603716076\n","bestIteration = 1245\n","Shrink model to first 1246 iterations.\n","Train wmae score: 0.34791079065888875\n","Val wmae score: 0.38017591492510056\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 9.04ms\tremaining: 11.3s\n","200:\tlearn: 0.7060451\ttest: 0.1258374\tbest: 0.1259994 (199)\ttotal: 1.19s\tremaining: 6.24s\n","400:\tlearn: 0.7107293\ttest: 0.1332366\tbest: 0.1336490 (388)\ttotal: 2.19s\tremaining: 4.63s\n","600:\tlearn: 0.7148985\ttest: 0.1407251\tbest: 0.1407251 (600)\ttotal: 3.2s\tremaining: 3.46s\n","800:\tlearn: 0.7182869\ttest: 0.1458061\tbest: 0.1458771 (793)\ttotal: 4.19s\tremaining: 2.35s\n","1000:\tlearn: 0.7217594\ttest: 0.1510264\tbest: 0.1511573 (998)\ttotal: 5.19s\tremaining: 1.29s\n","1200:\tlearn: 0.7246079\ttest: 0.1547359\tbest: 0.1548067 (1195)\ttotal: 6.29s\tremaining: 257ms\n","1249:\tlearn: 0.7252410\ttest: 0.1556100\tbest: 0.1558729 (1235)\ttotal: 6.53s\tremaining: 0us\n","bestTest = 0.1558728508\n","bestIteration = 1235\n","Shrink model to first 1236 iterations.\n","Train wmae score: 0.35002137004090494\n","Val wmae score: 0.37738441450753796\n","Модель с 21 лучшими фичами выдает WMAE = 0.37923169179275923\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 15.4ms\tremaining: 19.2s\n","200:\tlearn: 0.7074237\ttest: 0.1304671\tbest: 0.1304671 (200)\ttotal: 1.99s\tremaining: 10.4s\n","400:\tlearn: 0.7120980\ttest: 0.1381358\tbest: 0.1381358 (400)\ttotal: 3s\tremaining: 6.36s\n","600:\tlearn: 0.7159505\ttest: 0.1445249\tbest: 0.1445249 (600)\ttotal: 4.04s\tremaining: 4.36s\n","800:\tlearn: 0.7189803\ttest: 0.1503287\tbest: 0.1503347 (799)\ttotal: 5.05s\tremaining: 2.83s\n","1000:\tlearn: 0.7222070\ttest: 0.1563676\tbest: 0.1566753 (999)\ttotal: 6.06s\tremaining: 1.51s\n","1200:\tlearn: 0.7250739\ttest: 0.1599236\tbest: 0.1599236 (1200)\ttotal: 7.06s\tremaining: 288ms\n","1249:\tlearn: 0.7255638\ttest: 0.1605343\tbest: 0.1608872 (1229)\ttotal: 7.29s\tremaining: 0us\n","bestTest = 0.1608872047\n","bestIteration = 1229\n","Shrink model to first 1230 iterations.\n","Train wmae score: 0.34813560446363323\n","Val wmae score: 0.37901609261680097\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 6.57ms\tremaining: 8.2s\n","200:\tlearn: 0.7094766\ttest: 0.1309459\tbest: 0.1309459 (200)\ttotal: 1.17s\tremaining: 6.08s\n","400:\tlearn: 0.7143834\ttest: 0.1418849\tbest: 0.1418849 (400)\ttotal: 5.16s\tremaining: 10.9s\n","600:\tlearn: 0.7178259\ttest: 0.1473641\tbest: 0.1479063 (575)\ttotal: 6.25s\tremaining: 6.75s\n","800:\tlearn: 0.7207913\ttest: 0.1522861\tbest: 0.1523027 (799)\ttotal: 7.3s\tremaining: 4.09s\n","1000:\tlearn: 0.7239002\ttest: 0.1561045\tbest: 0.1561617 (998)\ttotal: 8.35s\tremaining: 2.08s\n","1200:\tlearn: 0.7264881\ttest: 0.1611408\tbest: 0.1612178 (1199)\ttotal: 9.47s\tremaining: 386ms\n","1249:\tlearn: 0.7273907\ttest: 0.1622160\tbest: 0.1624410 (1226)\ttotal: 9.72s\tremaining: 0us\n","bestTest = 0.1624410392\n","bestIteration = 1226\n","Shrink model to first 1227 iterations.\n","Train wmae score: 0.347816337876753\n","Val wmae score: 0.37952226550876844\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 9.49ms\tremaining: 11.9s\n","200:\tlearn: 0.7059603\ttest: 0.1256505\tbest: 0.1258900 (192)\ttotal: 1.22s\tremaining: 6.39s\n","400:\tlearn: 0.7108045\ttest: 0.1338195\tbest: 0.1340638 (396)\ttotal: 2.25s\tremaining: 4.76s\n","600:\tlearn: 0.7148962\ttest: 0.1402945\tbest: 0.1405789 (588)\ttotal: 5.67s\tremaining: 6.12s\n","800:\tlearn: 0.7175347\ttest: 0.1455763\tbest: 0.1456369 (797)\ttotal: 8.05s\tremaining: 4.51s\n","1000:\tlearn: 0.7209601\ttest: 0.1503887\tbest: 0.1505682 (994)\ttotal: 9.09s\tremaining: 2.26s\n","1200:\tlearn: 0.7239683\ttest: 0.1536929\tbest: 0.1538006 (1197)\ttotal: 10.4s\tremaining: 423ms\n","1249:\tlearn: 0.7250473\ttest: 0.1548540\tbest: 0.1549256 (1237)\ttotal: 11.1s\tremaining: 0us\n","bestTest = 0.1549256207\n","bestIteration = 1237\n","Shrink model to first 1238 iterations.\n","Train wmae score: 0.3498788383098649\n","Val wmae score: 0.3759733493939571\n","Модель с 22 лучшими фичами выдает WMAE = 0.37817056917317543\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 32.3ms\tremaining: 40.4s\n","200:\tlearn: 0.7072579\ttest: 0.1296484\tbest: 0.1297332 (197)\ttotal: 8.27s\tremaining: 43.2s\n","400:\tlearn: 0.7116279\ttest: 0.1374764\tbest: 0.1375072 (385)\ttotal: 12.5s\tremaining: 26.5s\n","600:\tlearn: 0.7151136\ttest: 0.1439119\tbest: 0.1439728 (599)\ttotal: 14s\tremaining: 15.1s\n","800:\tlearn: 0.7183168\ttest: 0.1499563\tbest: 0.1501152 (789)\ttotal: 19.2s\tremaining: 10.8s\n","1000:\tlearn: 0.7217862\ttest: 0.1542866\tbest: 0.1545985 (999)\ttotal: 21.7s\tremaining: 5.41s\n","1200:\tlearn: 0.7243064\ttest: 0.1589957\tbest: 0.1591760 (1199)\ttotal: 22.8s\tremaining: 932ms\n","1249:\tlearn: 0.7248952\ttest: 0.1597504\tbest: 0.1599762 (1247)\ttotal: 23.1s\tremaining: 0us\n","bestTest = 0.1599761833\n","bestIteration = 1247\n","Shrink model to first 1248 iterations.\n","Train wmae score: 0.3485633154702876\n","Val wmae score: 0.37949934025929144\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 9.18ms\tremaining: 11.5s\n","200:\tlearn: 0.7095603\ttest: 0.1317136\tbest: 0.1318705 (199)\ttotal: 1.19s\tremaining: 6.22s\n","400:\tlearn: 0.7140585\ttest: 0.1417959\tbest: 0.1417959 (400)\ttotal: 2.21s\tremaining: 4.69s\n","600:\tlearn: 0.7176045\ttest: 0.1487459\tbest: 0.1487459 (600)\ttotal: 4.97s\tremaining: 5.37s\n","800:\tlearn: 0.7206818\ttest: 0.1526283\tbest: 0.1528652 (786)\ttotal: 9.7s\tremaining: 5.44s\n","1000:\tlearn: 0.7233529\ttest: 0.1577797\tbest: 0.1577797 (1000)\ttotal: 14.8s\tremaining: 3.68s\n","1200:\tlearn: 0.7267205\ttest: 0.1617672\tbest: 0.1619824 (1194)\ttotal: 21.2s\tremaining: 866ms\n","1249:\tlearn: 0.7274846\ttest: 0.1625616\tbest: 0.1628486 (1238)\ttotal: 22.1s\tremaining: 0us\n","bestTest = 0.1628486014\n","bestIteration = 1238\n","Shrink model to first 1239 iterations.\n","Train wmae score: 0.3478779549255914\n","Val wmae score: 0.3786842308616604\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 24ms\tremaining: 30s\n","200:\tlearn: 0.7059420\ttest: 0.1259610\tbest: 0.1259610 (200)\ttotal: 3.77s\tremaining: 19.7s\n","400:\tlearn: 0.7111917\ttest: 0.1349817\tbest: 0.1351376 (393)\ttotal: 9.59s\tremaining: 20.3s\n","600:\tlearn: 0.7147657\ttest: 0.1416280\tbest: 0.1418759 (594)\ttotal: 10.8s\tremaining: 11.6s\n","800:\tlearn: 0.7180783\ttest: 0.1467077\tbest: 0.1467720 (795)\ttotal: 11.8s\tremaining: 6.61s\n","1000:\tlearn: 0.7211729\ttest: 0.1511085\tbest: 0.1515803 (976)\ttotal: 12.8s\tremaining: 3.19s\n","1200:\tlearn: 0.7240767\ttest: 0.1550260\tbest: 0.1550478 (1199)\ttotal: 13.8s\tremaining: 564ms\n","1249:\tlearn: 0.7248581\ttest: 0.1568882\tbest: 0.1570313 (1247)\ttotal: 14.1s\tremaining: 0us\n","bestTest = 0.1570313243\n","bestIteration = 1247\n","Shrink model to first 1248 iterations.\n","Train wmae score: 0.3493678038299318\n","Val wmae score: 0.37396363502291985\n","Модель с 23 лучшими фичами выдает WMAE = 0.37738240204795725\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 9.3ms\tremaining: 11.6s\n","200:\tlearn: 0.7076550\ttest: 0.1303875\tbest: 0.1307898 (190)\ttotal: 1.29s\tremaining: 6.72s\n","400:\tlearn: 0.7119016\ttest: 0.1379541\tbest: 0.1382101 (388)\ttotal: 5.25s\tremaining: 11.1s\n","600:\tlearn: 0.7155460\ttest: 0.1451513\tbest: 0.1451681 (595)\ttotal: 6.38s\tremaining: 6.89s\n","800:\tlearn: 0.7189718\ttest: 0.1502144\tbest: 0.1502144 (800)\ttotal: 7.39s\tremaining: 4.14s\n","1000:\tlearn: 0.7221772\ttest: 0.1546290\tbest: 0.1551187 (996)\ttotal: 8.4s\tremaining: 2.09s\n","1200:\tlearn: 0.7250776\ttest: 0.1590476\tbest: 0.1592505 (1196)\ttotal: 9.41s\tremaining: 384ms\n","1249:\tlearn: 0.7256153\ttest: 0.1600400\tbest: 0.1602133 (1242)\ttotal: 9.68s\tremaining: 0us\n","bestTest = 0.1602133031\n","bestIteration = 1242\n","Shrink model to first 1243 iterations.\n","Train wmae score: 0.3476634562269408\n","Val wmae score: 0.37830364406699624\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 9.44ms\tremaining: 11.8s\n","200:\tlearn: 0.7089503\ttest: 0.1297271\tbest: 0.1298186 (195)\ttotal: 1.23s\tremaining: 6.43s\n","400:\tlearn: 0.7140310\ttest: 0.1413566\tbest: 0.1415207 (399)\ttotal: 2.28s\tremaining: 4.83s\n","600:\tlearn: 0.7177550\ttest: 0.1482987\tbest: 0.1483724 (599)\ttotal: 4.97s\tremaining: 5.37s\n","800:\tlearn: 0.7203685\ttest: 0.1520081\tbest: 0.1520572 (777)\ttotal: 7.22s\tremaining: 4.05s\n","1000:\tlearn: 0.7237065\ttest: 0.1574892\tbest: 0.1577182 (991)\ttotal: 8.28s\tremaining: 2.06s\n","1200:\tlearn: 0.7265192\ttest: 0.1614746\tbest: 0.1615658 (1195)\ttotal: 9.31s\tremaining: 380ms\n","1249:\tlearn: 0.7274001\ttest: 0.1625812\tbest: 0.1626516 (1248)\ttotal: 9.55s\tremaining: 0us\n","bestTest = 0.1626515709\n","bestIteration = 1248\n","Shrink model to first 1249 iterations.\n","Train wmae score: 0.34687233458009936\n","Val wmae score: 0.3766051181998129\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 9.32ms\tremaining: 11.6s\n","200:\tlearn: 0.7058736\ttest: 0.1269488\tbest: 0.1269488 (200)\ttotal: 1.24s\tremaining: 6.47s\n","400:\tlearn: 0.7113776\ttest: 0.1342047\tbest: 0.1342047 (400)\ttotal: 2.26s\tremaining: 4.78s\n","600:\tlearn: 0.7149506\ttest: 0.1405161\tbest: 0.1405349 (598)\ttotal: 3.26s\tremaining: 3.52s\n","800:\tlearn: 0.7184840\ttest: 0.1449779\tbest: 0.1453541 (797)\ttotal: 4.31s\tremaining: 2.42s\n","1000:\tlearn: 0.7212871\ttest: 0.1503052\tbest: 0.1503052 (1000)\ttotal: 8.35s\tremaining: 2.08s\n","1200:\tlearn: 0.7238902\ttest: 0.1542099\tbest: 0.1542099 (1200)\ttotal: 9.44s\tremaining: 385ms\n","1249:\tlearn: 0.7246298\ttest: 0.1547345\tbest: 0.1550754 (1243)\ttotal: 9.73s\tremaining: 0us\n","bestTest = 0.1550753711\n","bestIteration = 1243\n","Shrink model to first 1244 iterations.\n","Train wmae score: 0.34928164268347406\n","Val wmae score: 0.37439797442931727\n","Модель с 24 лучшими фичами выдает WMAE = 0.3764355788987088\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 10.2ms\tremaining: 12.7s\n","200:\tlearn: 0.7077448\ttest: 0.1302037\tbest: 0.1302037 (200)\ttotal: 1.21s\tremaining: 6.33s\n","400:\tlearn: 0.7122741\ttest: 0.1388024\tbest: 0.1394453 (388)\ttotal: 2.22s\tremaining: 4.71s\n","600:\tlearn: 0.7161286\ttest: 0.1456043\tbest: 0.1456043 (600)\ttotal: 3.22s\tremaining: 3.48s\n","800:\tlearn: 0.7192029\ttest: 0.1512307\tbest: 0.1516101 (797)\ttotal: 4.23s\tremaining: 2.37s\n","1000:\tlearn: 0.7222833\ttest: 0.1561999\tbest: 0.1565170 (997)\ttotal: 6.59s\tremaining: 1.64s\n","1200:\tlearn: 0.7247330\ttest: 0.1605179\tbest: 0.1607278 (1199)\ttotal: 9.95s\tremaining: 406ms\n","1249:\tlearn: 0.7255186\ttest: 0.1620595\tbest: 0.1621321 (1240)\ttotal: 10.2s\tremaining: 0us\n","bestTest = 0.1621320866\n","bestIteration = 1240\n","Shrink model to first 1241 iterations.\n","Train wmae score: 0.3480811208258986\n","Val wmae score: 0.37982727137660105\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 9.84ms\tremaining: 12.3s\n","200:\tlearn: 0.7094662\ttest: 0.1307135\tbest: 0.1307135 (200)\ttotal: 1.23s\tremaining: 6.41s\n","400:\tlearn: 0.7145671\ttest: 0.1414172\tbest: 0.1414172 (400)\ttotal: 2.26s\tremaining: 4.79s\n","600:\tlearn: 0.7180890\ttest: 0.1477374\tbest: 0.1477374 (600)\ttotal: 3.29s\tremaining: 3.55s\n","800:\tlearn: 0.7211251\ttest: 0.1537339\tbest: 0.1538966 (796)\ttotal: 4.31s\tremaining: 2.42s\n","1000:\tlearn: 0.7242801\ttest: 0.1581754\tbest: 0.1583205 (996)\ttotal: 5.35s\tremaining: 1.33s\n","1200:\tlearn: 0.7273948\ttest: 0.1618095\tbest: 0.1618095 (1200)\ttotal: 6.38s\tremaining: 260ms\n","1249:\tlearn: 0.7279742\ttest: 0.1629370\tbest: 0.1629370 (1249)\ttotal: 7.09s\tremaining: 0us\n","bestTest = 0.1629369918\n","bestIteration = 1249\n","Train wmae score: 0.3466616040418428\n","Val wmae score: 0.3758568937816689\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 9.45ms\tremaining: 11.8s\n","200:\tlearn: 0.7059619\ttest: 0.1268108\tbest: 0.1268911 (195)\ttotal: 3.48s\tremaining: 18.2s\n","400:\tlearn: 0.7114799\ttest: 0.1347400\tbest: 0.1348280 (394)\ttotal: 9.11s\tremaining: 19.3s\n","600:\tlearn: 0.7150493\ttest: 0.1418827\tbest: 0.1418827 (600)\ttotal: 11s\tremaining: 11.9s\n","800:\tlearn: 0.7186392\ttest: 0.1471154\tbest: 0.1471154 (800)\ttotal: 16.1s\tremaining: 9.01s\n","1000:\tlearn: 0.7217989\ttest: 0.1503911\tbest: 0.1504854 (990)\ttotal: 19.6s\tremaining: 4.88s\n","1200:\tlearn: 0.7248684\ttest: 0.1557267\tbest: 0.1560134 (1197)\ttotal: 27.4s\tremaining: 1.12s\n","1249:\tlearn: 0.7257870\ttest: 0.1560517\tbest: 0.1567590 (1236)\ttotal: 28.6s\tremaining: 0us\n","bestTest = 0.1567590316\n","bestIteration = 1236\n","Shrink model to first 1237 iterations.\n","Train wmae score: 0.3490517201859262\n","Val wmae score: 0.37707818868239745\n","Модель с 25 лучшими фичами выдает WMAE = 0.3775874512802225\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 9.35ms\tremaining: 11.7s\n","200:\tlearn: 0.7077833\ttest: 0.1310893\tbest: 0.1310893 (200)\ttotal: 1.3s\tremaining: 6.79s\n","400:\tlearn: 0.7125165\ttest: 0.1390862\tbest: 0.1394283 (398)\ttotal: 2.4s\tremaining: 5.08s\n","600:\tlearn: 0.7159600\ttest: 0.1461990\tbest: 0.1461990 (600)\ttotal: 4.86s\tremaining: 5.25s\n","800:\tlearn: 0.7198488\ttest: 0.1508316\tbest: 0.1509691 (796)\ttotal: 11.6s\tremaining: 6.47s\n","1000:\tlearn: 0.7226888\ttest: 0.1556079\tbest: 0.1559295 (995)\ttotal: 15.2s\tremaining: 3.78s\n","1200:\tlearn: 0.7253764\ttest: 0.1598040\tbest: 0.1600939 (1185)\ttotal: 16.3s\tremaining: 666ms\n","1249:\tlearn: 0.7257100\ttest: 0.1602739\tbest: 0.1606738 (1243)\ttotal: 16.6s\tremaining: 0us\n","bestTest = 0.160673776\n","bestIteration = 1243\n","Shrink model to first 1244 iterations.\n","Train wmae score: 0.34784941872711833\n","Val wmae score: 0.38106877223720753\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 9.41ms\tremaining: 11.8s\n","200:\tlearn: 0.7095672\ttest: 0.1312251\tbest: 0.1312495 (199)\ttotal: 1.81s\tremaining: 9.43s\n","400:\tlearn: 0.7145806\ttest: 0.1426687\tbest: 0.1430118 (376)\ttotal: 5.19s\tremaining: 11s\n","600:\tlearn: 0.7182468\ttest: 0.1488415\tbest: 0.1489749 (595)\ttotal: 6.28s\tremaining: 6.78s\n","800:\tlearn: 0.7212498\ttest: 0.1536242\tbest: 0.1538872 (793)\ttotal: 7.31s\tremaining: 4.09s\n","1000:\tlearn: 0.7244199\ttest: 0.1585423\tbest: 0.1589456 (995)\ttotal: 8.36s\tremaining: 2.08s\n","1200:\tlearn: 0.7273269\ttest: 0.1628662\tbest: 0.1632445 (1198)\ttotal: 9.44s\tremaining: 385ms\n","1249:\tlearn: 0.7281845\ttest: 0.1639243\tbest: 0.1642531 (1246)\ttotal: 9.7s\tremaining: 0us\n","bestTest = 0.1642531273\n","bestIteration = 1246\n","Shrink model to first 1247 iterations.\n","Train wmae score: 0.3470562802825774\n","Val wmae score: 0.3779279996225109\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 12.8ms\tremaining: 16s\n","200:\tlearn: 0.7060020\ttest: 0.1271009\tbest: 0.1271009 (200)\ttotal: 1.35s\tremaining: 7.05s\n","400:\tlearn: 0.7110359\ttest: 0.1349983\tbest: 0.1349983 (400)\ttotal: 2.5s\tremaining: 5.3s\n","600:\tlearn: 0.7151600\ttest: 0.1423430\tbest: 0.1426185 (598)\ttotal: 6.39s\tremaining: 6.9s\n","800:\tlearn: 0.7182218\ttest: 0.1470416\tbest: 0.1472056 (792)\ttotal: 7.55s\tremaining: 4.23s\n","1000:\tlearn: 0.7213325\ttest: 0.1516355\tbest: 0.1517236 (995)\ttotal: 8.57s\tremaining: 2.13s\n","1200:\tlearn: 0.7246696\ttest: 0.1556952\tbest: 0.1557981 (1195)\ttotal: 9.66s\tremaining: 394ms\n","1249:\tlearn: 0.7254975\ttest: 0.1575127\tbest: 0.1575532 (1230)\ttotal: 9.93s\tremaining: 0us\n","bestTest = 0.157553158\n","bestIteration = 1230\n","Shrink model to first 1231 iterations.\n","Train wmae score: 0.34930449119320406\n","Val wmae score: 0.37620206554038593\n","Модель с 26 лучшими фичами выдает WMAE = 0.37839961246670145\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 9ms\tremaining: 11.2s\n","200:\tlearn: 0.7076390\ttest: 0.1301949\tbest: 0.1303684 (191)\ttotal: 1.19s\tremaining: 6.22s\n","400:\tlearn: 0.7118487\ttest: 0.1380524\tbest: 0.1382486 (386)\ttotal: 2.21s\tremaining: 4.67s\n","600:\tlearn: 0.7155399\ttest: 0.1443493\tbest: 0.1443493 (600)\ttotal: 3.24s\tremaining: 3.5s\n","800:\tlearn: 0.7185604\ttest: 0.1486921\tbest: 0.1492286 (786)\ttotal: 7.22s\tremaining: 4.05s\n","1000:\tlearn: 0.7216416\ttest: 0.1532733\tbest: 0.1539326 (980)\ttotal: 11.5s\tremaining: 2.86s\n","1200:\tlearn: 0.7243403\ttest: 0.1585307\tbest: 0.1590160 (1177)\ttotal: 13.9s\tremaining: 567ms\n","1249:\tlearn: 0.7250514\ttest: 0.1598906\tbest: 0.1601371 (1246)\ttotal: 14.2s\tremaining: 0us\n","bestTest = 0.1601370787\n","bestIteration = 1246\n","Shrink model to first 1247 iterations.\n","Train wmae score: 0.347664525071554\n","Val wmae score: 0.3816628719931784\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 78.8ms\tremaining: 1m 38s\n","200:\tlearn: 0.7093009\ttest: 0.1296293\tbest: 0.1297046 (197)\ttotal: 7.36s\tremaining: 38.4s\n","400:\tlearn: 0.7143187\ttest: 0.1414562\tbest: 0.1414562 (400)\ttotal: 10.5s\tremaining: 22.3s\n","600:\tlearn: 0.7185167\ttest: 0.1479343\tbest: 0.1479343 (600)\ttotal: 11.6s\tremaining: 12.5s\n","800:\tlearn: 0.7215040\ttest: 0.1531831\tbest: 0.1535795 (793)\ttotal: 12.6s\tremaining: 7.08s\n","1000:\tlearn: 0.7242393\ttest: 0.1587773\tbest: 0.1588987 (993)\ttotal: 13.7s\tremaining: 3.4s\n","1200:\tlearn: 0.7273045\ttest: 0.1630525\tbest: 0.1633006 (1189)\ttotal: 17.5s\tremaining: 715ms\n","1249:\tlearn: 0.7279144\ttest: 0.1631689\tbest: 0.1634946 (1217)\ttotal: 17.8s\tremaining: 0us\n","bestTest = 0.1634946109\n","bestIteration = 1217\n","Shrink model to first 1218 iterations.\n","Train wmae score: 0.3469018558284024\n","Val wmae score: 0.3780786724368889\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 9.07ms\tremaining: 11.3s\n","200:\tlearn: 0.7059074\ttest: 0.1272665\tbest: 0.1272665 (200)\ttotal: 1.16s\tremaining: 6.03s\n","400:\tlearn: 0.7113823\ttest: 0.1373572\tbest: 0.1374614 (392)\ttotal: 2.17s\tremaining: 4.59s\n","600:\tlearn: 0.7153179\ttest: 0.1446949\tbest: 0.1447362 (593)\ttotal: 3.19s\tremaining: 3.44s\n","800:\tlearn: 0.7184221\ttest: 0.1490549\tbest: 0.1490549 (800)\ttotal: 4.2s\tremaining: 2.35s\n","1000:\tlearn: 0.7216629\ttest: 0.1532578\tbest: 0.1535571 (985)\ttotal: 5.22s\tremaining: 1.3s\n","1200:\tlearn: 0.7250293\ttest: 0.1574468\tbest: 0.1574799 (1199)\ttotal: 6.23s\tremaining: 254ms\n","1249:\tlearn: 0.7256773\ttest: 0.1581654\tbest: 0.1581654 (1249)\ttotal: 6.48s\tremaining: 0us\n","bestTest = 0.1581653991\n","bestIteration = 1249\n","Train wmae score: 0.34844398992076187\n","Val wmae score: 0.37562737623341746\n","Модель с 27 лучшими фичами выдает WMAE = 0.3784563068878282\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 35.5ms\tremaining: 44.3s\n","200:\tlearn: 0.7073142\ttest: 0.1293792\tbest: 0.1293792 (200)\ttotal: 2.07s\tremaining: 10.8s\n","400:\tlearn: 0.7118172\ttest: 0.1378901\tbest: 0.1384024 (395)\ttotal: 3.08s\tremaining: 6.53s\n","600:\tlearn: 0.7157872\ttest: 0.1436844\tbest: 0.1436844 (600)\ttotal: 4.09s\tremaining: 4.42s\n","800:\tlearn: 0.7196582\ttest: 0.1492965\tbest: 0.1492996 (799)\ttotal: 5.11s\tremaining: 2.86s\n","1000:\tlearn: 0.7224507\ttest: 0.1538446\tbest: 0.1545673 (995)\ttotal: 6.14s\tremaining: 1.53s\n","1200:\tlearn: 0.7254384\ttest: 0.1586702\tbest: 0.1588907 (1198)\ttotal: 7.17s\tremaining: 292ms\n","1249:\tlearn: 0.7259581\ttest: 0.1599219\tbest: 0.1601469 (1245)\ttotal: 7.41s\tremaining: 0us\n","bestTest = 0.1601469315\n","bestIteration = 1245\n","Shrink model to first 1246 iterations.\n","Train wmae score: 0.34718897823824196\n","Val wmae score: 0.3813179237520036\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 12.3ms\tremaining: 15.4s\n","200:\tlearn: 0.7094364\ttest: 0.1309007\tbest: 0.1310643 (198)\ttotal: 1.52s\tremaining: 7.95s\n","400:\tlearn: 0.7146141\ttest: 0.1419177\tbest: 0.1419177 (400)\ttotal: 5.24s\tremaining: 11.1s\n","600:\tlearn: 0.7178544\ttest: 0.1484079\tbest: 0.1484079 (600)\ttotal: 6.31s\tremaining: 6.82s\n","800:\tlearn: 0.7213264\ttest: 0.1540008\tbest: 0.1540284 (796)\ttotal: 7.33s\tremaining: 4.11s\n","1000:\tlearn: 0.7247282\ttest: 0.1585867\tbest: 0.1585867 (1000)\ttotal: 8.36s\tremaining: 2.08s\n","1200:\tlearn: 0.7275206\ttest: 0.1639555\tbest: 0.1640304 (1179)\ttotal: 9.39s\tremaining: 383ms\n","1249:\tlearn: 0.7283055\ttest: 0.1650797\tbest: 0.1651371 (1244)\ttotal: 9.64s\tremaining: 0us\n","bestTest = 0.1651370502\n","bestIteration = 1244\n","Shrink model to first 1245 iterations.\n","Train wmae score: 0.34649633190564166\n","Val wmae score: 0.377030176967156\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 9.33ms\tremaining: 11.7s\n","200:\tlearn: 0.7061215\ttest: 0.1278796\tbest: 0.1283809 (196)\ttotal: 1.24s\tremaining: 6.47s\n","400:\tlearn: 0.7110183\ttest: 0.1363451\tbest: 0.1363451 (400)\ttotal: 2.26s\tremaining: 4.79s\n","600:\tlearn: 0.7150628\ttest: 0.1433788\tbest: 0.1434351 (596)\ttotal: 6.22s\tremaining: 6.72s\n","800:\tlearn: 0.7181392\ttest: 0.1486825\tbest: 0.1490588 (799)\ttotal: 7.4s\tremaining: 4.15s\n","1000:\tlearn: 0.7218013\ttest: 0.1528161\tbest: 0.1528968 (999)\ttotal: 8.46s\tremaining: 2.1s\n","1200:\tlearn: 0.7249184\ttest: 0.1571456\tbest: 0.1573039 (1190)\ttotal: 9.5s\tremaining: 388ms\n","1249:\tlearn: 0.7258327\ttest: 0.1587790\tbest: 0.1588881 (1244)\ttotal: 9.77s\tremaining: 0us\n","bestTest = 0.1588880887\n","bestIteration = 1244\n","Shrink model to first 1245 iterations.\n","Train wmae score: 0.3484408884509628\n","Val wmae score: 0.37809522799572826\n","Модель с 28 лучшими фичами выдает WMAE = 0.37881444290496263\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 9.56ms\tremaining: 11.9s\n","200:\tlearn: 0.7074081\ttest: 0.1289054\tbest: 0.1289054 (200)\ttotal: 1.22s\tremaining: 6.39s\n","400:\tlearn: 0.7115556\ttest: 0.1376900\tbest: 0.1380199 (385)\ttotal: 2.25s\tremaining: 4.77s\n","600:\tlearn: 0.7157434\ttest: 0.1437243\tbest: 0.1437594 (591)\ttotal: 3.28s\tremaining: 3.55s\n","800:\tlearn: 0.7191963\ttest: 0.1493981\tbest: 0.1494200 (799)\ttotal: 6.97s\tremaining: 3.91s\n","1000:\tlearn: 0.7223856\ttest: 0.1533833\tbest: 0.1542093 (995)\ttotal: 8.54s\tremaining: 2.12s\n","1200:\tlearn: 0.7253940\ttest: 0.1582754\tbest: 0.1582754 (1200)\ttotal: 9.6s\tremaining: 392ms\n","1249:\tlearn: 0.7260688\ttest: 0.1598657\tbest: 0.1598657 (1249)\ttotal: 9.84s\tremaining: 0us\n","bestTest = 0.1598657062\n","bestIteration = 1249\n","Train wmae score: 0.3473357245673793\n","Val wmae score: 0.3804027668627202\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 9.72ms\tremaining: 12.1s\n","200:\tlearn: 0.7096878\ttest: 0.1305260\tbest: 0.1305265 (198)\ttotal: 1.21s\tremaining: 6.3s\n","400:\tlearn: 0.7145961\ttest: 0.1421841\tbest: 0.1425408 (399)\ttotal: 2.25s\tremaining: 4.76s\n","600:\tlearn: 0.7183991\ttest: 0.1487881\tbest: 0.1487993 (591)\ttotal: 3.29s\tremaining: 3.55s\n","800:\tlearn: 0.7213843\ttest: 0.1543871\tbest: 0.1548211 (793)\ttotal: 4.31s\tremaining: 2.42s\n","1000:\tlearn: 0.7251473\ttest: 0.1597331\tbest: 0.1602162 (997)\ttotal: 6.69s\tremaining: 1.67s\n","1200:\tlearn: 0.7280632\ttest: 0.1637874\tbest: 0.1639798 (1192)\ttotal: 9.52s\tremaining: 388ms\n","1249:\tlearn: 0.7286381\ttest: 0.1650677\tbest: 0.1654010 (1237)\ttotal: 9.78s\tremaining: 0us\n","bestTest = 0.165401024\n","bestIteration = 1237\n","Shrink model to first 1238 iterations.\n","Train wmae score: 0.3461647002484981\n","Val wmae score: 0.37729625814817375\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 9.36ms\tremaining: 11.7s\n","200:\tlearn: 0.7056545\ttest: 0.1260820\tbest: 0.1261560 (199)\ttotal: 1.2s\tremaining: 6.27s\n","400:\tlearn: 0.7113401\ttest: 0.1358478\tbest: 0.1359635 (396)\ttotal: 2.24s\tremaining: 4.74s\n","600:\tlearn: 0.7145954\ttest: 0.1423693\tbest: 0.1427276 (592)\ttotal: 3.27s\tremaining: 3.53s\n","800:\tlearn: 0.7182783\ttest: 0.1482299\tbest: 0.1484550 (799)\ttotal: 4.32s\tremaining: 2.42s\n","1000:\tlearn: 0.7214918\ttest: 0.1531442\tbest: 0.1533508 (996)\ttotal: 5.34s\tremaining: 1.33s\n","1200:\tlearn: 0.7247079\ttest: 0.1577906\tbest: 0.1577906 (1200)\ttotal: 6.56s\tremaining: 268ms\n","1249:\tlearn: 0.7259977\ttest: 0.1588707\tbest: 0.1593389 (1245)\ttotal: 7.74s\tremaining: 0us\n","bestTest = 0.1593388851\n","bestIteration = 1245\n","Shrink model to first 1246 iterations.\n","Train wmae score: 0.3481795210712043\n","Val wmae score: 0.3753456790650863\n","Модель с 29 лучшими фичами выдает WMAE = 0.3776815680253267\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6986221\ttest: 0.1058828\tbest: 0.1058828 (0)\ttotal: 9.6ms\tremaining: 12s\n","200:\tlearn: 0.7074081\ttest: 0.1289054\tbest: 0.1289054 (200)\ttotal: 1.3s\tremaining: 6.8s\n","400:\tlearn: 0.7116955\ttest: 0.1381118\tbest: 0.1381118 (400)\ttotal: 2.34s\tremaining: 4.95s\n","600:\tlearn: 0.7159513\ttest: 0.1447171\tbest: 0.1447171 (600)\ttotal: 3.37s\tremaining: 3.64s\n","800:\tlearn: 0.7193424\ttest: 0.1505039\tbest: 0.1505039 (800)\ttotal: 4.39s\tremaining: 2.46s\n","1000:\tlearn: 0.7222725\ttest: 0.1543335\tbest: 0.1544837 (999)\ttotal: 5.41s\tremaining: 1.35s\n","1200:\tlearn: 0.7252257\ttest: 0.1591660\tbest: 0.1591660 (1200)\ttotal: 6.43s\tremaining: 263ms\n","1249:\tlearn: 0.7260437\ttest: 0.1602184\tbest: 0.1606831 (1244)\ttotal: 6.68s\tremaining: 0us\n","bestTest = 0.1606831052\n","bestIteration = 1244\n","Shrink model to first 1245 iterations.\n","Train wmae score: 0.3474061134421822\n","Val wmae score: 0.38103806795553935\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6996031\ttest: 0.1047886\tbest: 0.1047886 (0)\ttotal: 9.48ms\tremaining: 11.8s\n","200:\tlearn: 0.7096878\ttest: 0.1305260\tbest: 0.1305265 (198)\ttotal: 4.13s\tremaining: 21.5s\n","400:\tlearn: 0.7145950\ttest: 0.1421014\tbest: 0.1424581 (399)\ttotal: 5.78s\tremaining: 12.2s\n","600:\tlearn: 0.7184611\ttest: 0.1492367\tbest: 0.1492367 (600)\ttotal: 9.37s\tremaining: 10.1s\n","800:\tlearn: 0.7215570\ttest: 0.1540514\tbest: 0.1541398 (799)\ttotal: 14.8s\tremaining: 8.28s\n","1000:\tlearn: 0.7249218\ttest: 0.1594343\tbest: 0.1597500 (991)\ttotal: 20s\tremaining: 4.96s\n","1200:\tlearn: 0.7278898\ttest: 0.1642763\tbest: 0.1646143 (1180)\ttotal: 23s\tremaining: 936ms\n","1249:\tlearn: 0.7285922\ttest: 0.1657028\tbest: 0.1657819 (1244)\ttotal: 23.6s\tremaining: 0us\n","bestTest = 0.1657818694\n","bestIteration = 1244\n","Shrink model to first 1245 iterations.\n","Train wmae score: 0.34623323956304186\n","Val wmae score: 0.37831055764178345\n","Class weights: {1: 1.5445714285714287, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","0:\tlearn: 0.6989107\ttest: 0.1055440\tbest: 0.1055440 (0)\ttotal: 39.7ms\tremaining: 49.5s\n","200:\tlearn: 0.7056768\ttest: 0.1266816\tbest: 0.1267421 (194)\ttotal: 7.05s\tremaining: 36.8s\n","400:\tlearn: 0.7113055\ttest: 0.1350884\tbest: 0.1355013 (393)\ttotal: 10.9s\tremaining: 23.2s\n","600:\tlearn: 0.7153576\ttest: 0.1435278\tbest: 0.1435378 (595)\ttotal: 13.1s\tremaining: 14.2s\n","800:\tlearn: 0.7183869\ttest: 0.1492040\tbest: 0.1492939 (798)\ttotal: 19s\tremaining: 10.6s\n","1000:\tlearn: 0.7220630\ttest: 0.1541269\tbest: 0.1542979 (990)\ttotal: 20.9s\tremaining: 5.21s\n","1200:\tlearn: 0.7250900\ttest: 0.1583206\tbest: 0.1583206 (1200)\ttotal: 22s\tremaining: 898ms\n","1249:\tlearn: 0.7258545\ttest: 0.1591079\tbest: 0.1592496 (1238)\ttotal: 22.4s\tremaining: 0us\n","bestTest = 0.1592496468\n","bestIteration = 1238\n","Shrink model to first 1239 iterations.\n","Train wmae score: 0.3480689655547255\n","Val wmae score: 0.3769344667308531\n","Модель с 30 лучшими фичами выдает WMAE = 0.37876103077605866\n","ЛУЧШАЯ МОДЕЛЬ с 24 лучшими фичами выдает WMAE = 0.3764355788987088\n"]}]},{"cell_type":"code","source":["# for col in new_low_imp_features: # добавим неважные признаки в соответствующий массив\n","#     if col not in low_imp_features:\n","#         low_imp_features.append(col)"],"metadata":{"id":"oLiNKt5nJHyn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# imp_cb_features_df.iloc[25:]['Feature Id'].values"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nYp5QH7R-66a","executionInfo":{"status":"ok","timestamp":1748428510504,"user_tz":-180,"elapsed":30,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"1cfb8223-a290-4c2f-dfb3-619e7dfd7baa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['std_month', 'sum_evening_transactions',\n","       'total_transaction_amount_multiply_mean_min_transaction_amount_by_merchant',\n","       'mcc_mean_amount_other', 'used_mcc_frequency_6536'], dtype=object)"]},"metadata":{},"execution_count":97}]},{"cell_type":"code","source":["# for col in imp_cb_features_df.iloc[25:]['Feature Id'].values: # добавим неважные признаки в соответствующий массив\n","#     if col not in low_imp_features:\n","#         low_imp_features.append(col)"],"metadata":{"id":"D3TroHZP8Io5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["corr_matrix = X.corr()\n","\n","plt.figure(figsize=(7, 7))\n","sns.heatmap(corr_matrix, annot=False, cmap='coolwarm');"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":921},"id":"HJoZ8fflGvqJ","executionInfo":{"status":"ok","timestamp":1748437271597,"user_tz":-180,"elapsed":808,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"08b8ca8a-dccb-47db-c883-a7f6e047e652"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 700x700 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"DyiQ6u5UEHZS"},"source":["### Random State=201"]},{"cell_type":"code","source":["%%time\n","cb_tuned_params.update(cb_init_params)\n","cb2_mean_wmae, cb_model_2, X_train_of_bm, y_train_of_bm = train_model(\n","    my_model=CatBoostClassifier,\n","    X=X,\n","    y=y,\n","    early_stopping_rounds=50,\n","    init_params=cb_tuned_params,\n","    cat_features=cat_cols,\n","    rs=201,\n","    n_splits=3,\n","    class_weights=True)  # Передаем веса в функцию обучения)\n","\n","print(f'MEAN WMAE = {cb2_mean_wmae}')"],"metadata":{"id":"Wird-N9sZ46f"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vuKCro7wEwI3"},"outputs":[],"source":["cb_model_2.best_score_"]},{"cell_type":"markdown","metadata":{"id":"cipFNiZ7Exk-"},"source":["#### Делаем предсказание на тестовых данных"]},{"cell_type":"markdown","metadata":{"id":"xN3Fx3YmFcNe"},"source":["#### Визуализация результатов"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MydALUF4Fh0Q"},"outputs":[],"source":["imp_cb2_features_df, imp_cb2_features_list = shap_importance(cb_model_2, X_train_of_bm[:5000], max_display=30) # len(aggregated_train.columns) для дальнейшей кросс-валидации"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"G6-PPF9n_ZV3"},"outputs":[],"source":["imp_cb2_features_df2 = cb_model_2.get_feature_importance(prettified=True)\n","imp_cb2_features_df2.iloc[:30]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afl-0ahA9u2M"},"outputs":[],"source":["# plt.figure(figsize=(15, 5), dpi=200)\n","sns.barplot(imp_feat_cb_df, x='Feature Id', y='Importances', palette='Set1')\n","plt.xticks(rotation=90);"]},{"cell_type":"markdown","metadata":{"id":"UBfAWlC0PkPl"},"source":["## XGBoost"]},{"cell_type":"markdown","metadata":{"id":"brmpeXALQFkp"},"source":["#### Создаем гиперпараметры"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zT_2lpC4Ncjy"},"outputs":[],"source":["xgb_dart_grid_params = {\n","    'learning_rate': [0.1],  # Скорость обучения\n","    'max_depth': [4],           # Максимальная глубина деревьев\n","    'n_estimators': [1000],    # Количество деревьев (итераций)\n","    'subsample': [0.9],        # Доля объектов для бэггинга\n","    # 'colsample_bytree': [0.9, 1.0], # Доля признаков для каждого дерева\n","    # 'gamma': [0.1, 0.5],              # Минимальное снижение потери для разбиения\n","    # 'reg_alpha': [0.1, 1.0],          # Регуляризация L1\n","    # 'reg_lambda': [0.1, 1.0],         # Регуляризация L2\n","\n","    # 'min_child_weight': [1, 3, 5],       # Минимальный вес объектов в листе\n","    # 'objective': ['multi:softmax', 'multi:softprob'],  # Целевая функция\n","    # 'eval_metric': ['mlogloss', 'merror'],             # Метрика для оценки\n","    # 'scale_pos_weight': [1, 5, 10],     # Вес положительного класса (для несбалансированных данных)\n","\n","    # 'rate_drop': [0.05, 0.2],  # 0 - деревья не отбрасываются. Для booster='dart'\n","    # 'one_drop': [0, 1],  # Для booster='dart'\n","    'skip_drop': [0.05, 0.2]  # Для booster='dart'\n","}\n","\n","\n","xgb_fit_params = {\n","    'verbose': 0\n","}"]},{"cell_type":"markdown","metadata":{"id":"LHlyefvqQbyh"},"source":["#### Кодируем категориальные признаки"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Aum50KZVQX8b"},"outputs":[],"source":["X_xgb = X.copy()\n","\n","for col in cat_cols:\n","    X_xgb[col] = X_xgb[col].astype('category')"]},{"cell_type":"markdown","metadata":{"id":"-PcOKl9yQ1ty"},"source":["### DART"]},{"cell_type":"markdown","metadata":{"id":"09aH-p88w_aG"},"source":["#### Тюним параметры и обучаем модель"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z9Z8cNOqQ5Tk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442545796,"user_tz":-180,"elapsed":33,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"192adefd-7583-4ef4-d181-eeea9c3b2d3c"},"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 5 µs, sys: 0 ns, total: 5 µs\n","Wall time: 10 µs\n"]}],"source":["%%time\n","xgb_dart_init_params = {\n","    'booster': 'dart',\n","    'enable_categorical': True,\n","    # 'objective': 'multi:softprob',\n","    'verbosity': 0,\n","    'nthread': -1,\n","    'device': 'gpu',\n","    'seed': 101,\n","    'early_stopping_rounds': 100,\n","}\n","\n","xgb_dart_tuned_params = tuning_params(\n","    my_model=XGBClassifier,\n","    X=X_xgb,\n","    y=y,\n","    init_params=xgb_dart_init_params,\n","    fit_params=xgb_fit_params,\n","    grid_params=xgb_dart_grid_params,\n","    n_iter=1000,\n","    cv=3,\n","    rs=101\n",")\n","\n","xgb_dart_tuned_params"]},{"cell_type":"code","source":["# xgb_dart_tuned_params = {\n","#     'rate_drop': 0.2,  # 0 - деревья не отбрасываются. Для booster='dart'\n","#     'one_drop': 1,  # Для booster='dart'\n","#     'skip_drop': 0.2,\n","#     'subsample': 0.9\n","# }"],"metadata":{"id":"aqkjU7LUXKiA"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9WUM1vkqpNyC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748442551480,"user_tz":-180,"elapsed":3886,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"a33d7122-2de2-40f4-f3fb-7dd7bb3813ec"},"outputs":[{"output_type":"stream","name":"stdout","text":["Class weights: {1: 2.0594285714285716, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/xgboost/core.py:2150: FutureWarning: Since 2.1.0, the shape of the gradient and hessian is required to be (n_samples, n_targets) or (n_samples, n_classes).\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["[0]\teval-mlogloss:1.96928\teval-wmae:0.30126\n","[1]\teval-mlogloss:2.01622\teval-wmae:0.29663\n","[2]\teval-mlogloss:2.04829\teval-wmae:0.29600\n","[3]\teval-mlogloss:2.12055\teval-wmae:0.29463\n","[4]\teval-mlogloss:2.13954\teval-wmae:0.29589\n","[5]\teval-mlogloss:2.15084\teval-wmae:0.29589\n","[6]\teval-mlogloss:2.16180\teval-wmae:0.29526\n","[7]\teval-mlogloss:2.16893\teval-wmae:0.29604\n","[8]\teval-mlogloss:2.17519\teval-wmae:0.29650\n","[9]\teval-mlogloss:2.18540\teval-wmae:0.29643\n","Train score: 0.29057429702590704\n","Val score: 0.2964318532650992\n","Class weights: {1: 2.0594285714285716, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","[0]\teval-mlogloss:1.97119\teval-wmae:0.29827\n","[1]\teval-mlogloss:2.01865\teval-wmae:0.29618\n","[2]\teval-mlogloss:2.05118\teval-wmae:0.29685\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/xgboost/core.py:2150: FutureWarning: Since 2.1.0, the shape of the gradient and hessian is required to be (n_samples, n_targets) or (n_samples, n_classes).\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["[3]\teval-mlogloss:2.12325\teval-wmae:0.29591\n","[4]\teval-mlogloss:2.14262\teval-wmae:0.29596\n","[5]\teval-mlogloss:2.15418\teval-wmae:0.29588\n","[6]\teval-mlogloss:2.16513\teval-wmae:0.29524\n","[7]\teval-mlogloss:2.17226\teval-wmae:0.29615\n","[8]\teval-mlogloss:2.17853\teval-wmae:0.29542\n","[9]\teval-mlogloss:2.18878\teval-wmae:0.29546\n","Train score: 0.28957064690945855\n","Val score: 0.2954645089655038\n","Class weights: {1: 2.0594285714285716, 0: 0.2155857142857143, 2: 0.14104285714285714, 4: 0.11477142857142857, 3: 0.1141, 5: 0.07867142857142857, 6: 0.0784}\n","[0]\teval-mlogloss:1.97037\teval-wmae:0.30267\n","[1]\teval-mlogloss:2.01793\teval-wmae:0.29853\n","[2]\teval-mlogloss:2.05081\teval-wmae:0.29803\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/xgboost/core.py:2150: FutureWarning: Since 2.1.0, the shape of the gradient and hessian is required to be (n_samples, n_targets) or (n_samples, n_classes).\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["[3]\teval-mlogloss:2.12303\teval-wmae:0.29736\n","[4]\teval-mlogloss:2.14215\teval-wmae:0.29775\n","[5]\teval-mlogloss:2.15337\teval-wmae:0.29758\n","[6]\teval-mlogloss:2.16450\teval-wmae:0.29738\n","[7]\teval-mlogloss:2.17166\teval-wmae:0.29743\n","[8]\teval-mlogloss:2.17796\teval-wmae:0.29738\n","[9]\teval-mlogloss:2.18820\teval-wmae:0.29752\n","Train score: 0.29084884017849894\n","Val score: 0.297520346735858\n","XGBoost WMAE: 0.2964722363221537\n"]}],"source":["xgb_dart_tuned_params.update(xgb_dart_init_params)\n","\n","xgb_dart_mean_wmae, xgb_model_dart, xgb_X_train_of_bm, xgb_y_train_of_bm = train_model(\n","    my_model=XGBClassifier,\n","    X=X_xgb,\n","    y=y,\n","    early_stopping_rounds=100,\n","    init_params=xgb_dart_tuned_params,\n","    cat_features=cat_cols,\n","    rs=101,\n","    class_weights=True\n",")\n","\n","print(f\"XGBoost WMAE: {xgb_dart_mean_wmae}\")"]},{"cell_type":"markdown","source":["1.2545"],"metadata":{"id":"wB4k2c-KYCOO"}},{"cell_type":"markdown","metadata":{"id":"CmfKJT8BpZDd"},"source":["#### Визуализация результатов"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PbI67HMMpZ6i","colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"status":"ok","timestamp":1748441720273,"user_tz":-180,"elapsed":2335,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"01dda3bd-8b4f-45c6-f3ae-9915d2e2fa28"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2500x2500 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(25, 25))\n","xgb.plot_importance(xgb_model_dart, title='Feature Importance Weight for XGB Dart', color='r');"]},{"cell_type":"code","source":["xgb_model_dart.get_score(importance_type='weight')"],"metadata":{"id":"GQq8ql28CEYV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748441723147,"user_tz":-180,"elapsed":28,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"}},"outputId":"d62ce077-ebca-4525-d176-02f491840a98"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'std_hour_of_day': 175.0,\n"," 'mean_days_since_first_transaction': 192.0,\n"," 'min_transaction_amount': 125.0,\n"," 'log_mean_transaction_amount': 189.0,\n"," 'large_transaction_count': 151.0,\n"," 'mcc_frequency_3990': 55.0,\n"," 'mcc_frequency_5499': 53.0,\n"," 'mcc_frequency_6536': 41.0,\n"," 'mcc_mean_amount_5541': 137.0,\n"," 'mcc_mean_amount_6011': 105.0,\n"," 'mcc_max_amount_5200': 82.0,\n"," 'mcc_min_amount_4111': 57.0,\n"," 'mcc_min_amount_6538': 81.0,\n"," 'log_mcc_amount_other': 128.0,\n"," 'mean_mean_transaction_amount_by_merchant': 83.0,\n"," 'mean_min_transaction_amount_by_merchant': 114.0,\n"," 'mean_activity_period_by_merchant': 153.0,\n"," 'mean_min_time_diff_by_merchant': 143.0,\n"," 'std_time_diff_to_mean_time_diff_ratio': 368.0,\n"," 'total_amount_to_unique_mcc_count': 85.0,\n"," 'mcc_amount_5812_plus_5912': 139.0,\n"," 'mcc_amount_5812_plus_5912_plus_5411': 214.0,\n"," 'mean_time_between_transactions': 189.0,\n"," 'last_transaction_timestamp': 215.0,\n"," 'time_since_last_transaction': 81.0}"]},"metadata":{},"execution_count":231}]},{"cell_type":"code","source":["xgb_X_train_of_bm_copy = xgb_X_train_of_bm.copy()\n","\n","for col in cat_cols:\n","    xgb_X_train_of_bm_copy[col] = xgb_X_train_of_bm_copy[col].astype('category')\n","\n","xgb_X_train_dmatrix = xgb.DMatrix(xgb_X_train_of_bm_copy, label=xgb_y_train_of_bm)\n","\n","imp_cb_features_df, imp_cb_features_list = shap_importance(\n","    xgb_model_dart,\n","    xgb_X_train_dmatrix,\n","    max_display=len(aggregated_train.columns) # len(aggregated_train.columns) для дальнейшей кросс-валидации\n",")"],"metadata":{"id":"vmXRMpGiAvE8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hne2A0sMxfnr"},"source":["# Лучшие модели"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y0jYmEuOG69l"},"outputs":[],"source":["# cb_model_1.save_model('../cb_model_1.cbm') # WMAE --> 0.82410\n","# xgb_model_dart.save_model('../xgb_model_dart.json')  # WMAE --> 0.82410"]},{"cell_type":"markdown","metadata":{"id":"QAIIbSi75eEk"},"source":["# Интерпретация  результатов\n","*  В основном, самыми важными признаками в моделях являются:\n","`std_time_diff_to_mean_time_diff_ratio, large_transaction_count, mcc_amount_5812_plus_5912_plus_5411, mean_min_transaction_amount_by_merchant, mcc_frequency_3990, mcc_amount_5812_plus_5912, last_transaction_timestamp`\n","\n"," Они вносят самый значительный вклад в нашу модель.\n","\n","* Признаками же, которые не показывали значительной важности в моделях, являются перечисленные в `low_imp_features`."]},{"cell_type":"markdown","metadata":{"id":"IP5TvTI4Q_Os"},"source":["# Удалим неважные признаки и предобработаем тестовые данные\n","Это  нужно для того, чтобы повысить показатель точности модели."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K2es7hsa7Y46"},"outputs":[],"source":["filtered_test_lgb = filtered_test.copy()\n","le = LabelEncoder()\n","for col in cat_cols:\n","    filtered_test_lgb[col] = le.fit_transform(filtered_test_lgb[col])\n","\n","filtered_test_xgb = filtered_test.copy()\n","for col in cat_cols:\n","    filtered_test_xgb[col] = filtered_test_xgb[col].astype('category')\n","\n","dtest = DMatrix(filtered_test_xgb, enable_categorical=True, nthread=-1)"]},{"cell_type":"markdown","metadata":{"id":"MdhJC68TRSlx"},"source":["# Сделаем финальное предсказание"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":163},"executionInfo":{"elapsed":41,"status":"ok","timestamp":1748442585539,"user":{"displayName":"Филя Гостевой","userId":"02929354437426405181"},"user_tz":-180},"id":"1SVL16a1sAcE","outputId":"d8686f56-eef8-4bb0-f1a1-73b4654f8601"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   std_hour_of_day  mean_days_since_first_transaction  min_transaction_amount  \\\n","0         3.474609                           40.31250                    28.0   \n","1         5.250000                           37.34375                     3.0   \n","2         5.089844                           38.71875                     1.0   \n","\n","   log_mean_transaction_amount  large_transaction_count  mcc_frequency_3990  \\\n","0                     5.839844                     70.0                 0.0   \n","1                     7.210938                    418.0                74.0   \n","2                     4.914062                     91.0                 4.0   \n","\n","   mcc_frequency_5499  mcc_frequency_6536  mcc_mean_amount_5541  \\\n","0                16.0                 0.0            855.750000   \n","1                17.0                 0.0           3411.399902   \n","2               106.0                 7.0              0.000000   \n","\n","   mcc_mean_amount_6011  mcc_max_amount_5200  mcc_min_amount_4111  \\\n","0              0.000000                  0.0                  0.0   \n","1          46231.285156             123509.0                 52.0   \n","2              0.000000               1401.0                  0.0   \n","\n","   mcc_min_amount_6538  log_mcc_amount_other  \\\n","0                  0.0             10.609375   \n","1               4190.0             14.382812   \n","2                 50.0             11.304688   \n","\n","   mean_mean_transaction_amount_by_merchant  \\\n","0                               1138.178833   \n","1                               8754.263672   \n","2                               1847.791748   \n","\n","   mean_min_transaction_amount_by_merchant  mean_activity_period_by_merchant  \\\n","0                               862.347839                         17.281250   \n","1                              7024.486816                          6.402344   \n","2                              1486.581421                         19.812500   \n","\n","   mean_min_time_diff_by_merchant  std_time_diff_to_mean_time_diff_ratio  \\\n","0                    1.015054e+06                               1.268555   \n","1                    4.012558e+05                               1.773438   \n","2                    6.750982e+05                               2.175781   \n","\n","   total_amount_to_unique_mcc_count  mcc_amount_5812_plus_5912  \\\n","0                       5940.833333                    10693.0   \n","1                      55944.092593                   275966.0   \n","2                      11814.117647                      455.0   \n","\n","   mcc_amount_5812_plus_5912_plus_5411  mean_time_between_transactions  \\\n","0                              22334.0                       17.078125   \n","1                             447605.0                        7.480469   \n","2                              29152.0                       11.195312   \n","\n","   last_transaction_timestamp  time_since_last_transaction  \n","0                1.727716e+15                 2.072615e+07  \n","1                1.727295e+15                 2.114692e+07  \n","2                1.727116e+15                 2.132570e+07  "],"text/html":["\n","  <div id=\"df-94a28c5b-c45b-4813-abee-6c78de0fb7fb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>std_hour_of_day</th>\n","      <th>mean_days_since_first_transaction</th>\n","      <th>min_transaction_amount</th>\n","      <th>log_mean_transaction_amount</th>\n","      <th>large_transaction_count</th>\n","      <th>mcc_frequency_3990</th>\n","      <th>mcc_frequency_5499</th>\n","      <th>mcc_frequency_6536</th>\n","      <th>mcc_mean_amount_5541</th>\n","      <th>mcc_mean_amount_6011</th>\n","      <th>mcc_max_amount_5200</th>\n","      <th>mcc_min_amount_4111</th>\n","      <th>mcc_min_amount_6538</th>\n","      <th>log_mcc_amount_other</th>\n","      <th>mean_mean_transaction_amount_by_merchant</th>\n","      <th>mean_min_transaction_amount_by_merchant</th>\n","      <th>mean_activity_period_by_merchant</th>\n","      <th>mean_min_time_diff_by_merchant</th>\n","      <th>std_time_diff_to_mean_time_diff_ratio</th>\n","      <th>total_amount_to_unique_mcc_count</th>\n","      <th>mcc_amount_5812_plus_5912</th>\n","      <th>mcc_amount_5812_plus_5912_plus_5411</th>\n","      <th>mean_time_between_transactions</th>\n","      <th>last_transaction_timestamp</th>\n","      <th>time_since_last_transaction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.474609</td>\n","      <td>40.31250</td>\n","      <td>28.0</td>\n","      <td>5.839844</td>\n","      <td>70.0</td>\n","      <td>0.0</td>\n","      <td>16.0</td>\n","      <td>0.0</td>\n","      <td>855.750000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>10.609375</td>\n","      <td>1138.178833</td>\n","      <td>862.347839</td>\n","      <td>17.281250</td>\n","      <td>1.015054e+06</td>\n","      <td>1.268555</td>\n","      <td>5940.833333</td>\n","      <td>10693.0</td>\n","      <td>22334.0</td>\n","      <td>17.078125</td>\n","      <td>1.727716e+15</td>\n","      <td>2.072615e+07</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.250000</td>\n","      <td>37.34375</td>\n","      <td>3.0</td>\n","      <td>7.210938</td>\n","      <td>418.0</td>\n","      <td>74.0</td>\n","      <td>17.0</td>\n","      <td>0.0</td>\n","      <td>3411.399902</td>\n","      <td>46231.285156</td>\n","      <td>123509.0</td>\n","      <td>52.0</td>\n","      <td>4190.0</td>\n","      <td>14.382812</td>\n","      <td>8754.263672</td>\n","      <td>7024.486816</td>\n","      <td>6.402344</td>\n","      <td>4.012558e+05</td>\n","      <td>1.773438</td>\n","      <td>55944.092593</td>\n","      <td>275966.0</td>\n","      <td>447605.0</td>\n","      <td>7.480469</td>\n","      <td>1.727295e+15</td>\n","      <td>2.114692e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.089844</td>\n","      <td>38.71875</td>\n","      <td>1.0</td>\n","      <td>4.914062</td>\n","      <td>91.0</td>\n","      <td>4.0</td>\n","      <td>106.0</td>\n","      <td>7.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1401.0</td>\n","      <td>0.0</td>\n","      <td>50.0</td>\n","      <td>11.304688</td>\n","      <td>1847.791748</td>\n","      <td>1486.581421</td>\n","      <td>19.812500</td>\n","      <td>6.750982e+05</td>\n","      <td>2.175781</td>\n","      <td>11814.117647</td>\n","      <td>455.0</td>\n","      <td>29152.0</td>\n","      <td>11.195312</td>\n","      <td>1.727116e+15</td>\n","      <td>2.132570e+07</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-94a28c5b-c45b-4813-abee-6c78de0fb7fb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-94a28c5b-c45b-4813-abee-6c78de0fb7fb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-94a28c5b-c45b-4813-abee-6c78de0fb7fb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-9894a976-34ad-4920-87cc-41d0b4703c00\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9894a976-34ad-4920-87cc-41d0b4703c00')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-9894a976-34ad-4920-87cc-41d0b4703c00 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"filtered_test"}},"metadata":{},"execution_count":109}],"source":["filtered_test.head(3)"]},{"cell_type":"code","source":[],"metadata":{"id":"rQ5JkZSz_158"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H9ekkZ3G_Dzm"},"outputs":[],"source":["test_target['cb1_target'] = np.argmax(cb_model_1.predict(filtered_test), axis=1)\n","test_target[['client_num', 'cb1_target']].to_csv('cb_101_subm.csv', index=False)\n","\n","test_target['xgb_dart_target'] = np.argmax(xgb_model_dart.predict(dtest))\n","test_target[['client_num', 'xgb_dart_target']].to_csv('xgb_dart_subm.csv', index=False)\n","\n","# test_target['target_reg'] = test_target[['cb1_target', 'xgb_dart_target']].mode(axis=1)\n","# test_target.head()"]},{"cell_type":"code","source":["# test_target.target_xgb_dart.value_counts()"],"metadata":{"id":"lUk045qPUbTK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"un6Ac-vSRwFm"},"source":["# Подведение итогов"]},{"cell_type":"markdown","source":["### Не сработало:\n","- Oversampling, Undersampling\n","- LightGBM\n","### Сработало:\n","- Увеличение веса для 1 класса\n","- Отбор и генерация новых фич\n","-  Усовершенствованная кросс-энтропия и кастомная метрика WMAE помогли обучить модель, учитывая веса классов и выдать лучший результат на лидерборде\n","## Итог:\n","- Лучшая метриак WMAE на соревновании: 0,82410"],"metadata":{"id":"TnCn6B7qbDIa"}}],"metadata":{"colab":{"collapsed_sections":["xQFJmGxUYiv7","r6Aex-15Yzhf","Cl0KHhHV1U4K","YChiY4cu76yg","MfSAA1bjCt-x","gGMTxe1zu5XJ","SllIArTlwdas","Eoa3iKzRO4IR","IP5TvTI4Q_Os","MdhJC68TRSlx"],"provenance":[{"file_id":"1hnyKAZuIP6D_Nl9v-vqraMRdt-K3mkY7","timestamp":1746870416855}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}